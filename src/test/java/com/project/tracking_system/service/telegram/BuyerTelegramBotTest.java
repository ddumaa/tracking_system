package com.project.tracking_system.service.telegram;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.project.tracking_system.dto.ActionRequiredReturnRequestDto;
import com.project.tracking_system.dto.ReturnRequestUpdateResponse;
import com.project.tracking_system.dto.TelegramParcelInfoDTO;
import com.project.tracking_system.dto.TelegramParcelsOverviewDTO;
import com.project.tracking_system.entity.AdminNotification;
import com.project.tracking_system.entity.BuyerBotScreen;
import com.project.tracking_system.entity.BuyerChatState;
import com.project.tracking_system.entity.Customer;
import com.project.tracking_system.entity.OrderReturnRequestStatus;
import com.project.tracking_system.entity.NameSource;
import com.project.tracking_system.entity.GlobalStatus;
import com.project.tracking_system.entity.OrderReturnRequest;
import com.project.tracking_system.entity.OrderReturnRequestActionRequest;
import com.project.tracking_system.service.admin.AdminNotificationService;
import com.project.tracking_system.service.customer.CustomerTelegramService;
import com.project.tracking_system.utils.PhoneUtils;
import com.project.tracking_system.service.telegram.ChatSession;
import com.project.tracking_system.service.telegram.support.InMemoryChatSessionRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.chat.Chat;
import org.telegram.telegrambots.meta.api.objects.Contact;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMemberUpdated;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;
import org.springframework.security.access.AccessDeniedException;

import java.time.ZonedDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
 * –¢–µ—Å—Ç—ã –¥–ª—è {@link BuyerTelegramBot}, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
 */
@ExtendWith(MockitoExtension.class)
class BuyerTelegramBotTest {

    private static final String MENU_BUTTON_TEXT = "üè† –ú–µ–Ω—é";
    private static final String BACK_BUTTON_TEXT = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥";
    private static final String NAVIGATE_BACK_CALLBACK = "nav:back";

    @Mock
    private TelegramClient telegramClient;

    @Mock
    private CustomerTelegramService telegramService;

    @Mock
    private AdminNotificationService adminNotificationService;

    private BuyerTelegramBot bot;
    private FullNameValidator fullNameValidator;
    private InMemoryChatSessionRepository chatSessionRepository;
    private ObjectMapper objectMapper;
    private AtomicInteger messageIdSequence;

    /**
     * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ —Å—Ç–∞–± –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ Telegram –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º.
     */
    @BeforeEach
    void setUp() {
        fullNameValidator = new FullNameValidator();
        chatSessionRepository = new InMemoryChatSessionRepository();
        objectMapper = new ObjectMapper();
        messageIdSequence = new AtomicInteger(100);
        bot = new BuyerTelegramBot(telegramClient, "token", telegramService, adminNotificationService,
                fullNameValidator, chatSessionRepository, objectMapper);
        try {
            doAnswer(invocation -> {
                Message response = new Message();
                response.setMessageId(messageIdSequence.getAndIncrement());
                return response;
            }).when(telegramClient).execute(any(SendMessage.class));
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
        try {
            when(telegramClient.execute(any(EditMessageText.class))).thenReturn(null);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
        try {
            when(telegramClient.execute(any(AnswerCallbackQuery.class))).thenReturn(null);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
        when(adminNotificationService.findActiveNotification()).thenReturn(Optional.empty());
        when(telegramService.findByChatId(anyLong())).thenReturn(Optional.empty());
        when(telegramService.getActiveReturnRequests(anyLong())).thenReturn(List.of());
        when(telegramService.getParcelsOverview(anyLong())).thenReturn(Optional.empty());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è –∏ –º–∞—Å–∫–∏—Ä—É—é—Ç—Å—è.
     *
     * @param input        –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * @param expectedMask –æ–∂–∏–¥–∞–µ–º–æ–µ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
     */
    @ParameterizedTest
    @MethodSource("recognizedPhones")
    void shouldRecognizePhoneFormatsWhenAwaiting(String input, String expectedMask) throws Exception {
        Long chatId = 123L;
        markAwaitingContact(chatId);

        Update update = mockTextUpdate(chatId, input);

        bot.consume(update);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        SendMessage message = captor.getValue();

        assertEquals(chatId.toString(), message.getChatId());
        assertTrue(message.getText().contains(expectedMask));
        assertPhoneKeyboard(message.getReplyMarkup());
        verify(telegramService).findByChatId(chatId);
        verifyNoMoreInteractions(telegramService);
    }

    /**
     * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–æ–¥—è—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –Ω–æ–º–µ—Ä–∞.
     */
    @Test
    void shouldShowFormatHintForUnrecognizedPhone() throws Exception {
        Long chatId = 456L;
        markAwaitingContact(chatId);

        Update update = mockTextUpdate(chatId, "random text");

        bot.consume(update);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        SendMessage message = captor.getValue();

        assertEquals(chatId.toString(), message.getChatId());
        assertTrue(message.getText().contains("+375"));
        assertTrue(message.getText().contains("8029"));
        assertPhoneKeyboard(message.getReplyMarkup());
        verify(telegramService).findByChatId(chatId);
        verifyNoMoreInteractions(telegramService);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
     */
    @Test
    void shouldShowPhoneKeyboardOnStartWhenCustomerMissing() throws Exception {
        Long chatId = 321L;
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.empty());

        Update update = mockTextUpdate(chatId, "/start");

        bot.consume(update);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        SendMessage message = captor.getValue();

        assertEquals(chatId.toString(), message.getChatId());
        assertPhoneKeyboard(message.getReplyMarkup());
        assertTrue(message.getText().contains("–ø–æ–¥–µ–ª–∏—Ç–µ—Å—å"),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—å–±—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     */
    @Test
    void shouldRenderActiveAnnouncementInMenu() throws Exception {
        Long chatId = 777L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        customer.setTelegramConfirmed(true);
        customer.setNotificationsEnabled(true);
        customer.setFullName("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤");
        customer.setNameSource(NameSource.USER_CONFIRMED);

        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        AdminNotification notification = new AdminNotification();
        notification.setId(42L);
        notification.setTitle("–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ");
        notification.setBodyLines(List.of("–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç", "–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç"));
        notification.setUpdatedAt(ZonedDateTime.now().minusMinutes(5));
        when(adminNotificationService.findActiveNotification()).thenReturn(Optional.of(notification));

        bot.consume(mockTextUpdate(chatId, "/start"));

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient, atLeastOnce()).execute(editCaptor.capture());
        EditMessageText bannerEdit = editCaptor.getAllValues().get(editCaptor.getAllValues().size() - 1);

        assertEquals(ParseMode.MARKDOWNV2, bannerEdit.getParseMode(),
                "–ë–∞–Ω–Ω–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º Markdown –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏");
        assertTrue(bannerEdit.getText().contains(notification.getTitle()),
                "–¢–µ–∫—Å—Ç –±–∞–Ω–Ω–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
        assertTrue(bannerEdit.getText().contains("–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç"));
        assertTrue(bannerEdit.getText().contains("–í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç"));

        assertNotNull(bannerEdit.getReplyMarkup(), "–û–∂–∏–¥–∞–ª–∞—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–∞–Ω–Ω–µ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
        assertTrue(bannerEdit.getReplyMarkup() instanceof InlineKeyboardMarkup,
                "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∏–ø–∞ InlineKeyboardMarkup");
        InlineKeyboardMarkup markup = (InlineKeyboardMarkup) bannerEdit.getReplyMarkup();
        InlineKeyboardButton okButton = markup.getKeyboard().get(0).get(0);
        assertEquals("–û–∫", okButton.getText(), "–ö–Ω–æ–ø–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è ¬´–û–∫¬ª");
        assertEquals("announcement:ack", okButton.getCallbackData());

        ChatSession session = chatSessionRepository.find(chatId)
                .orElseThrow(() -> new AssertionError("–°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"));
        assertEquals(notification.getId(), session.getCurrentNotificationId(),
                "–í —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
        assertFalse(session.isAnnouncementSeen(),
                "–ü–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º");
        assertEquals(notification.getUpdatedAt(), session.getAnnouncementUpdatedAt(),
                "–í —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–∞–Ω–Ω–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     */
    @Test
    void shouldRenderAnnouncementForConfirmedCustomer() throws Exception {
        Long chatId = 779L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        customer.setTelegramConfirmed(true);
        customer.setNotificationsEnabled(true);
        customer.setFullName("–ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤");
        customer.setNameSource(NameSource.USER_CONFIRMED);

        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        AdminNotification notification = new AdminNotification();
        notification.setId(43L);
        notification.setTitle("–°–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å");
        notification.setBodyLines(List.of("–ü—É–Ω–∫—Ç –æ–¥–∏–Ω"));
        notification.setUpdatedAt(ZonedDateTime.now().minusMinutes(1));
        when(adminNotificationService.findActiveNotification()).thenReturn(Optional.of(notification));

        bot.consume(mockTextUpdate(chatId, "/start"));

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient, atLeastOnce()).execute(editCaptor.capture());
        boolean bannerRendered = editCaptor.getAllValues().stream()
                .anyMatch(edit -> edit.getText() != null && edit.getText().contains(notification.getTitle()));

        assertTrue(bannerRendered,
                "–ë–∞–Ω–Ω–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π");

        ChatSession session = chatSessionRepository.find(chatId)
                .orElseThrow(() -> new AssertionError("–°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"));
        assertEquals(notification.getId(), session.getCurrentNotificationId(),
                "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–∫–∞–∑–æ–≤");
        assertEquals(notification.getUpdatedAt(), session.getAnnouncementUpdatedAt(),
                "–í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     */
    @Test
    void shouldResendAnnouncementWhenContentRefreshed() throws Exception {
        Long chatId = 780L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        customer.setTelegramConfirmed(true);
        customer.setNotificationsEnabled(true);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        AdminNotification notification = new AdminNotification();
        notification.setId(44L);
        notification.setTitle("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        notification.setBodyLines(List.of("–ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è"));
        ZonedDateTime initialUpdatedAt = ZonedDateTime.now().minusMinutes(15);
        notification.setUpdatedAt(initialUpdatedAt);
        when(adminNotificationService.findActiveNotification()).thenReturn(Optional.of(notification));

        bot.consume(mockTextUpdate(chatId, "/start"));

        chatSessionRepository.markAnnouncementSeen(chatId);
        clearInvocations(telegramClient);

        ZonedDateTime refreshedAt = initialUpdatedAt.plusMinutes(5);
        notification.setUpdatedAt(refreshedAt);
        notification.setBodyLines(List.of("–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"));

        bot.consume(mockTextUpdate(chatId, "/start"));

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient, atLeastOnce()).execute(editCaptor.capture());
        boolean bannerUpdated = editCaptor.getAllValues().stream()
                .map(EditMessageText::getText)
                .filter(Objects::nonNull)
                .anyMatch(text -> text.contains("–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"));

        assertTrue(bannerUpdated,
                "–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–Ω–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");

        ChatSession session = chatSessionRepository.find(chatId)
                .orElseThrow(() -> new AssertionError("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"));
        assertEquals(refreshedAt, session.getAnnouncementUpdatedAt(),
                "–í —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–æ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
        assertFalse(session.isAnnouncementSeen(),
                "–ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç—Å—è –ø–æ –º–∞–≥–∞–∑–∏–Ω—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞.
     */
    @Test
    void shouldGroupParcelsByStoreWithTracksOnly() throws Exception {
        Long chatId = 901L;
        TelegramParcelInfoDTO first = new TelegramParcelInfoDTO(1L, "TRACK-1", "Store Alpha", GlobalStatus.DELIVERED, false);
        TelegramParcelInfoDTO second = new TelegramParcelInfoDTO(2L, "TRACK-2", "Store Beta", GlobalStatus.DELIVERED, false);
        TelegramParcelInfoDTO third = new TelegramParcelInfoDTO(3L, "TRACK-3", "Store Alpha", GlobalStatus.DELIVERED, false);

        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(
                List.of(first, second, third),
                List.of(),
                List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        Update callbackUpdate = mockCallbackUpdate(chatId, "parcels:delivered");

        bot.consume(callbackUpdate);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        String text = captor.getValue().getText();

        assertEquals(ParseMode.MARKDOWNV2, captor.getValue().getParseMode(),
                "–°–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Markdown, —á—Ç–æ–±—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –±—ã–ª–∏ –∂–∏—Ä–Ω—ã–º–∏");
        assertTrue(text.startsWith("üì¨ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏"),
                "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏");
        assertTrue(text.contains("*Store Alpha*\n‚Ä¢ TRACK\\-1\n‚Ä¢ TRACK\\-3"),
                "–ü–æ—Å—ã–ª–∫–∏ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ–ª–∂–Ω—ã –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–¥ –æ–±—â–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –≤–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–∫–∏");
        assertTrue(text.contains("*Store Beta*\n‚Ä¢ TRACK\\-2"),
                "–î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–ª–æ–∫ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º–∏");
    }

    /**
     * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown —ç–∫—Ä–∞–Ω–∏—Ä—É—é—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ø–∏—Å–∫–∞ –ø–æ—Å—ã–ª–æ–∫.
     */
    @Test
    void shouldEscapeMarkdownWhenRenderingParcels() throws Exception {
        Long chatId = 903L;
        TelegramParcelInfoDTO special = new TelegramParcelInfoDTO(
                10L,
                "TRACK_[1]",
                "Store_[Beta](Promo)",
                GlobalStatus.DELIVERED,
                false
        );

        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(
                List.of(special),
                List.of(),
                List.of()
        );
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        Update callbackUpdate = mockCallbackUpdate(chatId, "parcels:delivered");

        bot.consume(callbackUpdate);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        SendMessage message = captor.getValue();

        assertEquals(ParseMode.MARKDOWNV2, message.getParseMode(),
                "–û—Ç–≤–µ—Ç –ø–æ –ø–æ—Å—ã–ª–∫–∞–º –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
        String text = message.getText();
        assertTrue(text.contains("*Store\\_\\[Beta\\]\\(Promo\\)*"),
                "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —Å –æ—Å–æ–±—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–æ–ª–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è");
        assertTrue(text.contains("‚Ä¢ TRACK\\_\\[1\\]"),
                "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —Å —Å–∏–º–≤–æ–ª–∞–º–∏ Markdown –¥–æ–ª–∂–µ–Ω —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–∂–∏–¥–∞—é—Ç –∑–∞–±–æ—Ä–∞¬ª –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
     */
    @Test
    void shouldWarnAboutParcelsNotPickedUpInAwaitingSection() throws Exception {
        Long chatId = 902L;
        TelegramParcelInfoDTO critical = new TelegramParcelInfoDTO(
                "TRACK-ALERT",
                "Store Gamma",
                GlobalStatus.CUSTOMER_NOT_PICKING_UP
        );
        TelegramParcelInfoDTO regular = new TelegramParcelInfoDTO(
                "TRACK-OK",
                "Store Gamma",
                GlobalStatus.WAITING_FOR_CUSTOMER
        );

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫.
     */
    @Test
    void shouldRenderReturnAndExchangeButtonsInReturnsMenu() throws Exception {
        Long chatId = 904L;
        TelegramParcelInfoDTO delivered = new TelegramParcelInfoDTO(55L, "TRACK-55", "Store Zeta", GlobalStatus.DELIVERED, false);
        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(List.of(delivered), List.of(), List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        Update callbackUpdate = mockCallbackUpdate(chatId, "returns:create");

        bot.consume(callbackUpdate);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        SendMessage message = captor.getValue();

        InlineKeyboardMarkup markup = (InlineKeyboardMarkup) message.getReplyMarkup();
        assertNotNull(markup, "–î–ª—è –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π");
        List<List<InlineKeyboardButton>> keyboard = markup.getKeyboard();
        assertFalse(keyboard.isEmpty(), "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫–∏");
        List<InlineKeyboardButton> firstRow = keyboard.get(0);
        assertEquals(2, firstRow.size(), "–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –æ–∂–∏–¥–∞—é—Ç—Å—è –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π");
        assertEquals("–í–µ—Ä–Ω—É—Ç—å", firstRow.get(0).getText());
        assertEquals("–û–±–º–µ–Ω—è—Ç—å", firstRow.get(1).getText());
        assertEquals("parcel:return:55", firstRow.get(0).getCallbackData());
        assertEquals("parcel:exchange:55", firstRow.get(1).getCallbackData());
        List<InlineKeyboardButton> lastRow = keyboard.get(keyboard.size() - 1);
        assertTrue(lastRow.stream().anyMatch(button -> BACK_BUTTON_TEXT.equals(button.getText())),
                "–í –∫–æ–Ω—Ü–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥");
    }

    /**
     * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—É–Ω–∫—Ç—ã.
     */
    @Test
    void shouldShowReturnsMenuWithAvailableOptions() throws Exception {
        Long chatId = 906L;

        Update callbackUpdate = mockCallbackUpdate(chatId, "menu:returns");

        bot.consume(callbackUpdate);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        SendMessage message = captor.getValue();

        String text = message.getText();
        assertTrue(text.contains("–í–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ–±–º–µ–Ω—ã"), "–¢–µ–∫—Å—Ç –º–µ–Ω—é –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞");

        InlineKeyboardMarkup markup = (InlineKeyboardMarkup) message.getReplyMarkup();
        List<List<InlineKeyboardButton>> keyboard = markup.getKeyboard();
        assertEquals(3, keyboard.size(), "–û–∂–∏–¥–∞–µ—Ç—Å—è –¥–≤–µ –æ–ø—Ü–∏–∏ –∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏");
        assertEquals("üìÇ –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏", keyboard.get(0).get(0).getText());
        assertEquals("üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", keyboard.get(1).get(0).getText());
        assertEquals(BACK_BUTTON_TEXT, keyboard.get(2).get(0).getText());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—ã–ª–æ–∫ –±–æ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —è–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é.
     */
    @Test
    void shouldReuseAnchorAndShowNavigationWhenNoReturnableParcels() throws Exception {
        Long chatId = 907L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));
        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(List.of(), List.of(), List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        Update createCallback = mockCallbackUpdate(chatId, "returns:create", 77);
        bot.consume(createCallback);

        Update typeCallback = mockCallbackUpdate(chatId, "returns:create:type:return", 77);
        bot.consume(typeCallback);

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient, atLeast(2)).execute(editCaptor.capture());
        verify(telegramClient, never()).execute(isA(SendMessage.class));

        EditMessageText lastEdit = editCaptor.getAllValues().get(editCaptor.getAllValues().size() - 1);
        assertEquals(chatId.toString(), lastEdit.getChatId());
        assertTrue(lastEdit.getText().contains("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—ã–ª–æ–∫"),
                "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫");

        InlineKeyboardMarkup markup = lastEdit.getReplyMarkup();
        assertNotNull(markup, "–û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π");
        List<List<InlineKeyboardButton>> keyboard = markup.getKeyboard();
        assertEquals(1, keyboard.size(), "–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ—Å—ã–ª–æ–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏");
        List<InlineKeyboardButton> navigationRow = keyboard.get(0);
        assertEquals(2, navigationRow.size(), "–°—Ç—Ä–æ–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–µ –∫–Ω–æ–ø–∫–∏");
        InlineKeyboardButton backButton = navigationRow.get(0);
        InlineKeyboardButton menuButton = navigationRow.get(1);
        assertEquals(BACK_BUTTON_TEXT, backButton.getText());
        assertEquals(MENU_BUTTON_TEXT, menuButton.getText());
        assertEquals("nav:back", backButton.getCallbackData());
        assertEquals("menu:back", menuButton.getCallbackData());
    }

    /**
     * –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –±–æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     */
    @Test
    void shouldRequestPhoneWhenActiveReturnsOpenedWithoutCustomer() throws Exception {
        Long chatId = 909L;

        Update callbackUpdate = mockCallbackUpdate(chatId, "returns:active");

        bot.consume(callbackUpdate);

        verify(telegramClient, atLeastOnce()).execute(any(AnswerCallbackQuery.class));
        verify(telegramService, never()).getActiveReturnRequests(anyLong());

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());

        List<SendMessage> messages = captor.getAllValues();
        assertTrue(messages.stream()
                        .map(SendMessage::getText)
                        .filter(Objects::nonNull)
                        .anyMatch(text -> text.contains("–ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–º–µ—Ä–∞");
        assertTrue(messages.stream()
                        .map(SendMessage::getReplyMarkup)
                        .filter(Objects::nonNull)
                        .anyMatch(markup -> markup instanceof ReplyKeyboardMarkup),
                "–ë–æ—Ç –æ–±—è–∑–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–∞");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É.
     */
    @Test
    void shouldShowOnlyActionsAfterActiveRequestSelected() throws Exception {
        Long chatId = 9871L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto requestDto = new ActionRequiredReturnRequestDto(
                1L,
                2L,
                "TRK-001",
                "Store",
                "–ü–æ–ª—É—á–µ–Ω–∞",
                OrderReturnRequestStatus.REGISTERED,
                OrderReturnRequestStatus.REGISTERED.getDisplayName(),
                "10.10.2024",
                "09.10.2024",
                "–ü—Ä–∏—á–∏–Ω–∞",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "REV-001",
                false,
                true,
                true,
                false,
                false,
                false,
                null,
                false,
                null,
                false
        );

        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenReturn(List.of(requestDto))
                .thenReturn(List.of(requestDto));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));

        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:1:2"));

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());

        EditMessageText editMessage = editCaptor.getValue();
        InlineKeyboardMarkup markup = editMessage.getReplyMarkup();
        assertNotNull(markup, "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏");
        List<List<InlineKeyboardButton>> keyboard = markup.getKeyboard();
        assertFalse(keyboard.isEmpty(), "–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");

        String messageText = editMessage.getText();
        assertTrue(messageText.contains("–¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç"),
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞");

        InlineKeyboardButton firstAction = keyboard.get(0).get(0);
        assertEquals("üìÆ –£–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫", firstAction.getText(),
                "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∑–∞—è–≤–∫–µ");

        boolean hasSelectionButtons = keyboard.stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .anyMatch(button -> {
                    String callback = button.getCallbackData();
                    return callback != null && callback.startsWith("returns:active:select:");
                });
        assertFalse(hasSelectionButtons,
                "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ");

        boolean hasForbiddenCallback = keyboard.stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .map(InlineKeyboardButton::getCallbackData)
                .filter(Objects::nonNull)
                .anyMatch("returns:active:list"::equals);
        assertFalse(hasForbiddenCallback,
                "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–æ–∫ —Å–æ —Å—Ç–∞—Ä—ã–º callback –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É");

        List<InlineKeyboardButton> navigationRow = keyboard.get(keyboard.size() - 1);
        InlineKeyboardButton backButton = navigationRow.stream()
                .filter(button -> BACK_BUTTON_TEXT.equals(button.getText()))
                .findFirst()
                .orElseThrow(() -> new AssertionError("–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–±—è–∑–∞–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª"));
        assertEquals(NAVIGATE_BACK_CALLBACK, backButton.getCallbackData(),
                "–ö–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ¬´–ù–∞–∑–∞–¥¬ª –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π callback");
        assertTrue(navigationRow.stream().anyMatch(button -> MENU_BUTTON_TEXT.equals(button.getText())),
                "–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–±—è–∑–∞–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é");

        boolean hasTrackAction = keyboard.stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .anyMatch(button -> "üìÆ –£–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫".equals(button.getText()));
        boolean hasCommentAction = keyboard.stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .anyMatch(button -> "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π".equals(button.getText()));
        boolean hasCancelAction = keyboard.stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .map(InlineKeyboardButton::getText)
                .filter(Objects::nonNull)
                .anyMatch(text -> text.startsWith("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç"));

        assertTrue(hasTrackAction, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞");
        assertTrue(hasCommentAction, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è");
        assertTrue(hasCancelAction, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞");

        Integer anchorMessageId = editMessage.getMessageId();
        assertNotNull(anchorMessageId,
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è");

        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, NAVIGATE_BACK_CALLBACK, anchorMessageId));

        ArgumentCaptor<EditMessageText> backCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(backCaptor.capture());

        EditMessageText backMessage = backCaptor.getValue();
        assertTrue(backMessage.getText().contains("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É"),
                "–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´–ù–∞–∑–∞–¥¬ª –±–æ—Ç –æ–±—è–∑–∞–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫");

        InlineKeyboardMarkup backMarkup = backMessage.getReplyMarkup();
        assertNotNull(backMarkup, "–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π");
        boolean hasSelectionButtonsAfterBack = backMarkup.getKeyboard().stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .anyMatch(button -> {
                    String callback = button.getCallbackData();
                    return callback != null && callback.startsWith("returns:active:select:");
                });
        assertTrue(hasSelectionButtonsAfterBack,
                "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–Ω–æ–≤–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –±–æ—Ç —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞—è–≤–∫–∏
     * –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
     */
    @Test
    void shouldResetActiveRequestSelectionAfterReturningToMenu() throws Exception {
        Long chatId = 9872L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto requestDto = new ActionRequiredReturnRequestDto(
                11L,
                22L,
                "TRK-RESET",
                "Store A",
                "–ü–æ–ª—É—á–µ–Ω–∞",
                OrderReturnRequestStatus.REGISTERED,
                OrderReturnRequestStatus.REGISTERED.getDisplayName(),
                "12.12.2024",
                "11.12.2024",
                "–ü—Ä–∏—á–∏–Ω–∞",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "REV-RESET",
                false,
                true,
                true,
                false,
                false,
                false,
                null,
                false,
                null,
                false
        );

        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenReturn(List.of(requestDto))
                .thenReturn(List.of(requestDto))
                .thenReturn(List.of(requestDto));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));
        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:11:22"));

        ChatSession sessionAfterSelection = chatSessionRepository.find(chatId)
                .orElseThrow(() -> new AssertionError("–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—è"));
        assertEquals(requestDto.requestId(), sessionAfterSelection.getActiveReturnRequestId(),
                "–í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ–±—è–∑–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Å–µ—Å—Å–∏–∏ –¥–æ –≤—ã—Ö–æ–¥–∞");

        bot.consume(mockTextUpdate(chatId, MENU_BUTTON_TEXT));

        ChatSession sessionAfterMenu = chatSessionRepository.find(chatId)
                .orElseThrow(() -> new AssertionError("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"));
        assertNull(sessionAfterMenu.getActiveReturnRequestId(),
                "–ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è");
        assertNull(sessionAfterMenu.getReturnRequestEditMode(),
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–±—è–∑–∞–Ω –æ—á–∏—â–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");

        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient, atLeastOnce()).execute(editCaptor.capture());

        assertFalse(editCaptor.getAllValues().isEmpty(),
                "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —è–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        EditMessageText lastEdit = editCaptor.getAllValues()
                .get(editCaptor.getAllValues().size() - 1);
        String text = lastEdit.getText();
        assertNotNull(text, "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º");
        assertTrue(text.contains("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É"),
                "–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç –æ–±—è–∑–∞–Ω —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –∑–∞—è–≤–∫—É");
        assertFalse(text.contains("–¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞"),
                "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞");

        InlineKeyboardMarkup markup = lastEdit.getReplyMarkup();
        assertNotNull(markup, "–≠–∫—Ä–∞–Ω —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π");
        boolean hasSelectionButtons = markup.getKeyboard().stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .anyMatch(button -> {
                    String callback = button.getCallbackData();
                    return callback != null && callback.startsWith("returns:active:select:");
                });
        assertTrue(hasSelectionButtons,
                "–ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–Ω–æ–≤–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞—è–≤–∫–∏ —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –æ–±–º–µ–Ω–æ–º –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫.
     */
    @Test
    void shouldShowExchangeHeaderAfterActiveExchangeSelected() throws Exception {
        Long chatId = 6789L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto exchangeRequest = new ActionRequiredReturnRequestDto(
                5L,
                8L,
                "EX-TRK",
                "Store",
                "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞",
                OrderReturnRequestStatus.EXCHANGE_APPROVED,
                OrderReturnRequestStatus.EXCHANGE_APPROVED.getDisplayName(),
                "11.11.2024",
                "10.11.2024",
                "–û–±–º–µ–Ω",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "REV-EX",
                true,
                false,
                true,
                false,
                false,
                false,
                null,
                false,
                null,
                false
        );

        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenReturn(List.of(exchangeRequest))
                .thenReturn(List.of(exchangeRequest));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:5:8"));

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());

        EditMessageText editMessage = editCaptor.getValue();
        assertTrue(editMessage.getText().contains("–¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω"),
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞");
    }

    @Test
    void shouldHideCancelExchangeWhenTrackAlreadyProvided() throws Exception {
        Long chatId = 6790L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        String warning = "–û—Ç–º–µ–Ω–∞ –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –º–∞–≥–∞–∑–∏–Ω —É–∂–µ —É–∫–∞–∑–∞–ª —Ç—Ä–µ–∫ –æ–±–º–µ–Ω–Ω–æ–π –ø–æ—Å—ã–ª–∫–∏.";
        ActionRequiredReturnRequestDto exchangeRequest = new ActionRequiredReturnRequestDto(
                6L,
                9L,
                "EX-TRK-2",
                "Store",
                "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞",
                OrderReturnRequestStatus.EXCHANGE_APPROVED,
                OrderReturnRequestStatus.EXCHANGE_APPROVED.getDisplayName(),
                "12.11.2024",
                "11.11.2024",
                "–û–±–º–µ–Ω",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "REV-EX",
                true,
                false,
                true,
                false,
                false,
                false,
                warning,
                false,
                null,
                false
        );

        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenReturn(List.of(exchangeRequest))
                .thenReturn(List.of(exchangeRequest));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:6:9"));

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());

        EditMessageText editMessage = editCaptor.getValue();
        String messageText = editMessage.getText();
        assertTrue(messageText.contains("‚ö†Ô∏è"), "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–º–µ–Ω—ã");
        assertTrue(messageText.contains("–û—Ç–º–µ–Ω–∞ –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"),
                "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω—ã");

        InlineKeyboardMarkup markup = editMessage.getReplyMarkup();
        assertNotNull(markup, "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è");
        boolean hasCancelButton = markup.getKeyboard().stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .map(InlineKeyboardButton::getText)
                .anyMatch("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–±–º–µ–Ω"::equals);
        assertFalse(hasCancelButton, "–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω —É–∫–∞–∑–∞–ª —Ç—Ä–µ–∫");
    }

    @Test
    void shouldShowMerchantRequestButtonsWhenExchangeShipmentDispatched() throws Exception {
        Long chatId = 6800L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto exchangeRequest = new ActionRequiredReturnRequestDto(
                7L,
                10L,
                "EX-READY",
                "Store",
                "–í –ø—É—Ç–∏",
                OrderReturnRequestStatus.EXCHANGE_APPROVED,
                OrderReturnRequestStatus.EXCHANGE_APPROVED.getDisplayName(),
                "12.11.2024",
                "11.11.2024",
                "–û–±–º–µ–Ω",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "REV-EX",
                true,
                false,
                true,
                false,
                false,
                true,
                null,
                false,
                null,
                false
        );

        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenAnswer(invocation -> List.of(exchangeRequest));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:7:10"));

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());

        InlineKeyboardMarkup markup = editCaptor.getValue().getReplyMarkup();
        assertNotNull(markup, "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è");
        List<String> buttonLabels = markup.getKeyboard().stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .map(InlineKeyboardButton::getText)
                .toList();

        assertTrue(buttonLabels.contains("üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–º–µ–Ω—É –æ–±–º–µ–Ω–∞"),
                "–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–º–µ–Ω–Ω–æ–π –ø–æ—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω—ã");
        assertTrue(buttonLabels.contains("üìù –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤–º–µ—Å—Ç–æ –æ–±–º–µ–Ω–∞"),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±–º–µ–Ω–∞ –≤ –≤–æ–∑–≤—Ä–∞—Ç");
    }

    @Test
    void shouldRequestConfirmationBeforeCancellingReturn() throws Exception {
        Long chatId = 7001L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto request = new ActionRequiredReturnRequestDto(
                100L,
                200L,
                "TRK-500",
                "Store",
                "–ü–æ–ª—É—á–µ–Ω–∞",
                OrderReturnRequestStatus.REGISTERED,
                OrderReturnRequestStatus.REGISTERED.getDisplayName(),
                "01.03.2025",
                "28.02.2025",
                "–ü—Ä–∏—á–∏–Ω–∞",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "REV-CNF",
                false,
                true,
                true,
                false,
                false,
                false,
                null,
                false,
                null,
                false
        );

        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenAnswer(invocation -> List.of(request));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:100:200"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:cancel:100:200"));

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());
        EditMessageText edit = editCaptor.getValue();
        assertNotNull(edit, "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–º–µ–Ω—ã –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ");

        String text = edit.getText() != null ? edit.getText().replace("\\", "") : "";
        assertTrue(text.contains("REV-CNF"), "–í–æ–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π —Ç—Ä–µ–∫");
        assertTrue(text.contains("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–º–µ–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞"),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã");

        InlineKeyboardMarkup markup = edit.getReplyMarkup();
        assertNotNull(markup, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π");
        List<List<InlineKeyboardButton>> keyboard = markup.getKeyboard();
        assertFalse(keyboard.isEmpty(), "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π");
        List<InlineKeyboardButton> confirmationRow = keyboard.get(0);
        assertEquals("‚úÖ –î–∞", confirmationRow.get(0).getText(),
                "–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–∑–≤–æ–ª—è—Ç—å —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è");
        assertEquals("‚Ü©Ô∏è –ù–µ—Ç", confirmationRow.get(1).getText(),
                "–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–º–µ–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ");

        assertEquals(BuyerChatState.AWAITING_ACTIVE_ACTION_CONFIRMATION, chatSessionRepository.getState(chatId),
                "–ü–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–æ—Ç –æ–±—è–∑–∞–Ω –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ");
    }

    @Test
    void shouldCreateMerchantCancellationRequestWhenExchangeAlreadyDispatched() throws Exception {
        Long chatId = 7005L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        customer.setId(200L);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto dispatchedExchange = new ActionRequiredReturnRequestDto(
                300L,
                400L,
                "TRK-EX",
                "Store",
                "–í –ø—É—Ç–∏",
                OrderReturnRequestStatus.EXCHANGE_APPROVED,
                OrderReturnRequestStatus.EXCHANGE_APPROVED.getDisplayName(),
                "02.03.2025",
                "01.03.2025",
                "–û–±–º–µ–Ω",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "REV-EX",
                true,
                false,
                true,
                false,
                false,
                true,
                null,
                false,
                null,
                false
        );

        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenAnswer(invocation -> List.of(dispatchedExchange));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:300:400"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:cancel_exchange:300:400"));
        clearInvocations(telegramClient);

        OrderReturnRequestActionRequest actionRequest = new OrderReturnRequestActionRequest();
        when(telegramService.requestExchangeCancellationFromTelegram(chatId, 400L, 300L)).thenReturn(actionRequest);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:confirm:cancel_exchange:yes:300:400"));

        verify(telegramService).requestExchangeCancellationFromTelegram(chatId, 400L, 300L);
        verify(telegramService, never()).cancelExchangeFromTelegram(anyLong(), anyLong(), anyLong());

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());
        String finalMessage = editCaptor.getValue().getText().replace("\\", "");
        assertTrue(finalMessage.contains("–ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –º–∞–≥–∞–∑–∏–Ω—É –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–±–º–µ–Ω–∞"),
                "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ");
    }

    @Test
    void shouldCancelReturnAfterConfirmation() throws Exception {
        Long chatId = 7002L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto request = new ActionRequiredReturnRequestDto(
                101L,
                201L,
                "TRK-501",
                "Store",
                "–ü–æ–ª—É—á–µ–Ω–∞",
                OrderReturnRequestStatus.REGISTERED,
                OrderReturnRequestStatus.REGISTERED.getDisplayName(),
                "02.03.2025",
                "28.02.2025",
                "–ü—Ä–∏—á–∏–Ω–∞",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "REV-CF2",
                false,
                true,
                true,
                false,
                false,
                false,
                null,
                false,
                null,
                false
        );

        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenAnswer(invocation -> List.of(request));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));
        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:101:201"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:cancel:101:201"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:confirm:cancel:yes:101:201"));

        verify(telegramService).closeReturnRequestFromTelegram(chatId, 201L, 101L);

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());
        String message = editCaptor.getValue().getText();
        assertTrue(message.contains("–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞"),
                "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–æ—Ç –æ–±—è–∑–∞–Ω —Å–æ–æ–±—â–∏—Ç—å –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ");

        assertEquals(BuyerChatState.IDLE, chatSessionRepository.getState(chatId),
                "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è");
    }

    @Test
    void shouldRestoreActionsWhenCancellationDeclined() throws Exception {
        Long chatId = 7003L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto request = new ActionRequiredReturnRequestDto(
                102L,
                202L,
                "TRK-502",
                "Store",
                "–ü–æ–ª—É—á–µ–Ω–∞",
                OrderReturnRequestStatus.REGISTERED,
                OrderReturnRequestStatus.REGISTERED.getDisplayName(),
                "03.03.2025",
                "28.02.2025",
                "–ü—Ä–∏—á–∏–Ω–∞",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                null,
                false,
                true,
                true,
                false,
                false,
                false,
                null,
                false,
                null,
                false
        );

        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenAnswer(invocation -> List.of(request));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));
        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:102:202"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:cancel:102:202"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:confirm:cancel:no:102:202"));

        verify(telegramService, never()).closeReturnRequestFromTelegram(anyLong(), anyLong(), anyLong());

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());
        String text = editCaptor.getValue().getText();
        assertTrue(text.contains("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"),
                "–ü–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ—Ç–º–µ–Ω—ã –±–æ—Ç –æ–±—è–∑–∞–Ω –≤–µ—Ä–Ω—É—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º");

        assertEquals(BuyerChatState.AWAITING_ACTIVE_REQUEST_SELECTION, chatSessionRepository.getState(chatId),
                "–û—Ç–∫–∞–∑ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π");
    }

    @Test
    void shouldHideExchangeActionsWhenReplacementDispatched() throws Exception {
        Long chatId = 7004L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto exchange = new ActionRequiredReturnRequestDto(
                103L,
                203L,
                "TRK-503",
                "Store",
                "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞",
                OrderReturnRequestStatus.EXCHANGE_APPROVED,
                OrderReturnRequestStatus.EXCHANGE_APPROVED.getDisplayName(),
                "04.03.2025",
                "01.03.2025",
                "–û–±–º–µ–Ω",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                null,
                true,
                false,
                true,
                false,
                false,
                true,
                null,
                false,
                null,
                false
        );

        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenAnswer(invocation -> List.of(exchange));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:103:203"));

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());
        InlineKeyboardMarkup markup = editCaptor.getValue().getReplyMarkup();
        assertNotNull(markup, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è");

        boolean hasCancelExchange = markup.getKeyboard().stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .map(InlineKeyboardButton::getText)
                .filter(Objects::nonNull)
                .anyMatch("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–±–º–µ–Ω"::equals);
        boolean hasConvert = markup.getKeyboard().stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .map(InlineKeyboardButton::getText)
                .filter(Objects::nonNull)
                .anyMatch("‚Ü©Ô∏è –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –≤–æ–∑–≤—Ä–∞—Ç"::equals);

        assertFalse(hasCancelExchange, "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–º–µ–Ω—ã –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è");
        assertFalse(hasConvert, "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–º–µ–Ω—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –≤–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–∂–Ω–∞ —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏.
     */
    @Test
    void shouldPromptTrackUpdateWhenActionSelected() throws Exception {
        Long chatId = 1111L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto requestDto = new ActionRequiredReturnRequestDto(
                1L,
                2L,
                "TRK",
                "Store",
                "–ü–æ–ª—É—á–µ–Ω–∞",
                OrderReturnRequestStatus.REGISTERED,
                OrderReturnRequestStatus.REGISTERED.getDisplayName(),
                "10.10",
                "09.10",
                "–ü—Ä–∏—á–∏–Ω–∞",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "REV",
                false,
                true,
                true,
                false,
                false,
                false,
                null,
                false,
                null,
                false
        );
        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenReturn(List.of(requestDto))
                .thenReturn(List.of(requestDto))
                .thenReturn(List.of(requestDto));

        bot.consume(mockCallbackUpdate(chatId, "returns:active"));
        bot.consume(mockCallbackUpdate(chatId, "returns:active:select:1:2"));
        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "returns:active:track:1:2"));

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        String prompt = captor.getValue().getText();
        assertTrue(prompt.contains("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫"), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –≤–≤–æ–¥—É —Ç—Ä–µ–∫–∞");
        assertEquals(BuyerChatState.AWAITING_TRACK_UPDATE, chatSessionRepository.getState(chatId));
        ChatSession stored = chatSessionRepository.find(chatId).orElseThrow();
        assertEquals(ReturnRequestEditMode.TRACK, stored.getReturnRequestEditMode());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π —Ç—Ä–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫.
     */
    @Test
    void shouldUpdateTrackWhenMessageReceived() throws Exception {
        Long chatId = 1212L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));
        ActionRequiredReturnRequestDto requestDto = new ActionRequiredReturnRequestDto(
                3L,
                2L,
                "P-1",
                "Store",
                "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞",
                OrderReturnRequestStatus.REGISTERED,
                OrderReturnRequestStatus.REGISTERED.getDisplayName(),
                "01.01.2025",
                "01.01.2025",
                "–ü—Ä–∏—á–∏–Ω–∞",
                null,
                null,
                false,
                true,
                true,
                false,
                false,
                false,
                null,
                false,
                null,
                false
        );
        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenReturn(List.of(requestDto))
                .thenReturn(List.of());

        ReturnRequestUpdateResponse response = new ReturnRequestUpdateResponse(
                3L,
                "REV-1",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                OrderReturnRequestStatus.REGISTERED
        );
        when(telegramService.updateReturnRequestDetailsFromTelegram(chatId, 2L, 3L, "TRACK", null))
                .thenReturn(response);

        ChatSession session = new ChatSession(chatId, BuyerChatState.AWAITING_TRACK_UPDATE, 500, BuyerBotScreen.RETURNS_ACTIVE_REQUESTS);
        session.setActiveReturnRequestContext(3L, 2L, ReturnRequestEditMode.TRACK);
        session.updateNavigationForScreen(BuyerBotScreen.RETURNS_ACTIVE_REQUESTS, false);
        chatSessionRepository.save(session);

        clearInvocations(telegramClient);
        bot.consume(mockTextUpdate(chatId, "TRACK"));

        verify(telegramService).updateReturnRequestDetailsFromTelegram(chatId, 2L, 3L, "TRACK", null);
        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());
        verify(telegramClient, never()).execute(isA(SendMessage.class));

        EditMessageText editMessage = editCaptor.getValue();
        assertTrue(editMessage.getText().contains("–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω"),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞");

        InlineKeyboardMarkup markup = editMessage.getReplyMarkup();
        assertNotNull(markup, "–î–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞");
        List<List<InlineKeyboardButton>> keyboard = markup.getKeyboard();
        assertEquals(1, keyboard.size(), "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω—É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É");
        List<InlineKeyboardButton> navRow = keyboard.get(0);
        InlineKeyboardButton backButton = navRow.stream()
                .filter(button -> BACK_BUTTON_TEXT.equals(button.getText()))
                .findFirst()
                .orElseThrow(() -> new AssertionError("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±—è–∑–∞–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª"));
        assertEquals(NAVIGATE_BACK_CALLBACK, backButton.getCallbackData(),
                "–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π callback –Ω–∞–≤–∏–≥–∞—Ü–∏–∏");
        boolean legacyCallbackPresent = navRow.stream()
                .map(InlineKeyboardButton::getCallbackData)
                .filter(Objects::nonNull)
                .anyMatch("returns:active:list"::equals);
        assertFalse(legacyCallbackPresent, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É");

        assertEquals(BuyerChatState.IDLE, chatSessionRepository.getState(chatId));
        ChatSession stored = chatSessionRepository.find(chatId).orElseThrow();
        assertNull(stored.getActiveReturnRequestId(), "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å—Å—è");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫.
     */
    @Test
    void shouldShowReturnButtonWhenTrackUpdateDenied() throws Exception {
        Long chatId = 1313L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ActionRequiredReturnRequestDto requestDto = new ActionRequiredReturnRequestDto(
                7L,
                9L,
                "TRACK-ERR",
                "Store",
                "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞",
                OrderReturnRequestStatus.REGISTERED,
                OrderReturnRequestStatus.REGISTERED.getDisplayName(),
                "02.02.2025",
                "01.02.2025",
                "–ü—Ä–∏—á–∏–Ω–∞",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "REV-ERR",
                false,
                true,
                true,
                false,
                false,
                false,
                null
        );
        when(telegramService.getReturnRequestsRequiringAction(chatId))
                .thenReturn(List.of(requestDto));
        when(telegramService.updateReturnRequestDetailsFromTelegram(chatId, 9L, 7L, "TRACK", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"))
                .thenThrow(new AccessDeniedException("denied"));

        ChatSession session = new ChatSession(chatId, BuyerChatState.AWAITING_TRACK_UPDATE, 600, BuyerBotScreen.RETURNS_ACTIVE_REQUESTS);
        session.setActiveReturnRequestContext(7L, 9L, ReturnRequestEditMode.TRACK);
        session.updateNavigationForScreen(BuyerBotScreen.RETURNS_ACTIVE_REQUESTS, false);
        chatSessionRepository.save(session);

        clearInvocations(telegramClient);
        bot.consume(mockTextUpdate(chatId, "TRACK"));

        verify(telegramService).updateReturnRequestDetailsFromTelegram(chatId, 9L, 7L, "TRACK", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π");

        ArgumentCaptor<EditMessageText> editCaptor = ArgumentCaptor.forClass(EditMessageText.class);
        verify(telegramClient).execute(editCaptor.capture());
        verify(telegramClient, never()).execute(isA(SendMessage.class));

        EditMessageText editMessage = editCaptor.getValue();
        assertTrue(editMessage.getText().contains("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å—ã–ª–∫–∏"),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");

        InlineKeyboardMarkup markup = editMessage.getReplyMarkup();
        assertNotNull(markup, "–î–ª—è –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞");
        List<InlineKeyboardButton> navRow = markup.getKeyboard().get(0);
        InlineKeyboardButton backButton = navRow.stream()
                .filter(button -> BACK_BUTTON_TEXT.equals(button.getText()))
                .findFirst()
                .orElseThrow(() -> new AssertionError("–ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª"));
        assertEquals(NAVIGATE_BACK_CALLBACK, backButton.getCallbackData(),
                "–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ–±—è–∑–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π callback");
        boolean containsLegacyCallback = navRow.stream()
                .map(InlineKeyboardButton::getCallbackData)
                .filter(Objects::nonNull)
                .anyMatch("returns:active:list"::equals);
        assertFalse(containsLegacyCallback, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É");

        assertEquals(BuyerChatState.IDLE, chatSessionRepository.getState(chatId));
        ChatSession stored = chatSessionRepository.find(chatId).orElseThrow();
        assertNull(stored.getActiveReturnRequestId(), "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏");
    }

    /**
     * –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ –∏ –ø—Ä–∏ —ç—Ç–æ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –ª–∏—à–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π.
     */
    @Test
    void shouldIndicateActiveRequestForDeliveredParcel() throws Exception {
        Long chatId = 905L;
        TelegramParcelInfoDTO delivered = new TelegramParcelInfoDTO(77L, "TRACK-77", "Store Eta", GlobalStatus.DELIVERED, true);
        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(List.of(delivered), List.of(), List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        Update callbackUpdate = mockCallbackUpdate(chatId, "parcels:delivered");

        bot.consume(callbackUpdate);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        SendMessage message = captor.getValue();
        String text = message.getText();
        assertTrue(text.contains("TRACK\\-77 ‚Äî –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"),
                "–í —Ç–µ–∫—Å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏");

        InlineKeyboardMarkup markup = (InlineKeyboardMarkup) message.getReplyMarkup();
        List<List<InlineKeyboardButton>> keyboard = markup.getKeyboard();
        assertEquals(1, keyboard.size(), "–î–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è");
        InlineKeyboardButton backButton = keyboard.get(0).get(0);
        assertEquals(BACK_BUTTON_TEXT, backButton.getText(), "–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞");
    }

    /**
     * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ—Ä—è–¥–∫–æ–º –≤—ã–≤–æ–¥–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º.
     */
    @Test
    void shouldAlignReturnMenuKeyboardWithGroupedText() throws Exception {
        Long chatId = 908L;
        TelegramParcelInfoDTO firstAlpha = new TelegramParcelInfoDTO(101L, "TRACK-101", "Store Alpha", GlobalStatus.DELIVERED, false);
        TelegramParcelInfoDTO beta = new TelegramParcelInfoDTO(202L, "TRACK-202", "Store Beta", GlobalStatus.DELIVERED, false);
        TelegramParcelInfoDTO secondAlpha = new TelegramParcelInfoDTO(303L, "TRACK-303", "Store Alpha", GlobalStatus.DELIVERED, false);
        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(List.of(firstAlpha, beta, secondAlpha), List.of(), List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        Update callbackUpdate = mockCallbackUpdate(chatId, "returns:create");

        bot.consume(callbackUpdate);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        SendMessage message = captor.getValue();
        String text = message.getText();

        assertNotNull(text, "–¢–µ–∫—Å—Ç –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
        assertTrue(text.contains("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"), "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å");

        InlineKeyboardMarkup markup = (InlineKeyboardMarkup) message.getReplyMarkup();
        assertNotNull(markup, "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞");
        List<List<InlineKeyboardButton>> keyboard = markup.getKeyboard();
        assertTrue(keyboard.size() >= 4, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å—ã–ª–∫–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é");

        List<Long> expectedOrder = List.of(101L, 303L, 202L);
        for (int i = 0; i < expectedOrder.size(); i++) {
            List<InlineKeyboardButton> row = keyboard.get(i);
            assertEquals(2, row.size(), "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏");
            assertEquals("parcel:return:" + expectedOrder.get(i), row.get(0).getCallbackData());
            assertEquals("parcel:exchange:" + expectedOrder.get(i), row.get(1).getCallbackData());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ callback –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
     */
    @Test
    void shouldHandleReturnCallbackAndSendConfirmation() throws Exception {
        Long chatId = 906L;
        TelegramParcelInfoDTO delivered = new TelegramParcelInfoDTO(88L, "TRACK-88", "Store Theta", GlobalStatus.DELIVERED, false);
        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(List.of(delivered), List.of(), List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        Update callbackUpdate = mockCallbackUpdate(chatId, "parcel:return:88");

        bot.consume(callbackUpdate);

        verify(telegramClient, atLeastOnce()).execute(any(AnswerCallbackQuery.class));
        verify(telegramClient, atLeastOnce()).execute(argThat(method -> {
            String text = null;
            if (method instanceof SendMessage sendMessage) {
                text = sendMessage.getText();
            } else if (method instanceof EditMessageText editMessage) {
                text = editMessage.getText();
            }
            return text != null && text.contains("TRACK\\-88") && text.contains("–ø—Ä–∏—á–∏–Ω");
        }));
        verify(telegramClient, atLeastOnce()).execute(argThat(method -> {
            if (!(method instanceof EditMessageReplyMarkup editMarkup)) {
                return false;
            }
            return Objects.equals(chatId.toString(), editMarkup.getChatId())
                    && Objects.equals(1, editMarkup.getMessageId())
                    && editMarkup.getReplyMarkup() == null;
        }));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
     */
    @Test
    void shouldCollectReturnFlowStepByStep() throws Exception {
        Long chatId = 1006L;
        TelegramParcelInfoDTO delivered = new TelegramParcelInfoDTO(77L, "TRACK-77", "Store Sigma", GlobalStatus.DELIVERED, false);
        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(List.of(delivered), List.of(), List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        bot.consume(mockCallbackUpdate(chatId, "parcel:return:77"));

        assertEquals(BuyerChatState.AWAITING_RETURN_REASON, chatSessionRepository.getState(chatId),
                "–ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ–∂–∏–¥–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞");
        ChatSession session = chatSessionRepository.find(chatId).orElseThrow();
        assertEquals(77L, session.getReturnParcelId(), "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—ã–ª–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Å–µ—Å—Å–∏–∏");
        assertEquals("TRACK-77", session.getReturnParcelTrackNumber(), "–¢—Ä–µ–∫ –ø–æ—Å—ã–ª–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è");
        assertEquals(BuyerBotScreen.RETURNS_RETURN_REASON, session.getLastScreen(),
                "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω —ç–∫—Ä–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã");
        Integer returnReasonAnchorId = session.getAnchorMessageId();
        assertNotNull(returnReasonAnchorId, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –¥–æ–ª–∂–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Ç–µ–∫—É—â–∏–º —è–∫–æ—Ä–µ–º");
        verify(telegramClient, atLeastOnce()).execute(argThat(method -> {
            String text = null;
            if (method instanceof SendMessage sendMessage) {
                text = sendMessage.getText();
            } else if (method instanceof EditMessageText editMessage) {
                text = editMessage.getText();
            }
            return text != null && text.contains("TRACK\\-77") && text.contains("–ø—Ä–∏—á–∏–Ω");
        }));
        verify(telegramClient, atLeastOnce()).execute(argThat(method -> {
            if (!(method instanceof EditMessageReplyMarkup editMarkup)) {
                return false;
            }
            return Objects.equals(chatId.toString(), editMarkup.getChatId())
                    && Objects.equals(1, editMarkup.getMessageId())
                    && editMarkup.getReplyMarkup() == null;
        }));

        when(telegramService.registerReturnRequestFromTelegram(anyLong(), anyLong(), anyString(), anyString()))
                .thenReturn(new OrderReturnRequest());

        bot.consume(mockCallbackUpdate(chatId, "returns:create:reason:not_fit", returnReasonAnchorId));

        assertEquals(BuyerChatState.IDLE, chatSessionRepository.getState(chatId),
                "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π");
        session = chatSessionRepository.find(chatId).orElseThrow();
        assertEquals(77L, session.getReturnParcelId(),
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
        assertEquals("TRACK-77", session.getReturnParcelTrackNumber(),
                "–¢—Ä–µ–∫ –ø–æ—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏");
        verify(telegramService).registerReturnRequestFromTelegram(eq(chatId), eq(77L), anyString(), eq("–ù–µ –ø–æ–¥–æ—à–ª–æ"));

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        SendMessage summary = captor.getValue();
        String text = summary.getText();
        assertTrue(text.contains("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç"),
                "–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–∞");
        assertTrue(text.contains("–ù–µ –ø–æ–¥–æ—à–ª–æ"),
                "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞");
        assertTrue(text.contains("üìÇ –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏"),
                "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–∑–¥–µ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞");
        assertTrue(summary.getReplyMarkup() instanceof InlineKeyboardMarkup,
                "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É");
        InlineKeyboardMarkup markup = (InlineKeyboardMarkup) summary.getReplyMarkup();
        List<List<InlineKeyboardButton>> rows = markup.getKeyboard();
        boolean hasDoneButton = rows.stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .anyMatch(button -> "–•–æ—Ä–æ—à–æ".equals(button.getText())
                        && "returns:done".equals(button.getCallbackData()));
        assertTrue(hasDoneButton, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é");
        boolean hasActiveButton = rows.stream()
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .anyMatch(button -> "üìÇ –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏".equals(button.getText())
                        && "returns:active".equals(button.getCallbackData()));
        assertTrue(hasActiveButton, "–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞—è–≤–∫–∞–º");

        Integer completionAnchorMessageId = session.getAnchorMessageId();
        assertNotNull(completionAnchorMessageId, "–Ø–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è");
        Update doneCallback = mock(Update.class);
        CallbackQuery callbackQuery = mock(CallbackQuery.class);
        Message callbackMessage = mock(Message.class);
        when(doneCallback.hasCallbackQuery()).thenReturn(true);
        when(doneCallback.getCallbackQuery()).thenReturn(callbackQuery);
        when(callbackQuery.getId()).thenReturn("cb-" + chatId + "-done");
        when(callbackQuery.getData()).thenReturn("returns:done");
        when(callbackQuery.getMessage()).thenReturn(callbackMessage);
        when(callbackMessage.getChatId()).thenReturn(chatId);
        when(callbackMessage.getMessageId()).thenReturn(completionAnchorMessageId);

        bot.consume(doneCallback);

        ChatSession clearedSession = chatSessionRepository.find(chatId).orElseThrow();
        assertNull(clearedSession.getReturnParcelId(),
                "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—á–∏—â–∞—Ç—å—Å—è");
        assertEquals(BuyerBotScreen.MENU, clearedSession.getLastScreen(),
                "–ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —ç–∫—Ä–∞–Ω –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞.
     */
    @Test
    void shouldRestoreReturnReasonPromptAfterOutdatedCallback() throws Exception {
        Long chatId = 1116L;
        TelegramParcelInfoDTO delivered = new TelegramParcelInfoDTO(55L, "TRACK-55", "Store Rho", GlobalStatus.DELIVERED, false);
        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(List.of(delivered), List.of(), List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        bot.consume(mockCallbackUpdate(chatId, "parcel:return:55"));

        ChatSession session = chatSessionRepository.find(chatId).orElseThrow();
        Integer originalAnchor = session.getAnchorMessageId();
        assertNotNull(originalAnchor, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∫–∞–∫ —è–∫–æ—Ä—å");
        assertEquals(BuyerBotScreen.RETURNS_RETURN_REASON, session.getLastScreen(),
                "–ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å—Å—è —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã");

        chatSessionRepository.updateAnchor(chatId, originalAnchor + 50);

        clearInvocations(telegramClient);

        doAnswer(invocation -> {
            EditMessageText editMessage = invocation.getArgument(0);
            if (Objects.equals(editMessage.getMessageId(), originalAnchor + 50)) {
                throw new TelegramApiException("Bad Request: message to edit not found");
            }
            return null;
        }).when(telegramClient).execute(any(EditMessageText.class));

        bot.consume(mockCallbackUpdate(chatId, "returns:create:reason:defect", originalAnchor));

        verify(telegramClient, atLeastOnce()).execute(argThat(method -> {
            if (!(method instanceof EditMessageReplyMarkup editMarkup)) {
                return false;
            }
            return Objects.equals(chatId.toString(), editMarkup.getChatId())
                    && Objects.equals(originalAnchor, editMarkup.getMessageId())
                    && editMarkup.getReplyMarkup() == null;
        }));
        verify(telegramClient, atLeastOnce()).execute(argThat(method -> {
            if (!(method instanceof EditMessageReplyMarkup editMarkup)) {
                return false;
            }
            return Objects.equals(chatId.toString(), editMarkup.getChatId())
                    && Objects.equals(originalAnchor + 50, editMarkup.getMessageId())
                    && editMarkup.getReplyMarkup() == null;
        }));
        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        SendMessage resentPrompt = captor.getValue();
        assertEquals(chatId.toString(), resentPrompt.getChatId(),
                "–°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç");
        assertTrue(resentPrompt.getText().contains("TRACK\\-55"),
                "–í –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç—Ä–µ–∫ –ø–æ—Å—ã–ª–∫–∏");
        assertTrue(resentPrompt.getReplyMarkup() instanceof InlineKeyboardMarkup,
                "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏");

        ChatSession refreshedSession = chatSessionRepository.find(chatId).orElseThrow();
        Integer refreshedAnchor = refreshedSession.getAnchorMessageId();
        assertNotNull(refreshedAnchor, "–ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –Ω–æ–≤—ã–π —è–∫–æ—Ä—å");
        assertNotEquals(originalAnchor, refreshedAnchor,
                "–ù–æ–≤—ã–π —è–∫–æ—Ä—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º");
        assertNotEquals(originalAnchor + 50, refreshedAnchor,
                "–•—Ä–∞–Ω–∏–≤—à–∏–π—Å—è —Ä–∞–Ω–µ–µ —è–∫–æ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π");
        assertEquals(BuyerBotScreen.RETURNS_RETURN_REASON, refreshedSession.getLastScreen(),
                "–°–µ–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —à–∞–≥–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –æ–Ω–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏.
     */
    @Test
    void shouldNavigateFromReturnReasonPrompt() throws Exception {
        Long chatId = 2116L;
        TelegramParcelInfoDTO delivered = new TelegramParcelInfoDTO(77L, "TRACK-77", "Store Sigma", GlobalStatus.DELIVERED, false);
        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(List.of(delivered), List.of(), List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        bot.consume(mockCallbackUpdate(chatId, "parcel:return:77"));

        ArgumentCaptor<SendMessage> promptCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(promptCaptor.capture());
        SendMessage reasonPrompt = promptCaptor.getAllValues().stream()
                .filter(message -> {
                    String text = message.getText();
                    return text != null && text.contains("–ø—Ä–∏—á–∏–Ω—É –Ω–∏–∂–µ");
                })
                .findFirst()
                .orElseThrow(() -> new AssertionError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏—á–∏–Ω—ã"));

        assertTrue(reasonPrompt.getReplyMarkup() instanceof InlineKeyboardMarkup,
                "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏—á–∏–Ω—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É");
        InlineKeyboardMarkup reasonMarkup = (InlineKeyboardMarkup) reasonPrompt.getReplyMarkup();
        List<List<InlineKeyboardButton>> reasonRows = reasonMarkup.getKeyboard();
        assertEquals(3, reasonRows.size(),
                "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏—á–∏–Ω –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é");
        List<InlineKeyboardButton> navigationRow = reasonRows.get(2);
        assertEquals(2, navigationRow.size(),
                "–í –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –∏ ¬´–ú–µ–Ω—é¬ª");
        InlineKeyboardButton backButton = navigationRow.get(0);
        InlineKeyboardButton menuButton = navigationRow.get(1);
        assertEquals(BACK_BUTTON_TEXT, backButton.getText(),
                "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—É");
        assertEquals(MENU_BUTTON_TEXT, menuButton.getText(),
                "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —à–∞–±–ª–æ–Ω–æ–º");
        assertEquals("nav:back", backButton.getCallbackData(),
                "Callback –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥");
        assertEquals("menu:back", menuButton.getCallbackData(),
                "Callback –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        ChatSession session = chatSessionRepository.find(chatId).orElseThrow();
        Integer reasonAnchorId = session.getAnchorMessageId();
        assertNotNull(reasonAnchorId, "–°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –¥–æ–ª–∂–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —è–∫–æ—Ä–Ω—ã–º");

        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "nav:back", reasonAnchorId));

        verify(telegramClient, atLeastOnce()).execute(argThat(method -> {
            if (!(method instanceof EditMessageText editMessage)) {
                return false;
            }
            String text = editMessage.getText();
            return text != null && text.contains("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—ã–ª–∫—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞");
        }));

        ChatSession afterBackSession = chatSessionRepository.find(chatId).orElseThrow();
        assertEquals(BuyerBotScreen.RETURNS_CREATE_REQUEST, afterBackSession.getLastScreen(),
                "–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´–ù–∞–∑–∞–¥¬ª –±–æ—Ç –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –ø–æ—Å—ã–ª–∫–∏");

        Integer parcelAnchorId = afterBackSession.getAnchorMessageId();
        assertNotNull(parcelAnchorId, "–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —è–∫–æ—Ä—å");

        bot.consume(mockCallbackUpdate(chatId, "returns:create:parcel:77", parcelAnchorId));

        ChatSession reasonAgainSession = chatSessionRepository.find(chatId).orElseThrow();
        Integer reasonAnchorAgain = reasonAgainSession.getAnchorMessageId();
        assertNotNull(reasonAnchorAgain, "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω—ã –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —è–∫–æ—Ä—å");
        assertEquals(BuyerBotScreen.RETURNS_RETURN_REASON, reasonAgainSession.getLastScreen(),
                "–ü–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –≤–∏–¥–∏—Ç —ç–∫—Ä–∞–Ω –ø—Ä–∏—á–∏–Ω—ã");

        clearInvocations(telegramClient);

        bot.consume(mockCallbackUpdate(chatId, "menu:back", reasonAnchorAgain));

        verify(telegramClient, atLeastOnce()).execute(argThat(method -> {
            if (!(method instanceof EditMessageText editMessage)) {
                return false;
            }
            String text = editMessage.getText();
            return text != null && text.contains("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        }));

        ChatSession afterMenuSession = chatSessionRepository.find(chatId).orElseThrow();
        assertEquals(BuyerBotScreen.MENU, afterMenuSession.getLastScreen(),
                "–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω");
        assertEquals(BuyerChatState.IDLE, chatSessionRepository.getState(chatId),
                "–ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ callback –æ–±–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã —Å –Ω—É–∂–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
     */
    @Test
    void shouldHandleExchangeCallbackAndShowReasonKeyboard() throws Exception {
        Long chatId = 907L;
        TelegramParcelInfoDTO delivered = new TelegramParcelInfoDTO(99L, "TRACK-99", "Store Iota", GlobalStatus.DELIVERED, false);
        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(List.of(delivered), List.of(), List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        Update callbackUpdate = mockCallbackUpdate(chatId, "parcel:exchange:99");

        bot.consume(callbackUpdate);

        verify(telegramClient, atLeastOnce()).execute(any(AnswerCallbackQuery.class));

        ChatSession session = chatSessionRepository.find(chatId).orElseThrow();
        assertEquals(BuyerChatState.AWAITING_EXCHANGE_REASON, chatSessionRepository.getState(chatId),
                "–ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –æ–±–º–µ–Ω–∞ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ–∂–∏–¥–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã");
        assertEquals(99L, session.getReturnParcelId(), "–í —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—ã–ª–∫–∏");
        assertEquals("TRACK-99", session.getReturnParcelTrackNumber(), "–í —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Ç—Ä–µ–∫ –ø–æ—Å—ã–ª–∫–∏");
        assertEquals(BuyerBotScreen.RETURNS_EXCHANGE_REASON, session.getLastScreen(),
                "–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Ä–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ–±–º–µ–Ω–∞");
        assertNotNull(session.getAnchorMessageId(), "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —è–∫–æ—Ä–µ–º");

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        SendMessage prompt = captor.getValue();
        assertNotNull(prompt.getText(), "–¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ–±–º–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
        assertTrue(prompt.getText().contains("üì© –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞"),
                "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–∞—á–∞–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞");
        assertTrue(prompt.getText().contains("TRACK\\-99"),
                "–í –ø–æ–¥—Å–∫–∞–∑–∫–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç—Ä–µ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Å—ã–ª–∫–∏");
        assertTrue(prompt.getReplyMarkup() instanceof InlineKeyboardMarkup,
                "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏");
        InlineKeyboardMarkup markup = (InlineKeyboardMarkup) prompt.getReplyMarkup();
        List<List<InlineKeyboardButton>> rows = markup.getKeyboard();
        assertFalse(rows.isEmpty(), "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π");
        boolean hasReasonButtons = rows.stream()
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .map(InlineKeyboardButton::getText)
                .filter(Objects::nonNull)
                .anyMatch(text -> text.contains("–ù–µ –ø–æ–¥–æ—à–ª–æ") || text.contains("–ë—Ä–∞–∫"));
        assertTrue(hasReasonButtons, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—è–∑–∞–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏—á–∏–Ω –æ–±–º–µ–Ω–∞");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã –æ–±–º–µ–Ω–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –∏ –ø–æ–∫–∞–∑—É –∏—Ç–æ–≥–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.
     */
    @Test
    void shouldFinalizeExchangeAfterReasonSelection() throws Exception {
        Long chatId = 908L;
        TelegramParcelInfoDTO delivered = new TelegramParcelInfoDTO(77L, "TRACK-77", "Store Sigma", GlobalStatus.DELIVERED, false);
        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(List.of(delivered), List.of(), List.of());
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        bot.consume(mockCallbackUpdate(chatId, "parcel:exchange:77"));

        ChatSession session = chatSessionRepository.find(chatId).orElseThrow();
        Integer anchorId = session.getAnchorMessageId();
        assertNotNull(anchorId, "–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —è–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");

        OrderReturnRequest registered = mock(OrderReturnRequest.class);
        when(registered.getId()).thenReturn(555L);
        when(telegramService.registerReturnRequestFromTelegram(eq(chatId), eq(77L), anyString(), anyString()))
                .thenReturn(registered);
        when(telegramService.approveExchangeFromTelegram(chatId, 77L, 555L))
                .thenReturn(registered);

        Update reasonCallback = mockCallbackUpdate(chatId, "returns:create:reason:defect", anchorId);
        bot.consume(reasonCallback);

        ArgumentCaptor<String> reasonCaptor = ArgumentCaptor.forClass(String.class);
        verify(telegramService).registerReturnRequestFromTelegram(eq(chatId), eq(77L), anyString(), reasonCaptor.capture());
        assertEquals("–ë—Ä–∞–∫", reasonCaptor.getValue(),
                "–í —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏—á–∏–Ω–∞ –æ–±–º–µ–Ω–∞");

        verify(telegramService).approveExchangeFromTelegram(chatId, 77L, 555L);

        ArgumentCaptor<SendMessage> messageCaptor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(messageCaptor.capture());
        SendMessage summary = messageCaptor.getValue();
        assertNotNull(summary.getText(), "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        assertTrue(summary.getText().contains("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω"),
                "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±–º–µ–Ω–∞");
        assertTrue(summary.getText().contains("–ë—Ä–∞–∫"),
                "–í –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞");
        assertTrue(summary.getReplyMarkup() instanceof InlineKeyboardMarkup,
                "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π");
        InlineKeyboardMarkup summaryMarkup = (InlineKeyboardMarkup) summary.getReplyMarkup();
        boolean hasOkButton = summaryMarkup.getKeyboard().stream()
                .flatMap(List::stream)
                .filter(Objects::nonNull)
                .anyMatch(button -> "–û–∫".equals(button.getText())
                        && "returns:done".equals(button.getCallbackData()));
        assertTrue(hasOkButton, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–û–∫¬ª");

        ChatSession updatedSession = chatSessionRepository.find(chatId).orElseThrow();
        assertEquals(BuyerBotScreen.RETURNS_EXCHANGE_COMPLETION, updatedSession.getLastScreen(),
                "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");
        assertEquals(BuyerChatState.IDLE, chatSessionRepository.getState(chatId),
                "–°—Ü–µ–Ω–∞—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ –æ–∂–∏–¥–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥");
        assertEquals("–ë—Ä–∞–∫", updatedSession.getReturnReason(),
                "–ü—Ä–∏—á–∏–Ω–∞ –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
        assertNotNull(updatedSession.getAnchorMessageId(),
                "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ–∫—É—â–∏–º —è–∫–æ—Ä–µ–º");

        verify(telegramClient, atLeastOnce()).execute(any(AnswerCallbackQuery.class));
    }

        TelegramParcelsOverviewDTO overview = new TelegramParcelsOverviewDTO(
                List.of(),
                List.of(critical, regular),
                List.of()
        );
        when(telegramService.getParcelsOverview(chatId)).thenReturn(Optional.of(overview));

        Update callbackUpdate = mockCallbackUpdate(chatId, "parcels:awaiting");

        bot.consume(callbackUpdate);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        String text = captor.getValue().getText();

        assertTrue(text.contains("TRACK\\-ALERT ‚Äî ‚ö†Ô∏è —Å–∫–æ—Ä–æ —É–µ–¥–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω"),
                "–ü–æ—Å—ã–ª–∫–∞ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –¥–æ–ª–∂–Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º");
        assertTrue(text.contains("‚Ä¢ TRACK\\-OK"),
                "–û–±—ã—á–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–µ—Å–µ–π");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–Ω–Ω–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–Ω–æ–≤—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     */
    @Test
    void shouldRenderAnnouncementAgainAfterReset() throws Exception {
        Long chatId = 781L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        customer.setTelegramConfirmed(true);
        customer.setNotificationsEnabled(true);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        AdminNotification notification = new AdminNotification();
        notification.setId(46L);
        notification.setTitle("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –±–∞–Ω–Ω–µ—Ä");
        notification.setBodyLines(List.of("–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"));
        ZonedDateTime initialUpdatedAt = ZonedDateTime.now().minusMinutes(30);
        notification.setUpdatedAt(initialUpdatedAt);
        when(adminNotificationService.findActiveNotification()).thenReturn(Optional.of(notification));

        bot.consume(mockTextUpdate(chatId, "/start"));
        assertTrue(wasAnnouncementRendered(notification.getTitle()),
                "–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –±–∞–Ω–Ω–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è");

        clearInvocations(telegramClient);
        chatSessionRepository.markAnnouncementSeen(chatId);

        bot.consume(mockTextUpdate(chatId, "/start"));
        assertFalse(wasAnnouncementRendered(notification.getTitle()),
                "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –±–µ–∑ —Å–±—Ä–æ—Å–∞");

        clearInvocations(telegramClient);
        ChatSession session = chatSessionRepository.find(chatId)
                .orElseThrow(() -> new AssertionError("–°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞"));
        ZonedDateTime resetTimestamp = initialUpdatedAt.plusMinutes(10);
        session.setAnnouncementSeen(false);
        session.setAnnouncementUpdatedAt(resetTimestamp);
        chatSessionRepository.save(session);
        notification.setUpdatedAt(resetTimestamp);

        bot.consume(mockTextUpdate(chatId, "/start"));
        assertTrue(wasAnnouncementRendered(notification.getTitle()),
                "–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –±–∞–Ω–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω –∑–∞–Ω–æ–≤–æ");

        ChatSession refreshed = chatSessionRepository.find(chatId)
                .orElseThrow(() -> new AssertionError("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è"));
        assertEquals(resetTimestamp, refreshed.getAnnouncementUpdatedAt(),
                "–ü–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –æ—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
        assertFalse(refreshed.isAnnouncementSeen(),
                "–î–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º");
    }

    /**
     * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–∞–Ω–Ω–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ –ø—Ä–∏–≤—è–∑–∫–∏.
     */
    @Test
    void shouldNotShowAnnouncementForNewUser() throws Exception {
        Long chatId = 888L;

        AdminNotification notification = new AdminNotification();
        notification.setId(55L);
        notification.setTitle("–û–±—ä—è–≤–ª–µ–Ω–∏–µ");
        notification.setBodyLines(List.of("–í–∞–∂–Ω–æ"));
        notification.setUpdatedAt(ZonedDateTime.now());
        when(adminNotificationService.findActiveNotification()).thenReturn(Optional.of(notification));
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.empty());

        bot.consume(mockTextUpdate(chatId, "/start"));

        verify(telegramClient, never()).execute(any(EditMessageText.class));

        verify(telegramService).findByChatId(chatId);
        verifyNoMoreInteractions(telegramService);
    }

    /**
     * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ.
     */
    @Test
    void shouldSkipCurrentAnnouncementAfterContactButRenderNextActivation() throws Exception {
        Long chatId = 889L;

        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        customer.setTelegramConfirmed(false);
        customer.setNotificationsEnabled(true);
        customer.setFullName("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤");
        customer.setNameSource(NameSource.USER_CONFIRMED);

        when(telegramService.linkTelegramToCustomer(anyString(), eq(chatId))).thenAnswer(invocation -> {
            customer.setTelegramChatId(chatId);
            return customer;
        });
        when(telegramService.confirmTelegram(customer)).thenAnswer(invocation -> {
            customer.setTelegramConfirmed(true);
            return customer;
        });
        doNothing().when(telegramService).notifyActualStatuses(customer);
        when(telegramService.findByChatId(chatId)).thenReturn(
                Optional.empty(),
                Optional.of(customer),
                Optional.of(customer),
                Optional.of(customer));

        AdminNotification initialNotification = new AdminNotification();
        initialNotification.setId(66L);
        initialNotification.setTitle("–¢–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ");
        initialNotification.setBodyLines(List.of("–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"));
        ZonedDateTime initialUpdatedAt = ZonedDateTime.now().minusMinutes(30);
        initialNotification.setUpdatedAt(initialUpdatedAt);

        AdminNotification nextNotification = new AdminNotification();
        nextNotification.setId(67L);
        nextNotification.setTitle("–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ");
        nextNotification.setBodyLines(List.of("–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"));
        ZonedDateTime nextUpdatedAt = initialUpdatedAt.plusMinutes(10);
        nextNotification.setUpdatedAt(nextUpdatedAt);

        AtomicReference<AdminNotification> activeNotification = new AtomicReference<>(initialNotification);
        when(adminNotificationService.findActiveNotification())
                .thenAnswer(invocation -> Optional.ofNullable(activeNotification.get()));

        Update contactUpdate = mockContactUpdate(chatId, chatId, chatId, "+375291234567");
        bot.consume(contactUpdate);

        ChatSession sessionAfterContact = chatSessionRepository.find(chatId)
                .orElseThrow(() -> new AssertionError("–ü–æ—Å–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Å–µ—Å—Å–∏—è"));
        assertEquals(initialNotification.getId(), sessionAfterContact.getCurrentNotificationId(),
                "–ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏");
        assertTrue(sessionAfterContact.isAnnouncementSeen(),
                "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å—á–∏—Ç–∞—Ç—å—Å—è –æ–∑–Ω–∞–∫–æ–º–∏–≤—à–∏–º—Å—è —Å —Ç–µ–∫—É—â–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º");
        assertEquals(initialUpdatedAt, sessionAfterContact.getAnnouncementUpdatedAt(),
                "–í —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤—Ä–µ–º—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è");
        assertNull(sessionAfterContact.getAnnouncementAnchorMessageId(),
                "–ë–∞–Ω–Ω–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ —Å–º–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è");

        clearInvocations(telegramClient);

        activeNotification.set(nextNotification);

        bot.consume(mockTextUpdate(chatId, "/start"));

        boolean nextAnnouncementShown = mockingDetails(telegramClient).getInvocations().stream()
                .filter(invocation -> "execute".equals(invocation.getMethod().getName()))
                .map(invocation -> invocation.getArgument(0))
                .flatMap(request -> {
                    if (request instanceof SendMessage sendMessage) {
                        return Stream.ofNullable(sendMessage.getText());
                    }
                    if (request instanceof EditMessageText editMessageText) {
                        return Stream.ofNullable(editMessageText.getText());
                    }
                    return Stream.empty();
                })
                .filter(Objects::nonNull)
                .anyMatch(text -> text.contains(nextNotification.getTitle()));

        assertTrue(nextAnnouncementShown,
                "–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å –±–∞–Ω–Ω–µ—Ä");

        ChatSession sessionAfterReset = chatSessionRepository.find(chatId)
                .orElseThrow(() -> new AssertionError("–ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—è"));
        assertEquals(nextNotification.getId(), sessionAfterReset.getCurrentNotificationId(),
                "–°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ");
        assertFalse(sessionAfterReset.isAnnouncementSeen(),
                "–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");
        assertEquals(nextUpdatedAt, sessionAfterReset.getAnnouncementUpdatedAt(),
                "–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Å–µ—Å—Å–∏–∏");
        assertNotNull(sessionAfterReset.getAnnouncementAnchorMessageId(),
                "–ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞");
    }

    /**
     * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–∏ –ª—é–±–æ–π —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –±–æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
     */
    @Test
    void shouldRepeatContactRequestForSlashCommandWhileAwaitingContact() throws Exception {
        Long chatId = 322L;
        markAwaitingContact(chatId);

        Update update = mockTextUpdate(chatId, "/stats");

        bot.consume(update);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        SendMessage message = captor.getValue();

        assertEquals(chatId.toString(), message.getChatId());
        assertPhoneKeyboard(message.getReplyMarkup());
        assertTrue(message.getText().contains("–∫–Ω–æ–ø–∫"),
                "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Ç–æ–∂–µ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –ø–æ–∫–∞–∑—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     */
    @Test
    void shouldRepeatContactRequestForEmptyTextWhileAwaitingContact() throws Exception {
        Long chatId = 323L;
        markAwaitingContact(chatId);

        Update update = mockTextUpdate(chatId, "   ");

        bot.consume(update);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        SendMessage message = captor.getValue();

        assertEquals(chatId.toString(), message.getChatId());
        assertPhoneKeyboard(message.getReplyMarkup());
        assertTrue(message.getText().contains("–∫–Ω–æ–ø–∫"),
                "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞");
    }

    /**
     * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –±–æ—Ç –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     */
    @Test
    void shouldRejectContactFromAnotherUser() throws Exception {
        Long chatId = 987L;
        markAwaitingContact(chatId);

        Update update = mockContactUpdate(chatId, 1_000_000_001L, 2_000_000_002L, "+375291234567");

        bot.consume(update);

        verify(telegramService, never()).linkTelegramToCustomer(anyString(), eq(chatId));

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        SendMessage response = captor.getValue();

        assertEquals(chatId.toString(), response.getChatId());
        assertTrue(response.getText().contains("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"));
        assertPhoneKeyboard(response.getReplyMarkup());
        assertEquals(BuyerChatState.AWAITING_CONTACT, bot.getState(chatId),
                "–ü–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–∂–∏–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");
    }

    /**
     * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å–æ —Å–∫—Ä—ã—Ç–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏.
     */
    @Test
    void shouldMarkKeyboardHiddenWhenReplyMarkupRequestsRemoval() throws Exception {
        Long chatId = 555L;

        Update update = serviceReplyUpdate(chatId, createRemoveKeyboardMarkup());

        bot.consume(update);

        assertTrue(chatSessionRepository.isKeyboardHidden(chatId),
                "–ü–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è remove_keyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å—á–∏—Ç–∞—Ç—å—Å—è —Å–∫—Ä—ã—Ç–æ–π");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–∞–ª–∏—á–∏–µ –æ–±—ã—á–Ω–æ–π inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     */
    @Test
    void shouldIgnoreInlineKeyboardWhileDetectingPersistentRemoval() throws Exception {
        Long chatId = 556L;

        Update update = serviceReplyUpdate(chatId, createInlineKeyboardMarkup());

        bot.consume(update);

        assertFalse(chatSessionRepository.isKeyboardHidden(chatId),
                "–°–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è my_chat_member –±–æ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
     */
    @Test
    void shouldRestorePersistentKeyboardWhenMyChatMemberArrives() throws Exception {
        Long chatId = 558L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        customer.setTelegramConfirmed(true);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        Update update = mockMyChatMemberUpdate(chatId);

        bot.consume(update);

        assertEquals(BuyerChatState.IDLE, bot.getState(chatId),
                "–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥");

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());

        boolean hasPersistentKeyboard = captor.getAllValues().stream()
                .map(SendMessage::getReplyMarkup)
                .filter(ReplyKeyboardMarkup.class::isInstance)
                .map(ReplyKeyboardMarkup.class::cast)
                .anyMatch(this::keyboardContainsMenuButton);

        assertTrue(hasPersistentKeyboard,
                "–ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π ¬´üè† –ú–µ–Ω—é¬ª –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´üè† –ú–µ–Ω—é¬ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
     * –ø—Ä–∏–≤–æ–¥–∏—Ç –ª–∏—à—å –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
     */
    @Test
    void shouldNotSendKeyboardHintWhenMenuPressedTwiceInIdleState() throws Exception {
        Long chatId = 559L;
        Customer customer = new Customer();
        customer.setTelegramChatId(chatId);
        customer.setTelegramConfirmed(true);
        customer.setNotificationsEnabled(true);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        ChatSession session = new ChatSession(chatId,
                BuyerChatState.IDLE,
                101,
                BuyerBotScreen.MENU,
                false,
                false);
        chatSessionRepository.save(session);

        Update update = mockTextUpdate(chatId, MENU_BUTTON_TEXT);

        bot.consume(update);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, times(1)).execute(captor.capture());

        SendMessage message = captor.getValue();
        assertEquals(chatId.toString(), message.getChatId(),
                "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç");
        assertNotNull(message.getText(), "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
        assertTrue(message.getText().contains("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                "–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é");
    }

    /**
     * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä.
     *
     * @param senderId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ {@code null}
     * @param contactUserId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ {@code null}
     * @param reason        –ø–æ—è—Å–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
     */
    @ParameterizedTest
    @MethodSource("missingOwnershipIdentifiers")
    void shouldRejectContactWhenOwnershipIdentifiersMissing(Long senderId,
                                                            Long contactUserId,
                                                            String reason) throws Exception {
        Long chatId = 654L;
        markAwaitingContact(chatId);

        Update update = mockContactUpdate(chatId, senderId, contactUserId, "+375291234567");

        bot.consume(update);

        verify(telegramService, never()).linkTelegramToCustomer(anyString(), eq(chatId));

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        SendMessage response = captor.getValue();

        assertTrue(response.getText().contains("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"),
                () -> "–ü—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ '" + reason + "' –±–æ—Ç –æ–±—è–∑–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ");
        assertPhoneKeyboard(response.getReplyMarkup());
        assertEquals(BuyerChatState.AWAITING_CONTACT, bot.getState(chatId),
                "–ü–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–∂–∏–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
     */
    @Test
    void shouldSendSuccessMessageWhenConfirmingNameFromMenu() throws Exception {
        Long chatId = 789L;
        when(telegramService.confirmName(chatId)).thenReturn(true);

        Update update = mockTextUpdate(chatId, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è");

        bot.consume(update);

        verify(telegramService).confirmName(chatId);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());

        boolean hasSuccess = captor.getAllValues().stream()
                .map(SendMessage::getText)
                .filter(Objects::nonNull)
                .anyMatch(text -> text.contains("–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã"));

        assertTrue(hasSuccess, "–ë–æ—Ç –æ–±—è–∑–∞–Ω —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç Telegram –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
     *
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –±–∞–Ω–Ω–µ—Ä
     * @return {@code true}, –µ—Å–ª–∏ —Å—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π –±–∞–Ω–Ω–µ—Ä
     */
    private boolean wasAnnouncementRendered(String title) {
        return mockingDetails(telegramClient).getInvocations().stream()
                .filter(invocation -> "execute".equals(invocation.getMethod().getName()))
                .map(invocation -> invocation.getArgument(0))
                .filter(EditMessageText.class::isInstance)
                .map(EditMessageText.class::cast)
                .map(EditMessageText::getText)
                .filter(Objects::nonNull)
                .anyMatch(text -> text.contains(title));
    }

    /**
     * –ù–∞–±–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–∞—Å–æ–∫.
     *
     * @return –ø–æ—Ç–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
     */
    private static Stream<Arguments> recognizedPhones() {
        return Stream.of(
                "+375291234567",
                "80291234567",
                "8 029 123 45 67"
        ).map(number -> Arguments.of(number,
                PhoneUtils.maskPhone(PhoneUtils.normalizePhone(number))));
    }

    /**
     * –ù–∞–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
     *
     * @return –ø–æ—Ç–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ senderId/contactUserId
     */
    private static Stream<Arguments> missingOwnershipIdentifiers() {
        return Stream.of(
                Arguments.of(null, 2_000_000_002L, "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"),
                Arguments.of(1_000_000_001L, null, "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"),
                Arguments.of(null, null, "–æ–±–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        );
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     * @param text   —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç {@link Update}
     */
    private Update mockTextUpdate(Long chatId, String text) {
        Update update = mock(Update.class);
        Message message = mock(Message.class);

        when(update.hasMessage()).thenReturn(true);
        when(update.getMessage()).thenReturn(message);
        when(message.hasText()).thenReturn(true);
        when(message.getText()).thenReturn(text);
        when(message.getChatId()).thenReturn(chatId);
        when(message.hasContact()).thenReturn(false);

        return update;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–æ–∫ callback-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å—ã–ª–æ–∫.
     *
     * @param chatId       –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
     * @return –æ–±—ä–µ–∫—Ç {@link Update} —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º callback
     */
    private Update mockCallbackUpdate(Long chatId, String callbackData) {
        return mockCallbackUpdate(chatId, callbackData, 1);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–æ–∫ callback-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
     *
     * @param chatId       –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
     * @param messageId    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à—ë–ª callback
     * @return –æ–±—ä–µ–∫—Ç {@link Update} —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º callback
     */
    private Update mockCallbackUpdate(Long chatId, String callbackData, Integer messageId) {
        Update update = mock(Update.class);
        CallbackQuery callbackQuery = mock(CallbackQuery.class);
        Message message = mock(Message.class);

        when(update.hasCallbackQuery()).thenReturn(true);
        when(update.getCallbackQuery()).thenReturn(callbackQuery);
        when(callbackQuery.getId()).thenReturn("cb-" + chatId);
        when(callbackQuery.getData()).thenReturn(callbackData);
        when(callbackQuery.getMessage()).thenReturn(message);

        when(message.getChatId()).thenReturn(chatId);
        when(message.getMessageId()).thenReturn(messageId);

        return update;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –º–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–æ–≤.
     *
     * @param chatId         –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param senderUserId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param contactUserId  –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
     * @param phoneNumber    –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ç–∞–∫—Ç–µ
     * @return —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç {@link Update}
     */
    private Update mockContactUpdate(Long chatId,
                                     Long senderUserId,
                                     Long contactUserId,
                                     String phoneNumber) {
        Update update = mock(Update.class);
        Message message = mock(Message.class);
        Contact contact = mock(Contact.class);
        User fromUser = mock(User.class);

        when(update.hasMessage()).thenReturn(true);
        when(update.getMessage()).thenReturn(message);
        when(message.getChatId()).thenReturn(chatId);
        when(message.hasText()).thenReturn(false);
        when(message.hasContact()).thenReturn(true);
        when(message.getContact()).thenReturn(contact);
        when(message.getFrom()).thenReturn(fromUser);

        when(fromUser.getId()).thenReturn(senderUserId);
        when(contact.getUserId()).thenReturn(contactUserId);
        when(contact.getPhoneNumber()).thenReturn(phoneNumber);

        return update;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram —Ç–∏–ø–∞ my_chat_member –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç {@link Update}
     */
    private Update mockMyChatMemberUpdate(Long chatId) {
        Update update = mock(Update.class);
        ChatMemberUpdated myChatMember = mock(ChatMemberUpdated.class);
        Chat chat = mock(Chat.class);

        when(update.hasMyChatMember()).thenReturn(true);
        when(update.getMyChatMember()).thenReturn(myChatMember);
        when(myChatMember.getChat()).thenReturn(chat);
        when(chat.getId()).thenReturn(chatId);

        return update;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram —Å–æ —Å–ª—É–∂–µ–±–Ω—ã–º reply_markup.
     *
     * @param chatId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param replyMarkup —É–∑–µ–ª —Å –¥–∞–Ω–Ω—ã–º–∏ reply_markup
     * @return –æ–±—ä–µ–∫—Ç {@link Update} —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
     */
    private Update serviceReplyUpdate(Long chatId, ObjectNode replyMarkup) throws JsonProcessingException {
        ObjectNode root = objectMapper.createObjectNode();
        root.put("message_id", 1);
        root.put("date", 0);
        ObjectNode chat = root.putObject("chat");
        chat.put("id", chatId);
        chat.put("type", "private");
        root.set("reply_markup", replyMarkup);

        Message message = objectMapper.treeToValue(root, Message.class);

        Update update = new Update();
        update.setMessage(message);
        return update;
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç JSON-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     *
     * @return —É–∑–µ–ª reply_markup —Å —Ñ–ª–∞–≥–æ–º remove_keyboard
     */
    private ObjectNode createRemoveKeyboardMarkup() {
        ObjectNode replyMarkup = objectMapper.createObjectNode();
        replyMarkup.put("remove_keyboard", true);
        return replyMarkup;
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç JSON inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     *
     * @return —É–∑–µ–ª reply_markup —Å –æ–±—ã—á–Ω–æ–π inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     */
    private ObjectNode createInlineKeyboardMarkup() {
        ObjectNode replyMarkup = objectMapper.createObjectNode();
        ArrayNode keyboard = replyMarkup.putArray("inline_keyboard");
        ArrayNode row = keyboard.addArray();
        ObjectNode button = row.addObject();
        button.put("text", "Demo");
        button.put("callback_data", "demo");
        return replyMarkup;
    }

    /**
     * –ü–æ–º–µ—á–∞–µ—Ç —á–∞—Ç –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void markAwaitingContact(Long chatId) throws Exception {
        chatSessionRepository.updateState(chatId, BuyerChatState.AWAITING_CONTACT);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
     *
     * @param replyKeyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –±–æ—Ç–æ–º
     */
    private void assertPhoneKeyboard(ReplyKeyboard replyKeyboard) {
        assertNotNull(replyKeyboard, "–û–∂–∏–¥–∞–ª–∞—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        assertTrue(replyKeyboard instanceof ReplyKeyboardMarkup,
                "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∏–ø–∞ ReplyKeyboardMarkup");
        ReplyKeyboardMarkup markup = (ReplyKeyboardMarkup) replyKeyboard;
        List<KeyboardRow> rows = markup.getKeyboard();
        assertNotNull(rows);
        assertFalse(rows.isEmpty(), "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É");

        boolean hasRequestContact = false;
        for (KeyboardRow row : rows) {
            for (KeyboardButton button : row) {
                if (Boolean.TRUE.equals(button.getRequestContact())) {
                    hasRequestContact = true;
                    break;
                }
            }
            if (hasRequestContact) {
                break;
            }
        }
        assertTrue(hasRequestContact, "–ö–Ω–æ–ø–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´üè† –ú–µ–Ω—é¬ª –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
     *
     * @param markup –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     * @return {@code true}, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
     */
    private boolean keyboardContainsMenuButton(ReplyKeyboardMarkup markup) {
        if (markup == null || markup.getKeyboard() == null) {
            return false;
        }

        return markup.getKeyboard().stream()
                .filter(Objects::nonNull)
                .flatMap(row -> row.stream().filter(Objects::nonNull))
                .map(KeyboardButton::getText)
                .anyMatch(MENU_BUTTON_TEXT::equals);
    }
}
