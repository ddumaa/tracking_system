package com.project.tracking_system.service.telegram;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.project.tracking_system.entity.BuyerBotScreen;
import com.project.tracking_system.entity.BuyerChatState;
import com.project.tracking_system.entity.Customer;
import com.project.tracking_system.entity.NameSource;
import com.project.tracking_system.service.customer.CustomerTelegramService;
import com.project.tracking_system.service.telegram.support.InMemoryChatSessionRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Chat;
import org.telegram.telegrambots.meta.api.objects.Contact;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.generics.TelegramClient;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è {@link BuyerTelegramBot}, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.
 */
@ExtendWith(MockitoExtension.class)
class BuyerTelegramBotStateIntegrationTest {

    @Mock
    private TelegramClient telegramClient;

    @Mock
    private CustomerTelegramService telegramService;

    private BuyerTelegramBot bot;
    private FullNameValidator fullNameValidator;
    private InMemoryChatSessionRepository chatSessionRepository;

    /**
     * –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç Telegram.
     */
    @BeforeEach
    void setUp() throws Exception {
        fullNameValidator = new FullNameValidator();
        chatSessionRepository = new InMemoryChatSessionRepository();
        bot = new BuyerTelegramBot(telegramClient, "token", telegramService, fullNameValidator, chatSessionRepository,
                new ObjectMapper());
        when(telegramClient.execute(any(SendMessage.class))).thenReturn(null);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
     */
    @Test
    void shouldTransitionToAwaitingContactAfterStart() throws Exception {
        Long chatId = 1001L;
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.empty());

        bot.consume(textUpdate(chatId, "/start"));

        assertEquals(BuyerChatState.AWAITING_CONTACT, bot.getState(chatId),
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞");

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        SendMessage message = captor.getValue();

        assertTrue(message.getText().contains("–Ω–æ–º–µ—Ä"),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º");
        assertPhoneKeyboard(message);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ –∏—Å—á–µ–∑–∞–µ—Ç.
     */
    @Test
    void shouldShowMenuKeyboardAfterContactForNewUser() throws Exception {
        Long chatId = 3030L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(false);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        customer.setNotificationsEnabled(true);
        customer.setFullName(null);

        when(telegramService.findByChatId(chatId))
                .thenReturn(Optional.empty(), Optional.of(customer));
        when(telegramService.linkTelegramToCustomer(anyString(), eq(chatId))).thenReturn(customer);
        when(telegramService.confirmTelegram(customer)).thenReturn(customer);
        doNothing().when(telegramService).notifyActualStatuses(customer);

        bot.consume(textUpdate(chatId, "/start"));
        clearInvocations(telegramClient);

        bot.consume(contactUpdate(chatId, "+375291234567"));

        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId),
                "–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–º–µ—Ä–∞ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –∂–¥–∞—Ç—å –≤–≤–æ–¥ –§–ò–û –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É");

        assertFalse(chatSessionRepository.isKeyboardHidden(chatId),
                "–ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´üè† –ú–µ–Ω—é¬ª/¬´‚ùì –ü–æ–º–æ—â—å¬ª –¥–æ–ª–∂–Ω–∞ —Å—á–∏—Ç–∞—Ç—å—Å—è –≤–∏–¥–∏–º–æ–π");

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        List<SendMessage> messages = captor.getAllValues();

        int removalMessageIndex = -1;
        int menuKeyboardIndex = -1;

        for (int i = 0; i < messages.size(); i++) {
            var markup = messages.get(i).getReplyMarkup();
            if (markup instanceof ReplyKeyboardRemove) {
                removalMessageIndex = i;
            }
            if (markup instanceof ReplyKeyboardMarkup replyKeyboardMarkup
                    && containsMenuButtons(replyKeyboardMarkup)) {
                if (menuKeyboardIndex < 0) {
                    menuKeyboardIndex = i;
                }
            }
        }

        assertTrue(removalMessageIndex >= 0,
                "–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Å–∫—Ä—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–æ–º ReplyKeyboardRemove");
        assertTrue(menuKeyboardIndex >= 0,
                "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é");
        assertTrue(menuKeyboardIndex > removalMessageIndex,
                "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ReplyKeyboardRemove");

        boolean hasContactButton = messages.stream()
                .map(SendMessage::getReplyMarkup)
                .filter(ReplyKeyboardMarkup.class::isInstance)
                .map(ReplyKeyboardMarkup.class::cast)
                .anyMatch(this::containsContactButton);
        assertFalse(hasContactButton,
                "–ö–Ω–æ–ø–∫–∞ ¬´üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º –æ–¥–Ω–æ—Å–ª–æ–≤–Ω–æ–º –§–ò–û –±–æ—Ç —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
     */
    @Test
    void shouldRequestFullNameWhenStoredNameInvalid() throws Exception {
        Long chatId = 1011L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(true);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        customer.setNotificationsEnabled(true);
        customer.setFullName("–ò–≤–∞–Ω");

        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        bot.consume(textUpdate(chatId, "/start"));

        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId),
                "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û –≤–º–µ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");
        verify(telegramService).markNameUnconfirmed(chatId);
        verify(telegramService, never()).confirmName(chatId);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        boolean hasPrompt = captor.getAllValues().stream()
                .map(SendMessage::getText)
                .filter(text -> text != null)
                .anyMatch("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –§–ò–û"::equals);
        assertTrue(hasPrompt, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –§–ò–û");
    }

    /**
     * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –±–µ–∑ –§–ò–û –±–æ—Ç –∂–¥—ë—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏.
     */
    @Test
    void shouldAwaitNameAfterContactWhenMissing() throws Exception {
        Long chatId = 1002L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(false);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        customer.setNotificationsEnabled(true);
        customer.setFullName(null);

        when(telegramService.linkTelegramToCustomer(anyString(), eq(chatId))).thenReturn(customer);
        when(telegramService.confirmTelegram(customer)).thenReturn(customer);

        bot.consume(contactUpdate(chatId, "+375291112233"));

        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId),
                "–ü–æ—Å–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –±–µ–∑ –∏–º–µ–Ω–∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥ –§–ò–û");
        verify(telegramService).confirmTelegram(customer);
        verify(telegramService).notifyActualStatuses(customer);

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        boolean hasNamePrompt = captor.getAllValues().stream()
                .map(SendMessage::getText)
                .filter(text -> text != null)
                .anyMatch(text -> text.contains("—É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –§–ò–û"));
        assertTrue(hasNamePrompt, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—å–±—É —É–∫–∞–∑–∞—Ç—å –§–ò–û");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–≤–æ–¥ –§–ò–û –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.
     */
    @Test
    void shouldSwitchToIdleAfterNameInput() throws Exception {
        Long chatId = 1003L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(false);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        customer.setFullName(null);

        when(telegramService.linkTelegramToCustomer(anyString(), eq(chatId))).thenReturn(customer);
        when(telegramService.confirmTelegram(customer)).thenReturn(customer);

        bot.consume(contactUpdate(chatId, "+375297777777"));
        clearInvocations(telegramClient);

        when(telegramService.updateNameFromTelegram(chatId, "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")).thenAnswer(invocation -> {
            customer.setFullName("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤");
            customer.setNameSource(NameSource.USER_CONFIRMED);
            return true;
        });
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        bot.consume(textUpdate(chatId, "  –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤  "));

        assertEquals(BuyerChatState.IDLE, bot.getState(chatId),
                "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE");
        verify(telegramService).updateNameFromTelegram(chatId, "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤");

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        boolean hasSuccessMessage = captor.getAllValues().stream()
                .map(SendMessage::getText)
                .anyMatch("‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"::equals);
        assertTrue(hasSuccessMessage, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –§–ò–û");
    }

    /**
     * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.
     */
    @Test
    void shouldStayAwaitingContactOnForeignCommand() throws Exception {
        Long chatId = 1004L;
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.empty());

        bot.consume(textUpdate(chatId, "/start"));
        assertEquals(BuyerChatState.AWAITING_CONTACT, bot.getState(chatId));
        clearInvocations(telegramClient);

        bot.consume(textUpdate(chatId, "/stats"));

        assertEquals(BuyerChatState.AWAITING_CONTACT, bot.getState(chatId),
                "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–∂–∏–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");
        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        SendMessage message = captor.getValue();
        assertTrue(message.getText().contains("–ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞");
        assertPhoneKeyboard(message);
        verify(telegramService, never()).getStatistics(chatId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ –§–ò–û –ø—Ä–∏ –Ω–µ—É–º–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.
     */
    @Test
    void shouldWarnAboutNameDuringUnexpectedCommand() throws Exception {
        Long chatId = 1005L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(false);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        customer.setFullName(null);

        when(telegramService.linkTelegramToCustomer(anyString(), eq(chatId))).thenReturn(customer);
        when(telegramService.confirmTelegram(customer)).thenReturn(customer);

        bot.consume(contactUpdate(chatId, "+375296666666"));
        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId));
        clearInvocations(telegramClient);

        bot.consume(textUpdate(chatId, "–í–µ—Ä–Ω–æ"));

        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId),
                "–ë–æ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –§–ò–û –ø–æ—Å–ª–µ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–æ–º–∞–Ω–¥—ã");
        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient).execute(captor.capture());
        assertTrue(captor.getValue().getText().contains("–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –§–ò–û"),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–≤–æ–¥–µ –§–ò–û");
        verify(telegramService, never()).confirmName(chatId);
        verify(telegramService, never()).updateNameFromTelegram(anyLong(), anyString());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /menu –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE.
     */
    @Test
    void shouldResetStateToIdleOnMenuFromAnyState() throws Exception {
        Long chatId = 1006L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(false);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        customer.setFullName(null);

        when(telegramService.linkTelegramToCustomer(anyString(), eq(chatId))).thenReturn(customer);
        when(telegramService.confirmTelegram(customer)).thenReturn(customer);

        bot.consume(contactUpdate(chatId, "+375295555555"));
        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId));
        clearInvocations(telegramClient);

        chatSessionRepository.markKeyboardHidden(chatId);
        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        bot.consume(textUpdate(chatId, "/menu"));

        assertEquals(BuyerChatState.IDLE, bot.getState(chatId),
                "–ö–æ–º–∞–Ω–¥–∞ /menu –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE");
        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        var messages = captor.getAllValues();
        boolean hasMenuMessage = messages.stream()
                .map(SendMessage::getText)
                .filter(text -> text != null)
                .anyMatch(text -> text.contains("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"));
        assertTrue(hasMenuMessage, "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        assertMenuKeyboard(messages);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –±–æ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –§–ò–û –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É.
     */
    @Test
    void shouldStayAwaitingNameOnInvalidCharacters() throws Exception {
        Long chatId = 1007L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(false);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        customer.setFullName(null);

        when(telegramService.linkTelegramToCustomer(anyString(), eq(chatId))).thenReturn(customer);
        when(telegramService.confirmTelegram(customer)).thenReturn(customer);

        bot.consume(contactUpdate(chatId, "+375294444444"));
        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId));
        clearInvocations(telegramClient);

        bot.consume(textUpdate(chatId, "–ò–≤–∞–Ω123"));

        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId),
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ");
        verify(telegramService, never()).updateNameFromTelegram(anyLong(), anyString());

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        boolean hasValidationMessage = captor.getAllValues().stream()
                .map(SendMessage::getText)
                .filter(text -> text != null)
                .anyMatch(text -> text.contains("–±—É–∫–≤—ã"));
        assertTrue(hasValidationMessage, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö");
    }

    /**
     * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Ñ—Ä–∞–∑–∞ ¬´–¥–∞¬ª –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–º—è.
     */
    @Test
    void shouldConfirmExistingNameOnConfirmationPhraseWhileAwaiting() throws Exception {
        Long chatId = 1008L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(false);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        customer.setFullName("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤");

        when(telegramService.linkTelegramToCustomer(anyString(), eq(chatId))).thenReturn(customer);
        when(telegramService.confirmTelegram(customer)).thenReturn(customer);
        when(telegramService.confirmName(chatId)).thenReturn(true);

        bot.consume(contactUpdate(chatId, "+375293333333"));
        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId));
        clearInvocations(telegramClient);

        bot.consume(textUpdate(chatId, "–¥–∞"));

        assertEquals(BuyerChatState.IDLE, bot.getState(chatId),
                "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–æ—Ç –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥");
        verify(telegramService).confirmName(chatId);
        verify(telegramService, never()).updateNameFromTelegram(anyLong(), anyString());

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        boolean hasSuccessMessage = captor.getAllValues().stream()
                .map(SendMessage::getText)
                .filter(text -> text != null)
                .anyMatch(text -> text.contains("–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã"));
        assertTrue(hasSuccessMessage, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–π —Ñ—Ä–∞–∑–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –±–æ—Ç –ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –§–ò–û.
     */
    @Test
    void shouldWarnWhenConfirmationPhraseWithoutStoredName() throws Exception {
        Long chatId = 1009L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(false);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        customer.setFullName(null);

        when(telegramService.linkTelegramToCustomer(anyString(), eq(chatId))).thenReturn(customer);
        when(telegramService.confirmTelegram(customer)).thenReturn(customer);
        when(telegramService.confirmName(chatId)).thenReturn(false);

        bot.consume(contactUpdate(chatId, "+375292222222"));
        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId));
        clearInvocations(telegramClient);

        bot.consume(textUpdate(chatId, "–æ–∫"));

        assertEquals(BuyerChatState.AWAITING_NAME_INPUT, bot.getState(chatId),
                "–ò–º—è –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º, –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–∂–∏–¥–∞—Ç—å –≤–≤–æ–¥");
        verify(telegramService).confirmName(chatId);
        verify(telegramService, never()).updateNameFromTelegram(anyLong(), anyString());

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        boolean hasReminder = captor.getAllValues().stream()
                .map(SendMessage::getText)
                .filter(text -> text != null)
                .anyMatch(text -> text.contains("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é"));
        assertTrue(hasReminder, "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–µ—Å—Ç–∏ –§–ò–û");
    }

    /**
     * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ —Ä–µ–∂–∏–º–µ –º–µ–Ω—é –æ—Ç–≤–µ—Ç ¬´–≤–µ—Ä–Ω–æ¬ª —Ç–∞–∫–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–º—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
     */
    @Test
    void shouldConfirmNameInIdleOnConfirmationPhrase() throws Exception {
        Long chatId = 1010L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(true);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        customer.setFullName("–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞");

        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));
        when(telegramService.confirmName(chatId)).thenReturn(true);

        bot.consume(textUpdate(chatId, "/start"));
        clearInvocations(telegramClient);

        bot.consume(textUpdate(chatId, "–í–µ—Ä–Ω–æ"));

        assertEquals(BuyerChatState.IDLE, bot.getState(chatId),
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é");
        verify(telegramService).confirmName(chatId);
        verify(telegramService, never()).updateNameFromTelegram(anyLong(), anyString());

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());
        boolean hasSuccess = captor.getAllValues().stream()
                .map(SendMessage::getText)
                .filter(text -> text != null)
                .anyMatch(text -> text.contains("–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã"));
        assertTrue(hasSuccess, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é, –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–ª–∞–≥ —Å–∫—Ä—ã—Ç–∏—è —Å–±—Ä–æ—à–µ–Ω –≤—Ä—É—á–Ω—É—é.
     */
    @Test
    void shouldResendReplyKeyboardOnStartWhenFlagReset() throws Exception {
        Long chatId = 3031L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(true);
        customer.setNameSource(NameSource.USER_CONFIRMED);
        customer.setNotificationsEnabled(true);
        customer.setFullName("–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞");

        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        chatSessionRepository.markKeyboardVisible(chatId);

        bot.consume(textUpdate(chatId, "/start"));

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());

        boolean hasMenuKeyboard = captor.getAllValues().stream()
                .map(SendMessage::getReplyMarkup)
                .filter(ReplyKeyboardMarkup.class::isInstance)
                .map(ReplyKeyboardMarkup.class::cast)
                .anyMatch(this::containsMenuButtons);

        assertTrue(hasMenuKeyboard,
                "–ü–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç –æ–±—è–∑–∞–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´üè† –ú–µ–Ω—é¬ª –∏ ¬´‚ùì –ü–æ–º–æ—â—å¬ª");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –ø—Ä–∏ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é.
     */
    @Test
    void shouldResendMenuMessageWhenTelegramReportsNotModified() throws Exception {
        Long chatId = 4040L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(true);
        customer.setNameSource(NameSource.USER_CONFIRMED);
        customer.setNotificationsEnabled(true);
        customer.setFullName("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤");

        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        AtomicInteger messageIdSequence = new AtomicInteger(500);
        when(telegramClient.execute(any(SendMessage.class))).thenAnswer(invocation -> {
            Message message = new Message();
            message.setMessageId(messageIdSequence.incrementAndGet());
            return message;
        });

        doAnswer(invocation -> {
            throw new TelegramApiException("Bad Request: message is not modified");
        }).when(telegramClient).execute(any(EditMessageText.class));

        try {
            bot.consume(textUpdate(chatId, "/start"));

            Integer initialAnchor = chatSessionRepository.find(chatId)
                    .map(ChatSession::getAnchorMessageId)
                    .orElse(null);
            assertNotNull(initialAnchor,
                    "–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é");

            clearInvocations(telegramClient);

            bot.consume(textUpdate(chatId, "/start"));

            ChatSession session = chatSessionRepository.find(chatId)
                    .orElseThrow(() -> new AssertionError("–°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"));
            assertEquals(BuyerBotScreen.MENU, session.getLastScreen(),
                    "–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–æ–±—Ä–∞–∂—ë–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é");

            Integer newAnchor = session.getAnchorMessageId();
            assertNotNull(newAnchor,
                    "–ë–æ—Ç –æ–±—è–∑–∞–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏");
            assertNotEquals(initialAnchor, newAnchor,
                    "–ü—Ä–∏ –æ—à–∏–±–∫–µ message is not modified –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é");

            assertFalse(chatSessionRepository.isKeyboardHidden(chatId),
                    "–ü–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π");

            verify(telegramClient).execute(any(EditMessageText.class));

            ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
            verify(telegramClient, atLeast(2)).execute(captor.capture());
            List<SendMessage> messages = captor.getAllValues();

            boolean hasInlineMenu = messages.stream()
                    .map(SendMessage::getReplyMarkup)
                    .filter(InlineKeyboardMarkup.class::isInstance)
                    .map(InlineKeyboardMarkup.class::cast)
                    .anyMatch(this::containsMenuInlineButtons);
            assertTrue(hasInlineMenu,
                    "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ message is not modified");

            boolean hasReplyKeyboard = messages.stream()
                    .map(SendMessage::getReplyMarkup)
                    .anyMatch(ReplyKeyboardMarkup.class::isInstance);
            assertTrue(hasReplyKeyboard,
                    "–ü–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start –¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é");
        } finally {
            doReturn(null).when(telegramClient).execute(any(EditMessageText.class));
            doReturn(null).when(telegramClient).execute(any(SendMessage.class));
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —è–∫–æ—Ä—è –±–æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
     */
    @Test
    void shouldResendReplyKeyboardAfterAnchorCleared() throws Exception {
        Long chatId = 2020L;
        Customer customer = new Customer();
        customer.setTelegramConfirmed(true);
        customer.setNameSource(NameSource.USER_CONFIRMED);
        customer.setFullName("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤");

        when(telegramService.findByChatId(chatId)).thenReturn(Optional.of(customer));

        chatSessionRepository.markKeyboardVisible(chatId);

        bot.consume(textUpdate(chatId, "/start"));

        clearInvocations(telegramClient);

        chatSessionRepository.clearAnchor(chatId);

        assertTrue(chatSessionRepository.isKeyboardHidden(chatId),
                "–ü–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏ —è–∫–æ—Ä—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–º–µ—á–∞—Ç—å—Å—è –∫–∞–∫ —Å–∫—Ä—ã—Ç–∞—è");

        bot.consume(textUpdate(chatId, "/menu"));

        ArgumentCaptor<SendMessage> captor = ArgumentCaptor.forClass(SendMessage.class);
        verify(telegramClient, atLeastOnce()).execute(captor.capture());

        boolean hasReplyKeyboard = captor.getAllValues().stream()
                .map(SendMessage::getReplyMarkup)
                .anyMatch(ReplyKeyboardMarkup.class::isInstance);

        assertTrue(hasReplyKeyboard,
                "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –º–µ–Ω—é –æ–±—è–∑–∞–Ω –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É");
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @return –æ–±—ä–µ–∫—Ç {@link Update} –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –±–æ—Ç–∞
     */
    private Update textUpdate(Long chatId, String text) {
        Message message = new Message();
        message.setMessageId(1);
        message.setText(text);
        message.setChat(createChat(chatId));

        Update update = new Update();
        update.setMessage(message);
        return update;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param phone  –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     * @return –æ–±—ä–µ–∫—Ç {@link Update} —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
     */
    private Update contactUpdate(Long chatId, String phone) {
        Message message = new Message();
        message.setMessageId(1);
        message.setChat(createChat(chatId));
        Contact contact = new Contact();
        contact.setPhoneNumber(phone);
        contact.setUserId(chatId);
        message.setContact(contact);

        Update update = new Update();
        update.setMessage(message);
        return update;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞ Telegram –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     * @return –æ–±—ä–µ–∫—Ç {@link Chat} —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
     */
    private Chat createChat(Long chatId) {
        Chat chat = new Chat();
        chat.setId(chatId);
        chat.setType("private");
        return chat;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞.
     *
     * @param message –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private void assertPhoneKeyboard(SendMessage message) {
        assertNotNull(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null");
        assertNotNull(message.getReplyMarkup(), "–û–∂–∏–¥–∞–ª–∞—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞");
        assertTrue(message.getReplyMarkup() instanceof ReplyKeyboardMarkup,
                "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∏–ø–∞ ReplyKeyboardMarkup");

        ReplyKeyboardMarkup markup = (ReplyKeyboardMarkup) message.getReplyMarkup();
        List<KeyboardRow> rows = markup.getKeyboard();
        assertNotNull(rows, "–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        assertFalse(rows.isEmpty(), "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É");

        boolean hasContactButton = false;
        for (KeyboardRow row : rows) {
            for (KeyboardButton button : row) {
                if (Boolean.TRUE.equals(button.getRequestContact())) {
                    hasContactButton = true;
                    break;
                }
            }
            if (hasContactButton) {
                break;
            }
        }

        assertTrue(hasContactButton, "–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param markup –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @return {@code true}, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–Ω–æ–ø–∫–∏ ¬´üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª, ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –∏ ¬´‚ùì –ü–æ–º–æ—â—å¬ª
     */
    private boolean containsMenuInlineButtons(InlineKeyboardMarkup markup) {
        if (markup == null || markup.getKeyboard() == null) {
            return false;
        }

        boolean hasStats = false;
        boolean hasSettings = false;
        boolean hasHelp = false;

        for (InlineKeyboardRow row : markup.getKeyboard()) {
            if (row == null) {
                continue;
            }
            for (InlineKeyboardButton button : row) {
                if (button == null) {
                    continue;
                }
                String text = button.getText();
                if ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".equals(text)) {
                    hasStats = true;
                }
                if ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏".equals(text)) {
                    hasSettings = true;
                }
                if ("‚ùì –ü–æ–º–æ—â—å".equals(text)) {
                    hasHelp = true;
                }
            }
        }

        return hasStats && hasSettings && hasHelp;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é —Å—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
     *
     * @param messages —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º –≤ —Ä–∞–º–∫–∞—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    private void assertMenuKeyboard(List<SendMessage> messages) {
        boolean hasKeyboard = messages.stream()
                .map(SendMessage::getReplyMarkup)
                .filter(ReplyKeyboardMarkup.class::isInstance)
                .map(ReplyKeyboardMarkup.class::cast)
                .anyMatch(this::containsMenuButtons);
        assertTrue(hasKeyboard,
                "–ü–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç –æ–±—è–∑–∞–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–æ–ø–∫–∏ ¬´üè† –ú–µ–Ω—é¬ª –∏ ¬´‚ùì –ü–æ–º–æ—â—å¬ª");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ –ø–æ–º–æ—â–∏.
     *
     * @param markup –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     * @return {@code true}, –µ—Å–ª–∏ –æ–±–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
     */
    private boolean containsMenuButtons(ReplyKeyboardMarkup markup) {
        if (markup == null || markup.getKeyboard() == null) {
            return false;
        }

        boolean hasMenu = false;
        boolean hasHelp = false;
        for (KeyboardRow row : markup.getKeyboard()) {
            if (row == null) {
                continue;
            }
            for (KeyboardButton button : row) {
                if (button == null) {
                    continue;
                }
                String text = button.getText();
                if ("üè† –ú–µ–Ω—é".equals(text)) {
                    hasMenu = true;
                }
                if ("‚ùì –ü–æ–º–æ—â—å".equals(text)) {
                    hasHelp = true;
                }
            }
        }
        return hasMenu && hasHelp;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
     *
     * @param markup –ø—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     * @return {@code true}, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞ ¬´üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
     */
    private boolean containsContactButton(ReplyKeyboardMarkup markup) {
        if (markup == null || markup.getKeyboard() == null) {
            return false;
        }

        for (KeyboardRow row : markup.getKeyboard()) {
            if (row == null) {
                continue;
            }
            for (KeyboardButton button : row) {
                if (button == null) {
                    continue;
                }
                if (Boolean.TRUE.equals(button.getRequestContact())) {
                    return true;
                }
                if ("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º".equals(button.getText())) {
                    return true;
                }
            }
        }
        return false;
    }
}
