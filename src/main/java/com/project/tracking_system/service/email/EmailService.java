package com.project.tracking_system.service.email;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.validator.routines.EmailValidator;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import com.project.tracking_system.utils.EmailUtils;

import java.util.Map;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML email —Å–æ–æ–±—â–µ–Ω–∏–π.
 * <p>
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å–æ–æ–±—â–µ–Ω–∏–π —Å HTML-—Å–æ–¥–µ—Ä–∂–∏–º—ã–º.
 * –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {@link JavaMailSender} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º —á–µ—Ä–µ–∑ SMTP —Å–µ—Ä–≤–µ—Ä.
 * </p>
 *
 * @author Dmitriy Anisimov
 * @date 07.01.2025
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService {

    private final JavaMailSender emailSender;
    private final HtmlEmailTemplateService templateService;

    @Value("${spring.mail.username}")
    private String senderEmail;

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
     *
     * @param to               Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
     * @param confirmationCode –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
     */
    public void sendConfirmationEmail(String to, String confirmationCode) {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ email –±–µ–∑ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        log.info("üì® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è email –¥–ª—è: {}", EmailUtils.maskEmail(to));

        if (!isValidEmail(to)) {
            log.warn("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email: {}", EmailUtils.maskEmail(to));
            return;
        }

        try {
            String htmlContent = templateService.generateEmail("confirmation-email",
                    Map.of("confirmationCode", confirmationCode));

            log.info("‚úÖ HTML-—à–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ...");
            sendHtmlEmailAsync(to, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", htmlContent);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ email-—à–∞–±–ª–æ–Ω–∞: {}", e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
     *
     * @param to        Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
     * @param resetLink –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
     */
    public void sendPasswordResetEmail(String to, String resetLink) {
        if (!isValidEmail(to)) {
            log.warn("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email: {}", EmailUtils.maskEmail(to));
            return;
        }

        try {
            String htmlContent = templateService.generateEmail("password-reset-email",
                    Map.of("resetLink", resetLink));

            sendHtmlEmailAsync(to, "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", htmlContent);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ email-—à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML email —Å–æ–æ–±—â–µ–Ω–∏–µ.
     *
     * @param to      –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
     * @param subject —Ç–µ–º–∞ –ø–∏—Å—å–º–∞.
     * @param content HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞.
     */
    @Async
    public void sendHtmlEmailAsync(String to, String subject, String content) {
        log.info("üìß –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email –Ω–∞ {}", EmailUtils.maskEmail(to));

        try {
            MimeMessage message = createMimeMessage(to, subject, content);
            emailSender.send(message);
            log.info("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {}", EmailUtils.maskEmail(to));
        } catch (MessagingException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {}", e.getMessage(), e);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç email-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.
     */
    private MimeMessage createMimeMessage(String to, String subject, String content) throws MessagingException {
        MimeMessage message = emailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
        helper.setFrom(senderEmail);
        helper.setTo(to);
        helper.setSubject(subject);
        helper.setText(content, true);
        return message;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ email –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.
     */
    private boolean isValidEmail(String email) {
        return email != null && EmailValidator.getInstance().isValid(email);
    }
}