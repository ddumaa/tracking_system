package com.project.tracking_system.service.customer;

import com.project.tracking_system.entity.Customer;
import com.project.tracking_system.repository.CustomerRepository;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CustomerStatsService {

    private final CustomerRepository customerRepository;

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     * <p>–ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î, –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å,
     * –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë –∞—Ç–æ–º–∞—Ä–Ω–æ –ø–æ –≤–µ—Ä—Å–∏–∏.
     * –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –µ—â—ë —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ–∂–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä, –Ω–µ –∏–∑–º–µ–Ω—è—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç.</p>
     *
     * @param customer     –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     * @param counterName  –∏–º—è —Å—á—ë—Ç—á–∏–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param atomicUpdate —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –∞—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
     * @param getter       —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞
     * @param setter       –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    private Customer updateStatistic(
            Customer customer,
            String counterName,
            BiFunction<Long, Long, Integer> atomicUpdate,
            Function<Customer, Integer> getter,
            BiConsumer<Customer, Integer> setter
    ) {
        if (customer == null) {
            return null;
        }
        log.debug("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è {} –¥–ª—è customerId={}", counterName, customer.getId());
        int updated = atomicUpdate.apply(customer.getId(), customer.getVersion());
        Customer fresh;
        if (updated == 0) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å {} –¥–ª—è customerId={}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º", counterName, customer.getId());
            fresh = customerRepository.findById(customer.getId())
                    .orElseThrow(() -> new IllegalStateException("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            setter.accept(fresh, getter.apply(fresh) + 1);
            fresh.recalculateReputation();
            fresh = customerRepository.save(fresh);
            log.debug("‚úÖ –°—á—ë—Ç—á–∏–∫ {} –≤—Ä—É—á–Ω—É—é —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è customerId={}", counterName, customer.getId());
        } else {
            log.debug("‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ {} —É—Å–ø–µ—à–Ω–æ –¥–ª—è customerId={}", counterName, customer.getId());
            fresh = customerRepository.findById(customer.getId())
                    .orElseThrow(() -> new IllegalStateException("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            fresh.recalculateReputation();
            // –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∞—Ç–æ–º–∞—Ä–Ω–æ –ø–æ –≤–µ—Ä—Å–∏–∏
            int reputationUpdated = customerRepository.updateReputation(
                    fresh.getId(),
                    fresh.getVersion(),
                    fresh.getReputation()
            );
            if (reputationUpdated == 0) {
                log.warn("‚ö†Ô∏è –†–µ–ø—É—Ç–∞—Ü–∏—è –¥–ª—è customerId={} –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ save", customer.getId());
                // –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
                fresh = customerRepository.findById(customer.getId())
                        .orElseThrow(() -> new IllegalStateException("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
                fresh.recalculateReputation();
                fresh = customerRepository.save(fresh);
            }
        }
        return fresh;
    }

    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é.
     * <p>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–∑ –ë–î; –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è.</p>
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public Customer incrementSent(Customer customer) {
        return updateStatistic(
                customer,
                "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö",
                customerRepository::incrementSentCount,
                Customer::getSentCount,
                Customer::setSentCount
        );
    }

    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∑–∞–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.
     * <p>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ–∂–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑ –ë–î, –Ω–µ –∏–∑–º–µ–Ω—è—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç.</p>
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public Customer incrementPickedUp(Customer customer) {
        return updateStatistic(
                customer,
                "–∑–∞–±—Ä–∞–Ω–Ω—ã—Ö",
                customerRepository::incrementPickedUpCount,
                Customer::getPickedUpCount,
                Customer::setPickedUpCount
        );
    }

    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é.
     * <p>–ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–µ—Ä–µ—á–∏—Ç–∞–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.</p>
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public Customer incrementReturned(Customer customer) {
        return updateStatistic(
                customer,
                "–≤–æ–∑–≤—Ä–∞—Ç–æ–≤",
                customerRepository::incrementReturnedCount,
                Customer::getReturnedCount,
                Customer::setReturnedCount
        );
    }
}
