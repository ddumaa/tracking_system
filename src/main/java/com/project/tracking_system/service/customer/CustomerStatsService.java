package com.project.tracking_system.service.customer;

import com.project.tracking_system.entity.Customer;
import com.project.tracking_system.repository.CustomerRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CustomerStatsService {

    private final CustomerRepository customerRepository;

    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public Customer incrementSent(Customer customer) {
        if (customer == null) {
            return null;
        }
        log.debug("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–ª—è customerId={}", customer.getId());
        int updated = customerRepository.incrementSentCount(customer.getId(), customer.getVersion());
        if (updated == 0) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è customerId={}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º", customer.getId());
            // –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é
            Customer fresh = customerRepository.findById(customer.getId())
                    .orElseThrow(() -> new IllegalStateException("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            fresh.setSentCount(fresh.getSentCount() + 1);
            fresh.recalculateReputation();
            customerRepository.save(fresh);
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            customer.setSentCount(fresh.getSentCount());
            customer.setReputation(fresh.getReputation());
            customer.setVersion(fresh.getVersion());
            log.debug("‚úÖ –°—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è customerId={}", customer.getId());
        } else {
            log.debug("‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –¥–ª—è customerId={}", customer.getId());
            customer.setSentCount(customer.getSentCount() + 1);
            customer.recalculateReputation();
            customer.setVersion(customer.getVersion() + 1);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –ë–î
            customerRepository.save(customer);
        }
        return customer;
    }

    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∑–∞–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public Customer incrementPickedUp(Customer customer) {
        if (customer == null) {
            return null;
        }
        log.debug("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è customerId={}", customer.getId());
        int updated = customerRepository.incrementPickedUpCount(customer.getId(), customer.getVersion());
        if (updated == 0) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è customerId={}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º", customer.getId());
            // –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ —á–∏—Ç–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é
            Customer fresh = customerRepository.findById(customer.getId())
                    .orElseThrow(() -> new IllegalStateException("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            fresh.setPickedUpCount(fresh.getPickedUpCount() + 1);
            fresh.recalculateReputation();
            customerRepository.save(fresh);
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            customer.setPickedUpCount(fresh.getPickedUpCount());
            customer.setReputation(fresh.getReputation());
            customer.setVersion(fresh.getVersion());
            log.debug("‚úÖ –°—á—ë—Ç—á–∏–∫ –∑–∞–±—Ä–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è customerId={}", customer.getId());
        } else {
            log.debug("‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –¥–ª—è customerId={}", customer.getId());
            customer.setPickedUpCount(customer.getPickedUpCount() + 1);
            customer.recalculateReputation();
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
            Customer saved = customerRepository.save(customer);
            customer.setVersion(saved.getVersion());
        }
        return customer;
    }

    /**
     * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public Customer incrementReturned(Customer customer) {
        if (customer == null) {
            return null;
        }
        log.debug("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –¥–ª—è customerId={}", customer.getId());
        int updated = customerRepository.incrementReturnedCount(customer.getId(), customer.getVersion());
        if (updated == 0) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç—ã –¥–ª—è customerId={}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º", customer.getId());
            Customer fresh = customerRepository.findById(customer.getId())
                    .orElseThrow(() -> new IllegalStateException("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            fresh.setReturnedCount(fresh.getReturnedCount() + 1);
            fresh.recalculateReputation();
            customerRepository.save(fresh);
            customer.setReturnedCount(fresh.getReturnedCount());
            customer.setReputation(fresh.getReputation());
            customer.setVersion(fresh.getVersion());
            log.debug("‚úÖ –°—á—ë—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è customerId={}", customer.getId());
        } else {
            log.debug("‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–ª—è customerId={}", customer.getId());
            customer.setReturnedCount(customer.getReturnedCount() + 1);
            customer.recalculateReputation();
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            Customer saved = customerRepository.save(customer);
            customer.setVersion(saved.getVersion());
        }
        return customer;
    }
}
