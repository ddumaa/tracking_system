package com.project.tracking_system.service.customer;

import com.project.tracking_system.entity.*;
import com.project.tracking_system.mapper.BuyerStatusMapper;
import com.project.tracking_system.repository.CustomerNotificationLogRepository;
import com.project.tracking_system.repository.CustomerRepository;
import com.project.tracking_system.repository.TrackParcelRepository;
import com.project.tracking_system.service.telegram.TelegramNotificationService;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.List;
import com.project.tracking_system.utils.PhoneUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * –°–µ—Ä–≤–∏—Å –ø—Ä–∏–≤—è–∑–∫–∏ Telegram-—á–∞—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CustomerTelegramService {

    private final CustomerRepository customerRepository;
    private final CustomerService customerService;
    private final TrackParcelRepository trackParcelRepository;
    private final CustomerNotificationLogRepository notificationLogRepository;
    private final TelegramNotificationService telegramNotificationService;

    /**
     * –ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç Telegram –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     * <p>
     * –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è –¥–æ —Ñ–æ—Ä–º–∞—Ç–∞ 375XXXXXXXXX. –ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Å
     * —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞, —á–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.
     * –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π.
     * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
     * </p>
     *
     * @param phone  –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    @Transactional
    public Customer linkTelegramToCustomer(String phone, Long chatId) {
        String normalized = PhoneUtils.normalizePhone(phone);
        log.info("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} –∫ —á–∞—Ç—É {}", normalized, chatId);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        Customer customer = customerService.registerOrGetByPhone(normalized);

        // –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
        if (customer.getTelegramChatId() != null) {
            log.warn("‚ö†Ô∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç—É {}", customer.getId(), customer.getTelegramChatId());
            return customer;
        }

        customer.setTelegramChatId(chatId);
        Customer saved = customerRepository.save(customer);
        log.info("‚úÖ –ß–∞—Ç {} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é {}", chatId, saved.getId());
        return saved;
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≤—è–∑–∫–µ Telegram.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     */
    @Transactional
    public Customer confirmTelegram(Customer customer) {
        if (customer == null) {
            throw new IllegalArgumentException("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–Ω");
        }
        if (!customer.isTelegramConfirmed()) {
            customer.setTelegramConfirmed(true);
            customer = customerRepository.save(customer);
            log.info("‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª Telegram", customer.getId());
        }
        return customer;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram.
     * <p>
     * –ú–µ—Ç–æ–¥ –∏—â–µ—Ç –≤—Å–µ –ø–æ—Å—ã–ª–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
     * —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—â—ë –Ω–µ
     * –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.
     * </p>
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–π Telegram
     */
    @Transactional
    public void notifyActualStatuses(Customer customer) {
        if (customer == null || customer.getTelegramChatId() == null) {
            return;
        }

        List<TrackParcel> parcels = trackParcelRepository.findActiveByCustomerId(
                customer.getId(),
                List.of(GlobalStatus.DELIVERED, GlobalStatus.RETURNED)
        );

        for (TrackParcel parcel : parcels) {
            GlobalStatus status = parcel.getStatus();

            if (notificationLogRepository.existsByParcelIdAndStatusAndNotificationType(
                    parcel.getId(), status, NotificationType.INSTANT)) {
                continue;
            }

            BuyerStatus buyerStatus = BuyerStatusMapper.map(status);
            if (buyerStatus == null) {
                continue; // —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
            }

            telegramNotificationService.sendStatusUpdate(parcel, status);

            CustomerNotificationLog logEntry = new CustomerNotificationLog();
            logEntry.setCustomer(customer);
            logEntry.setParcel(parcel);
            logEntry.setStatus(status);
            logEntry.setNotificationType(NotificationType.INSTANT);
            logEntry.setSentAt(ZonedDateTime.now(ZoneOffset.UTC));
            notificationLogRepository.save(logEntry);
        }
    }

}