package com.project.tracking_system.service.customer;

import com.project.tracking_system.entity.*;
import com.project.tracking_system.mapper.BuyerStatusMapper;
import com.project.tracking_system.repository.CustomerNotificationLogRepository;
import com.project.tracking_system.repository.CustomerRepository;
import com.project.tracking_system.repository.CustomerTelegramLinkRepository;
import com.project.tracking_system.repository.TrackParcelRepository;
import com.project.tracking_system.service.telegram.TelegramNotificationService;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Optional;

import com.project.tracking_system.utils.PhoneUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * –°–µ—Ä–≤–∏—Å –ø—Ä–∏–≤—è–∑–∫–∏ Telegram-—á–∞—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CustomerTelegramService {

    private final CustomerRepository customerRepository;
    private final CustomerTelegramLinkRepository linkRepository;
    private final CustomerService customerService;
    private final TrackParcelRepository trackParcelRepository;
    private final CustomerNotificationLogRepository notificationLogRepository;
    private final TelegramNotificationService telegramNotificationService;

    /**
     * –ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç Telegram –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     * <p>
     * –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è –¥–æ —Ñ–æ—Ä–º–∞—Ç–∞ 375XXXXXXXXX. –ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Å
     * —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞, —á–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.
     * –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π.
     * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
     * </p>
     *
     * @param phone  –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return —Å–æ–∑–¥–∞–Ω–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ Telegram
     */
    @Transactional
    public CustomerTelegramLink linkTelegramToCustomer(String phone, Long chatId) {
        String normalized = PhoneUtils.normalizePhone(phone);
        log.info("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} –∫ —á–∞—Ç—É {}", normalized, chatId);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        Customer customer = customerService.registerOrGetByPhone(normalized);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏–≤—è–∑–∫—É
        Optional<CustomerTelegramLink> existing = linkRepository.findByTelegramChatId(chatId);
        if (existing.isPresent()) {
            log.warn("‚ö†Ô∏è –ß–∞—Ç {} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é {}", chatId, existing.get().getCustomer().getId());
            return existing.get();
        }

        CustomerTelegramLink link = new CustomerTelegramLink();
        link.setCustomer(customer);
        link.setTelegramChatId(chatId);
        link.setLinkedAt(ZonedDateTime.now(ZoneOffset.UTC));
        CustomerTelegramLink saved = linkRepository.save(link);
        log.info("‚úÖ –ß–∞—Ç {} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é {}", chatId, customer.getId());
        return saved;
    }

    /**
     * –ù–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É Telegram-—á–∞—Ç–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     * @return –Ω–∞–π–¥–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∏–ª–∏ {@link java.util.Optional#empty()}
     */
    @Transactional(readOnly = true)
    public Optional<CustomerTelegramLink> findByChatId(Long chatId) {
        if (chatId == null) {
            return Optional.empty();
        }
        return linkRepository.findByTelegramChatId(chatId);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≤—è–∑–∫–µ Telegram.
     *
     * @param link –ø—Ä–∏–≤—è–∑–∫–∞ Telegram
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞
     */
    @Transactional
    public CustomerTelegramLink confirmTelegram(CustomerTelegramLink link) {
        if (link == null) {
            throw new IllegalArgumentException("–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞");
        }
        if (!link.isTelegramConfirmed()) {
            link.setTelegramConfirmed(true);
            link = linkRepository.save(link);
            log.info("‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª Telegram", link.getCustomer().getId());
        }
        return link;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram.
     * <p>
     * –ú–µ—Ç–æ–¥ –∏—â–µ—Ç –≤—Å–µ –ø–æ—Å—ã–ª–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
     * —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—â—ë –Ω–µ
     * –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.
     * </p>
     *
     * @param link –ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∫ Telegram
     */
    @Transactional
    public void notifyActualStatuses(CustomerTelegramLink link) {
        if (link == null || link.getTelegramChatId() == null) {
            return;
        }

        Customer customer = link.getCustomer();

        List<TrackParcel> parcels = trackParcelRepository.findActiveByCustomerId(
                customer.getId(),
                List.of(GlobalStatus.DELIVERED, GlobalStatus.RETURNED)
        );

        for (TrackParcel parcel : parcels) {
            GlobalStatus status = parcel.getStatus();

            if (notificationLogRepository.existsByParcelIdAndStatusAndNotificationType(
                    parcel.getId(), status, NotificationType.INSTANT)) {
                continue;
            }

            BuyerStatus buyerStatus = BuyerStatusMapper.map(status);
            if (buyerStatus == null) {
                continue; // —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
            }

            telegramNotificationService.sendStatusUpdate(parcel, status);

            CustomerNotificationLog logEntry = new CustomerNotificationLog();
            logEntry.setCustomer(customer);
            logEntry.setParcel(parcel);
            logEntry.setStatus(status);
            logEntry.setNotificationType(NotificationType.INSTANT);
            logEntry.setSentAt(ZonedDateTime.now(ZoneOffset.UTC));
            notificationLogRepository.save(logEntry);
        }
    }

    /**
     * –û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram-—á–∞—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
     */
    @Transactional
    public boolean disableNotifications(Long chatId) {
        if (chatId == null) {
            return false;
        }

        return linkRepository.findByTelegramChatId(chatId)
                .filter(CustomerTelegramLink::isNotificationsEnabled)
                .map(link -> {
                    link.setNotificationsEnabled(false);
                    linkRepository.save(link);
                    log.info("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {}", link.getCustomer().getId());
                    return true;
                })
                .orElse(false);
    }

    /**
     * –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram-—á–∞—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
     */
    @Transactional
    public boolean enableNotifications(Long chatId) {
        if (chatId == null) {
            return false;
        }

        return linkRepository.findByTelegramChatId(chatId)
                .filter(link -> !link.isNotificationsEnabled())
                .map(link -> {
                    link.setNotificationsEnabled(true);
                    linkRepository.save(link);
                    log.info("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {}", link.getCustomer().getId());
                    return true;
                })
                .orElse(false);
    }

}