package com.project.tracking_system.service.customer;

import com.project.tracking_system.dto.TelegramParcelInfoDTO;
import com.project.tracking_system.dto.TelegramParcelsOverviewDTO;
import com.project.tracking_system.entity.*;
import com.project.tracking_system.mapper.BuyerStatusMapper;
import com.project.tracking_system.repository.CustomerNotificationLogRepository;
import com.project.tracking_system.repository.CustomerRepository;
import com.project.tracking_system.repository.TrackParcelRepository;
import com.project.tracking_system.service.telegram.FullNameValidator;
import com.project.tracking_system.service.telegram.TelegramNotificationService;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import com.project.tracking_system.dto.CustomerStatisticsDTO;

import com.project.tracking_system.utils.PhoneUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

/**
 * –°–µ—Ä–≤–∏—Å –ø—Ä–∏–≤—è–∑–∫–∏ Telegram-—á–∞—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CustomerTelegramService {

    private final CustomerRepository customerRepository;
    private final CustomerService customerService;
    private final TrackParcelRepository trackParcelRepository;
    private final CustomerNotificationLogRepository notificationLogRepository;
    private final TelegramNotificationService telegramNotificationService;
    private final FullNameValidator fullNameValidator;

    /**
     * –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ Telegram.
     * <p>
     * ¬´–ü–æ–ª—É—á–µ–Ω–æ¬ª –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏, ¬´–û–∂–∏–¥–∞–µ—Ç –∑–∞–±–æ—Ä–∞¬ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞,
     * –≤–∫–ª—é—á–∞—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∞ ¬´–í –ø—É—Ç–∏¬ª —Å–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç
     * –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è.
     * </p>
     */
    private static final List<GlobalStatus> DELIVERED_STATUSES = List.of(GlobalStatus.DELIVERED);
    private static final List<GlobalStatus> WAITING_STATUSES = List.of(
            GlobalStatus.WAITING_FOR_CUSTOMER,
            GlobalStatus.CUSTOMER_NOT_PICKING_UP
    );
    private static final List<GlobalStatus> IN_TRANSIT_STATUSES = List.of(
            GlobalStatus.PRE_REGISTERED,
            GlobalStatus.REGISTERED,
            GlobalStatus.IN_TRANSIT,
            GlobalStatus.WAITING_FOR_CUSTOMER,
            GlobalStatus.CUSTOMER_NOT_PICKING_UP
    );

    /**
     * –ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç Telegram –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     * <p>
     * –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è –¥–æ —Ñ–æ—Ä–º–∞—Ç–∞ 375XXXXXXXXX. –ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Å
     * —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞, —á–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.
     * –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π.
     * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
     * </p>
     *
     * @param phone  –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    @Transactional
    public Customer linkTelegramToCustomer(String phone, Long chatId) {
        String normalized = PhoneUtils.normalizePhone(phone);
        String maskedPhone = PhoneUtils.maskPhone(normalized);
        log.info("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} –∫ —á–∞—Ç—É {}",
                maskedPhone, chatId);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        Customer customer;
        try {
            customer = customerService.registerOrGetByPhone(normalized);
        } catch (ResponseStatusException ex) {
            // –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–¥–æ–º 400
            log.warn("–¢–µ–ª–µ—Ñ–æ–Ω {} –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É: {}",
                    maskedPhone, ex.getReason());
            throw ex;
        }

        // –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
        if (customer.getTelegramChatId() != null) {
            log.warn("‚ö†Ô∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç—É {}", customer.getId(), customer.getTelegramChatId());
            return customer;
        }

        customer.setTelegramChatId(chatId);
        Customer saved = customerRepository.save(customer);
        log.info("‚úÖ –ß–∞—Ç {} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é {}", chatId, saved.getId());
        return saved;
    }

    /**
     * –ù–∞–π—Ç–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É Telegram-—á–∞—Ç–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     * @return –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∏–ª–∏ {@link java.util.Optional#empty()}
     */
    @Transactional(readOnly = true)
    public Optional<Customer> findByChatId(Long chatId) {
        if (chatId == null) {
            return Optional.empty();
        }
        return customerRepository.findByTelegramChatId(chatId);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≤—è–∑–∫–µ Telegram.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     */
    @Transactional
    public Customer confirmTelegram(Customer customer) {
        if (customer == null) {
            throw new IllegalArgumentException("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–Ω");
        }
        if (!customer.isTelegramConfirmed()) {
            customer.setTelegramConfirmed(true);
            customer = customerRepository.save(customer);
            log.info("‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å {} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª Telegram", customer.getId());
        }
        return customer;
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —á–∞—Ç–∞.
     * <p>–ò–º—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.</p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return {@code true}, –µ—Å–ª–∏ –∏–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
     */
    @Transactional
    public boolean confirmName(Long chatId) {
        return customerRepository.findByTelegramChatId(chatId)
                .map(c -> {
                    String fullName = c.getFullName();
                    if (fullName == null || fullName.isBlank()) {
                        return false;
                    }
                    FullNameValidator.FullNameValidationResult validation = fullNameValidator.validate(fullName);
                    if (!validation.valid()) {
                        if (c.getNameSource() == NameSource.USER_CONFIRMED) {
                            c.setNameSource(NameSource.MERCHANT_PROVIDED);
                            c.setNameUpdatedAt(ZonedDateTime.now(ZoneOffset.UTC));
                            customerRepository.save(c);
                        }
                        return false;
                    }
                    if (c.getNameSource() != NameSource.USER_CONFIRMED) {
                        c.setNameSource(NameSource.USER_CONFIRMED);
                        c.setNameUpdatedAt(ZonedDateTime.now(ZoneOffset.UTC));
                        customerRepository.save(c);
                    }
                    return true;
                })
                .orElse(false);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤ Telegram.
     *
     * @param chatId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param fullName –Ω–æ–≤–æ–µ –§–ò–û
     * @return {@code true}, –µ—Å–ª–∏ –∏–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
     */
    @Transactional
    public boolean updateNameFromTelegram(Long chatId, String fullName) {
        return customerRepository.findByTelegramChatId(chatId)
                .map(c -> customerService.updateCustomerName(c, fullName, NameSource.USER_CONFIRMED))
                .orElse(false);
    }

    /**
     * –ü–æ–º–µ—Ç–∏—Ç—å –∏–º—è –∫–∞–∫ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ –º–∞–≥–∞–∑–∏–Ω–æ–º.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    @Transactional
    public void markNameUnconfirmed(Long chatId) {
        customerRepository.findByTelegramChatId(chatId)
                .ifPresent(c -> {
                    c.setNameSource(NameSource.MERCHANT_PROVIDED);
                    c.setNameUpdatedAt(ZonedDateTime.now(ZoneOffset.UTC));
                    customerRepository.save(c);
                });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram.
     * <p>
     * –ú–µ—Ç–æ–¥ –∏—â–µ—Ç –≤—Å–µ –ø–æ—Å—ã–ª–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
     * —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—â—ë –Ω–µ
     * –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.
     * </p>
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–π Telegram
     */
    @Transactional
    public void notifyActualStatuses(Customer customer) {
        if (customer == null || customer.getTelegramChatId() == null) {
            return;
        }

        List<TrackParcel> parcels = trackParcelRepository.findActiveByCustomerId(
                customer.getId(),
                List.of(GlobalStatus.DELIVERED, GlobalStatus.RETURNED)
        );

        for (TrackParcel parcel : parcels) {
            GlobalStatus status = parcel.getStatus();

            if (notificationLogRepository.existsByParcelIdAndStatusAndNotificationType(
                    parcel.getId(), status, NotificationType.INSTANT)) {
                continue;
            }

            BuyerStatus buyerStatus = BuyerStatusMapper.map(status);
            if (buyerStatus == null) {
                continue; // —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
            }

            boolean sent = telegramNotificationService.sendStatusUpdate(parcel, status);
            if (!sent) {
                log.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—ã–ª–∫–∏ {} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω–∞",
                        parcel.getNumber(), status);
                continue;
            }

            CustomerNotificationLog logEntry = new CustomerNotificationLog();
            logEntry.setCustomer(customer);
            logEntry.setParcel(parcel);
            logEntry.setStatus(status);
            logEntry.setNotificationType(NotificationType.INSTANT);
            logEntry.setSentAt(ZonedDateTime.now(ZoneOffset.UTC));
            notificationLogRepository.save(logEntry);
        }
    }

    /**
     * –û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram-—á–∞—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
     */
    @Transactional
    public boolean disableNotifications(Long chatId) {
        if (chatId == null) {
            return false;
        }

        return customerRepository.findByTelegramChatId(chatId)
                .filter(Customer::isNotificationsEnabled)
                .map(customer -> {
                    customer.setNotificationsEnabled(false);
                    customerRepository.save(customer);
                    log.info("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {}", customer.getId());
                    return true;
                })
                .orElse(false);
    }

    /**
     * –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram-—á–∞—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
     */
    @Transactional
    public boolean enableNotifications(Long chatId) {
        if (chatId == null) {
            return false;
        }

        return customerRepository.findByTelegramChatId(chatId)
                .filter(c -> !c.isNotificationsEnabled())
                .map(customer -> {
                    customer.setNotificationsEnabled(true);
                    customerRepository.save(customer);
                    log.info("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {}", customer.getId());
                    return true;
                })
                .orElse(false);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É Telegram-—á–∞—Ç–∞.
     * <p>
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±—Ä–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫,
     * —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤, –≥–¥–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã, –∏ –µ–≥–æ —Ä–µ–ø—É—Ç–∞—Ü–∏—é.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    @Transactional(readOnly = true)
    public Optional<CustomerStatisticsDTO> getStatistics(Long chatId) {
        return customerRepository.findByTelegramChatId(chatId)
                .map(customer -> {
                    List<String> stores = trackParcelRepository.findDistinctStoreNamesByCustomerId(customer.getId());
                    return new CustomerStatisticsDTO(
                            customer.getPickedUpCount(),
                            customer.getReturnedCount(),
                            stores,
                            customer.getReputation()
                    );
                });
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ—Å—ã–ª–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
     * <p>
     * –ú–µ—Ç–æ–¥ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ—Å—ã–ª–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å—Ç–∞—Ç—É—Å–∞–º, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å
     * –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏¬ª. –ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
     * {@link Optional#empty()}.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ—Å—ã–ª–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     */
    @Transactional(readOnly = true)
    public Optional<TelegramParcelsOverviewDTO> getParcelsOverview(Long chatId) {
        if (chatId == null) {
            return Optional.empty();
        }

        return customerRepository.findByTelegramChatId(chatId)
                .map(customer -> {
                    Long customerId = customer.getId();
                    List<TelegramParcelInfoDTO> delivered = loadParcelsForStatuses(customerId, DELIVERED_STATUSES);
                    List<TelegramParcelInfoDTO> waiting = loadParcelsForStatuses(customerId, WAITING_STATUSES);
                    List<TelegramParcelInfoDTO> inTransit = loadParcelsForStatuses(customerId, IN_TRANSIT_STATUSES);
                    return new TelegramParcelsOverviewDTO(delivered, waiting, inTransit);
                });
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å—ã–ª–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Ö –¥–ª—è Telegram.
     * <p>
     * –ú–µ—Ç–æ–¥ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –µ–¥–∏–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è
     * –≤—ã–±–æ—Ä–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ DTO. –≠—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞
     * –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–µ –Ω–∞—Ä—É—à–∞—è –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.
     * </p>
     *
     * @param customerId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     * @param statuses   —Ü–µ–ª–µ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å—ã–ª–æ–∫
     * @return –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ DTO –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–æ—Ç–µ
     */
    private List<TelegramParcelInfoDTO> loadParcelsForStatuses(Long customerId, List<GlobalStatus> statuses) {
        List<TrackParcel> parcels = trackParcelRepository.findByCustomerIdAndStatusIn(customerId, statuses);
        return mapParcelsForTelegram(parcels);
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ—Å—ã–ª–æ–∫ –≤ DTO –¥–ª—è Telegram.
     * <p>
     * –ü–æ—Å—ã–ª–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ,
     * —á—Ç–æ–±—ã —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –ø–µ—Ä–≤—ã–º–∏. –î–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏
     * –Ω–∞–∑–≤–∞–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —á–∏—Ç–∞–µ–º—ã–µ –∑–∞–≥–ª—É—à–∫–∏.
     * </p>
     *
     * @param parcels –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ—Å—ã–ª–æ–∫
     * @return —Å–ø–∏—Å–æ–∫ DTO —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private List<TelegramParcelInfoDTO> mapParcelsForTelegram(List<TrackParcel> parcels) {
        if (parcels == null || parcels.isEmpty()) {
            return List.of();
        }

        return parcels.stream()
                .sorted(Comparator.comparing(
                        TrackParcel::getLastUpdate,
                        Comparator.nullsLast(Comparator.naturalOrder())
                ).reversed())
                .map(this::toTelegramParcelInfo)
                .collect(Collectors.toList());
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç DTO –¥–ª—è Telegram –∏–∑ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ—Å—ã–ª–∫–∏, –∑–∞–ø–æ–ª–Ω—è—è —á–∏—Ç–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     *
     * @param parcel –∏—Å—Ö–æ–¥–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å –ø–æ—Å—ã–ª–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @return DTO —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—è–º–∏
     */
    private TelegramParcelInfoDTO toTelegramParcelInfo(TrackParcel parcel) {
        if (parcel == null) {
            return new TelegramParcelInfoDTO("–ë–µ–∑ –Ω–æ–º–µ—Ä–∞", "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω");
        }

        String trackNumber = parcel.getNumber();
        if (trackNumber == null || trackNumber.isBlank()) {
            trackNumber = "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞";
        }

        String storeName = (parcel.getStore() != null && parcel.getStore().getName() != null)
                ? parcel.getStore().getName()
                : "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω";

        return new TelegramParcelInfoDTO(trackNumber, storeName);
    }

}
