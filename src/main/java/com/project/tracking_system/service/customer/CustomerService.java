package com.project.tracking_system.service.customer;

import com.project.tracking_system.entity.*;
import com.project.tracking_system.dto.CustomerInfoDTO;
import com.project.tracking_system.repository.CustomerRepository;
import com.project.tracking_system.repository.TrackParcelRepository;
import com.project.tracking_system.service.SubscriptionService;
import com.project.tracking_system.model.subscription.FeatureKey;
import com.project.tracking_system.utils.PhoneUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.concurrent.TimeUnit;

import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CustomerService {

    private final CustomerRepository customerRepository;
    private final TrackParcelRepository trackParcelRepository;
    private final CustomerTransactionalService transactionalService;
    private final CustomerStatsService customerStatsService;
    private final SubscriptionService subscriptionService;

    /**
     * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
     * <p>
     * –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö,
     * —á—Ç–æ –∏—Å–∫–ª—é—á–∞–µ—Ç –æ—à–∏–±–∫—É "current transaction is aborted" –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.
     * –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —á—Ç–µ–Ω–∏–π
     * –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏.
     * </p>
     *
     * @param rawPhone —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     * @return —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    public Customer registerOrGetByPhone(String rawPhone) {
        String phone = PhoneUtils.normalizePhone(rawPhone);
        log.info("üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {}", phone);
        // –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
        Optional<Customer> existing = transactionalService.findByPhone(phone);
        if (existing.isPresent()) {
            return existing.get();
        }

        Customer customer = new Customer();
        customer.setPhone(phone);
        try {
            Customer saved = transactionalService.saveCustomer(customer);
            log.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {}", phone);
            return saved;
        } catch (DataIntegrityViolationException e) {
            log.warn("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫", phone);
            // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –æ–∂–∏–¥–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            for (int attempt = 0; attempt < 3; attempt++) {
                Optional<Customer> byPhone = transactionalService.findByPhone(phone);
                if (byPhone.isPresent()) {
                    return byPhone.get();
                }
                try {
                    TimeUnit.MILLISECONDS.sleep(50);
                } catch (InterruptedException ignored) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
            throw new IllegalStateException("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
        }

    }

    /**
     * –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param track –ø–æ—Å—ã–ª–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
     */
    @Transactional
    public void updateStatsOnTrackAdd(TrackParcel track) {
        if (track == null || track.getCustomer() == null) {
            return;
        }
        log.debug("üìà [updateStatsOnTrackAdd] –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ID={} –ø–æ—Å—ã–ª–∫–∞ ID={}",
                track.getCustomer().getId(), track.getId());
        customerStatsService.incrementSent(track.getCustomer());
    }

    /**
     * –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –∑–∞–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ.
     *
     * @param track –ø–æ—Å—ã–ª–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
     */
    @Transactional
    public void updateStatsOnTrackDelivered(TrackParcel track) {
        if (track == null || track.getCustomer() == null) {
            return;
        }
        log.debug("üì¶ [updateStatsOnTrackDelivered] –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ID={} –ø–æ—Å—ã–ª–∫–∞ ID={}",
                track.getCustomer().getId(), track.getId());
        customerStatsService.incrementPickedUp(track.getCustomer());
    }

    /**
     * –û—Ç–∫–∞—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–∫–∏.
     *
     * @param track —É–¥–∞–ª—è–µ–º–∞—è –ø–æ—Å—ã–ª–∫–∞
     */
    @Transactional
    public void rollbackStatsOnTrackDelete(TrackParcel track) {
        if (track == null || track.getCustomer() == null) {
            return;
        }
        Customer customer = track.getCustomer();
        int beforeSent = customer.getSentCount();
        int beforePicked = customer.getPickedUpCount();
        if (customer.getSentCount() > 0) {
            customer.setSentCount(customer.getSentCount() - 1);
        }
        if (track.getStatus() != null && track.getStatus().isFinal() && customer.getPickedUpCount() > 0) {
            customer.setPickedUpCount(customer.getPickedUpCount() - 1);
        }
        customer.recalculateReputation();
        customerRepository.save(customer);
        log.debug("‚Ü©Ô∏è [rollbackStatsOnTrackDelete] ID={} sent: {} -> {}, picked: {} -> {}",
                customer.getId(), beforeSent, customer.getSentCount(), beforePicked, customer.getPickedUpCount());
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ—Å—ã–ª–∫–∏.
     *
     * @param parcelId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—ã–ª–∫–∏
     * @return DTO —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ –∏–ª–∏ {@code null}, –µ—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    @Transactional(readOnly = true)
    public CustomerInfoDTO getCustomerInfoByParcelId(Long parcelId) {
        return trackParcelRepository.findById(parcelId)
                .map(track -> {
                    log.debug("üîç –ù–∞–π–¥–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—å ID={} –¥–ª—è –ø–æ—Å—ã–ª–∫–∏ ID={}",
                            track.getCustomer() != null ? track.getCustomer().getId() : null,
                            parcelId);
                    return track.getCustomer();
                })
                .map(this::toInfoDto)
                .orElseGet(() -> {
                    log.debug("‚ÑπÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¥–ª—è –ø–æ—Å—ã–ª–∫–∏ ID={} –Ω–µ –Ω–∞–π–¥–µ–Ω", parcelId);
                    return null;
                });
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∫ –ø–æ—Å—ã–ª–∫–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
     *
     * @param parcelId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—ã–ª–∫–∏
     * @param rawPhone —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     * @return –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
     */
    @Transactional
    public CustomerInfoDTO assignCustomerToParcel(Long parcelId, String rawPhone) {
        log.debug("üîç –ü–æ–∏—Å–∫ –ø–æ—Å—ã–ª–∫–∏ ID={} –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", parcelId);
        TrackParcel parcel = trackParcelRepository.findById(parcelId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
        log.debug("üìû –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω {} –∫ –ø–æ—Å—ã–ª–∫–µ ID={}", rawPhone, parcelId);
        Customer newCustomer = registerOrGetByPhone(rawPhone);

        Customer current = parcel.getCustomer();
        // –ï—Å–ª–∏ –ø–æ—Å—ã–ª–∫–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —ç—Ç–æ–º—É –∂–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        if (current != null && current.getId().equals(newCustomer.getId())) {
            log.debug("‚ÑπÔ∏è –ü–æ—Å—ã–ª–∫–∞ ID={} —É–∂–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º ID={}", parcelId, newCustomer.getId());
            return toInfoDto(current);
        }

        // –ï—Å–ª–∏ –ø–æ—Å—ã–ª–∫–∞ –±—ã–ª–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞—Ä–æ–≥–æ
        if (current != null) {
            log.debug("üîÑ –ü–æ—Å—ã–ª–∫–∞ ID={} –±—ã–ª–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º ID={}. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", parcelId, current.getId());
            rollbackStatsOnTrackDelete(parcel);
        }

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        parcel.setCustomer(newCustomer);
        trackParcelRepository.save(parcel);

        log.debug("üì¶ –ü–æ—Å—ã–ª–∫–∞ ID={} –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é ID={}", parcelId, newCustomer.getId());

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        customerStatsService.incrementSent(newCustomer);
        log.debug("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ID={} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ—Å—ã–ª–∫–∏ ID={}", newCustomer.getId(), parcelId);
        return toInfoDto(newCustomer);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
     * <p>
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –µ—Å–ª–∏ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram-—á–∞—Ça,
     * –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ –∏–º–µ–µ—Ç —Ç–∞—Ä–∏—Ñ, –¥–æ–ø—É—Å–∫–∞—é—â–∏–π –æ—Ç–ø—Ä–∞–≤–∫—É
     * Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
     * </p>
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
     * @param store    –º–∞–≥–∞–∑–∏–Ω
     * @return {@code true}, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
     */
    public boolean isNotifiable(Customer customer, Store store) {
        if (customer == null || store == null) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (customer.getTelegramChatId() == null || !customer.isNotificationsEnabled()) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–¥–ø–∏—Å–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        Long ownerId = Optional.ofNullable(store.getOwner())
                .map(User::getId)
                .orElse(null);

        return ownerId != null && subscriptionService.isFeatureEnabled(ownerId, FeatureKey.TELEGRAM_NOTIFICATIONS);
    }

    private CustomerInfoDTO toInfoDto(Customer customer) {
        if (customer == null) {
            return null;
        }
        double percentage = customer.getSentCount() > 0
                ? (double) customer.getPickedUpCount() / customer.getSentCount() * 100
                : 0.0;
        return new CustomerInfoDTO(
                customer.getPhone(),
                customer.getSentCount(),
                customer.getPickedUpCount(),
                customer.getReturnedCount(),
                Math.round(percentage * 100.0) / 100.0,
                customer.getReputation()
        );
    }
}
