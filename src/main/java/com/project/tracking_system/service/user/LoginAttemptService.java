package com.project.tracking_system.service.user;

import com.project.tracking_system.entity.LoginAttempt;
import com.project.tracking_system.entity.User;
import com.project.tracking_system.repository.LoginAttemptRepository;
import com.project.tracking_system.repository.UserRepository;
import com.project.tracking_system.utils.EmailUtils;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.
 * <p>
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É, –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏
 * –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ø—ã—Ç–æ–∫ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ.
 * </p>
 *
 * @author –î–º–∏—Ç—Ä–∏–π –ê–Ω–∏—Å–∏–º–æ–≤
 * @date –î–æ–±–∞–≤–ª–µ–Ω–Ω–æ 07.01.2025
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class LoginAttemptService {

    private static final int MAX_ATTEMPTS = 4;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
    private static final long LOCK_TIME_DURATION = 1;  // –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —á–∞—Å–∞—Ö
    private static final long IP_BLOCK_TIME_MINUTES = 10; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –Ω–∞ 10 –º–∏–Ω—É—Ç

    private final UserRepository userRepository;  // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    private final LoginAttemptRepository loginAttemptRepository;  // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤—Ö–æ–¥–∞

    private final Map<String, Integer> ipAttempts = new ConcurrentHashMap<>();
    private final Map<String, ZonedDateTime> blockedIPs = new ConcurrentHashMap<>();

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ.
     * <p>
     * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ–≥–æ —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ 0.
     * </p>
     *
     * @param email –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void loginSucceeded(String email, String ip) {
        Optional<User> userOptional = userRepository.findByEmail(email);

        if (userOptional.isPresent()) {
            User user = userOptional.get();
            LoginAttempt loginAttempt = user.getLoginAttempt();

            if (loginAttempt != null) {
                loginAttempt.setAttempts(0);
                loginAttemptRepository.save(loginAttempt);
            }
        }
        ipAttempts.remove(ip);
        blockedIPs.remove(ip);

        log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª. IP {} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", EmailUtils.maskEmail(email), ip);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ IP-–∞–¥—Ä–µ—Å –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —á–∏—Å–ª–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞.
     *
     * @param ip IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ IP –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, –∏–Ω–∞—á–µ {@code false}
     */
    public boolean isIPBlocked(String ip) {
        if (blockedIPs.containsKey(ip)) {

            if (ZonedDateTime.now(ZoneOffset.UTC).isAfter(blockedIPs.get(ip))) {
                blockedIPs.remove(ip);
                ipAttempts.remove(ip);
                return false;
            }
            return true;
        }
        return false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.
     * <p>
     * –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è {@code true}, –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
     * –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.
     * </p>
     *
     * @param email –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ {@code false}
     */
    public boolean isEmailBlocked(String email) {
        Optional<User> userOptional = userRepository.findByEmail(email);

        if (userOptional.isPresent()) {
            User user = userOptional.get();
            LoginAttempt loginAttempt = user.getLoginAttempt();

            if (loginAttempt != null && loginAttempt.getAttempts() >= MAX_ATTEMPTS) {
                ZonedDateTime lastModified = loginAttempt.getLastModified();

                if (lastModified == null) { // –ó–∞—â–∏—Ç–∞ –æ—Ç NPE
                    return false; // –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç
                }

                ZonedDateTime zonedDateTime = lastModified.plusHours(LOCK_TIME_DURATION);
                if (zonedDateTime.isAfter(ZonedDateTime.now(ZoneOffset.UTC))) {
                    return true;
                } else {
                    loginAttempt.setAttempts(0);
                    loginAttempt.setLastModified(ZonedDateTime.now(ZoneOffset.UTC));
                    loginAttemptRepository.save(loginAttempt);
                }
            }
        }
        return false;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞.
     * <p>
     * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å—á—ë—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π
     * –ø–æ–ø—ã—Ç–∫–∏.
     * </p>
     *
     * @param email –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void loginFailed(String email, String ip) {
        Optional<User> userOptional = userRepository.findByEmail(email);

        if (userOptional.isPresent()) {
            User user = userOptional.get();
            LoginAttempt loginAttempt = user.getLoginAttempt();

            if (loginAttempt == null) {
                loginAttempt = new LoginAttempt();
                loginAttempt.setUser(user);
                loginAttempt.setLastModified(ZonedDateTime.now(ZoneOffset.UTC)); // üõ† –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                user.setLoginAttempt(loginAttempt);
            }

            loginAttempt.setAttempts(loginAttempt.getAttempts() + 1);
            loginAttempt.setLastModified(ZonedDateTime.now(ZoneOffset.UTC)); // üõ† –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø—Ä–æ–≤–∞–ª–µ
            loginAttemptRepository.save(loginAttempt);
        }

        int attempts = ipAttempts.getOrDefault(ip, 0) + 1;
        ipAttempts.put(ip, attempts);

        if (attempts >= MAX_ATTEMPTS) {
            blockedIPs.put(ip, ZonedDateTime.now(ZoneOffset.UTC).plusMinutes(IP_BLOCK_TIME_MINUTES));
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≤—Ö–æ–¥–∞.
     * <p>
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.
     * </p>
     *
     * @param email –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
     */
    @Transactional(readOnly = true)
    public int getRemainingAttempts(String email) {
        Optional<User> userOptional = userRepository.findByEmail(email);

        if (userOptional.isPresent()) {
            User user = userOptional.get();
            LoginAttempt loginAttempt = user.getLoginAttempt();

            if (loginAttempt != null) {
                return MAX_ATTEMPTS - loginAttempt.getAttempts();
            }
        }
        return MAX_ATTEMPTS;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ø—ã—Ç–æ–∫.
     * <p>
     * –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
     * </p>
     *
     * @param email –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ {@code null}
     */
    @Transactional(readOnly = true)
    public ZonedDateTime getUnlockTime(String email) {
        Optional<User> userOptional = userRepository.findByEmail(email);

        if (userOptional.isPresent()) {
            User user = userOptional.get();
            LoginAttempt loginAttempt = user.getLoginAttempt();

            if (loginAttempt != null && loginAttempt.getAttempts() >= MAX_ATTEMPTS) {
                return loginAttempt.getLastModified().plusHours(LOCK_TIME_DURATION);
            }
        }
        return null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ IP –∏ email, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
     *
     * @param request  HTTP-–∑–∞–ø—Ä–æ—Å
     * @param response HTTP-–æ—Ç–≤–µ—Ç
     * @param email    email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å {@code null})
     * @param ip       IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
     */
    public boolean checkAndRedirect(HttpServletRequest request, HttpServletResponse response,
                                    String email, String ip) throws IOException {
        if (isIPBlocked(ip)) {
            log.warn("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ IP: {} (–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)", ip);
            response.sendRedirect("/login?blockedIP=true");
            return true;
        }

        if (email != null && isEmailBlocked(email)) {
            log.warn("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ email: {} (–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)", EmailUtils.maskEmail(email));
            response.sendRedirect("/login?blocked=true");
            return true;
        }

        return false;
    }

}