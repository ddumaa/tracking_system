package com.project.tracking_system.service.store;

import com.project.tracking_system.controller.WebSocketController;
import com.project.tracking_system.entity.Store;
import com.project.tracking_system.entity.SubscriptionPlan;
import com.project.tracking_system.entity.User;
import com.project.tracking_system.entity.UserSubscription;
import com.project.tracking_system.repository.StoreRepository;
import com.project.tracking_system.repository.AnalyticsRepository;
import com.project.tracking_system.repository.TrackParcelRepository;
import com.project.tracking_system.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * @author Dmitriy Anisimov
 * @date 11.03.2025
 */
@Slf4j
@RequiredArgsConstructor
@Service
public class StoreService {

    private final StoreRepository storeRepository;
    private final UserRepository userRepository;
    private final AnalyticsRepository analyticsRepository;
    private final TrackParcelRepository trackParcelRepository;
    private final WebSocketController webSocketController;

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    public List<Store> getUserStores(Long userId) {
        return storeRepository.findByOwnerId(userId);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    public List<Long> getUserStoreIds(Long userId) {
        return storeRepository.findStoreIdsByOwnerId(userId);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω.
     */
    @Transactional
    public Store createStore(Long userId, String storeName) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        int userStoreCount = storeRepository.countByOwnerId(userId);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        SubscriptionPlan subscriptionPlan = Optional.ofNullable(user.getSubscription())
                .map(UserSubscription::getSubscriptionPlan)
                .orElseThrow(() -> new IllegalStateException("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"));

        int maxStores = subscriptionPlan.getMaxStores(); // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤

        if (userStoreCount >= maxStores) {
            String message = "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ (" + maxStores + ")";
            webSocketController.sendUpdateStatus(userId, message, false);
            throw new IllegalStateException(message);
        }

        Store store = new Store();
        store.setName(storeName);
        store.setOwner(user);

        Store savedStore = storeRepository.save(store);
        webSocketController.sendUpdateStatus(userId, "–ú–∞–≥–∞–∑–∏–Ω '" + storeName + "' –¥–æ–±–∞–≤–ª–µ–Ω!", true);

        return savedStore;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞.
     *
     * @param storeId ID –º–∞–≥–∞–∑–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å.
     * @param userId  ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
     */
    @Transactional
    public Store updateStore(Long storeId, Long userId, String newName) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        checkStoreOwnership(storeId, userId);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
        Store store = storeRepository.findById(storeId)
                .orElseThrow(() -> new IllegalArgumentException("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        log.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {} (ID={}) –Ω–∞ '{}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID={}",
                store.getName(), storeId, newName, userId);

        store.setName(newName);
        Store updatedStore = storeRepository.save(store);

        webSocketController.sendUpdateStatus(userId, "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '" + newName + "'", true);

        return updatedStore;
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –º–∞–≥–∞–∑–∏–Ω, –≤–∫–ª—é—á–∞—è –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
     *
     * @param storeId ID –º–∞–≥–∞–∑–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
     * @param userId  ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ.
     */
    @Transactional
    public void deleteStore(Long storeId, Long userId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        checkStoreOwnership(storeId, userId);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
        Store store = storeRepository.findById(storeId)
                .orElseThrow(() -> new IllegalArgumentException("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        log.info("–£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {} (ID={}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID={}", store.getName(), storeId, userId);

        // –£–¥–∞–ª—è–µ–º –ø–æ—Å—ã–ª–∫–∏
        trackParcelRepository.deleteByStoreId(storeId);
        log.info("–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø–æ—Å—ã–ª–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ID={}", storeId);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞
        analyticsRepository.findByStoreId(storeId)
                .ifPresent(storeStatistics -> {
                    analyticsRepository.delete(storeStatistics);
                    log.info("–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ID={}", storeId);
                });

        // –£–¥–∞–ª—è–µ–º —Å–∞–º –º–∞–≥–∞–∑–∏–Ω
        storeRepository.deleteById(storeId);
        log.info("–ú–∞–≥–∞–∑–∏–Ω ID={} —É–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID={}", storeId, userId);

        // üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        webSocketController.sendUpdateStatus(userId, "–ú–∞–≥–∞–∑–∏–Ω '" + store.getName() + "' —É–¥–∞–ª—ë–Ω!", true);

    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –º–∞–≥–∞–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç.
     */
    private void checkStoreOwnership(Long storeId, Long userId) {
        if (!userOwnsStore(storeId, userId)) {
            throw new SecurityException("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º");
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –º–∞–≥–∞–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     */
    public boolean userOwnsStore(Long storeId, Long userId) {
        return storeRepository.existsByIdAndOwnerId(storeId, userId);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional
    public void setDefaultStore(Long userId, Long storeId) {
        List<Store> userStores = storeRepository.findByOwnerId(userId);

        if (userStores.size() == 1) {
            throw new IllegalStateException("–£ –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–∞–≥–∞–∑–∏–Ω, –æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
        }

        Store selectedStore = userStores.stream()
                .filter(store -> store.getId().equals(storeId))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" —É –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStores.forEach(store -> store.setDefault(store.getId().equals(storeId)));

        storeRepository.saveAll(userStores);

        log.info("–ú–∞–≥–∞–∑–∏–Ω '{}' —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", selectedStore.getName(), userId);

        // üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        webSocketController.sendUpdateStatus(userId, "–ú–∞–≥–∞–∑–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: " + selectedStore.getName(), true);
    }


}