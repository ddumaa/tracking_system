package com.project.tracking_system.service.analytics;

import com.project.tracking_system.dto.DeliveryDates;
import com.project.tracking_system.dto.PostalServiceStatsDTO;
import com.project.tracking_system.dto.TrackInfoDTO;
import com.project.tracking_system.dto.TrackInfoListDTO;
import com.project.tracking_system.entity.*;
import com.project.tracking_system.repository.DeliveryHistoryRepository;
import com.project.tracking_system.repository.StoreAnalyticsRepository;
import com.project.tracking_system.repository.TrackParcelRepository;
import com.project.tracking_system.service.track.StatusTrackService;
import com.project.tracking_system.service.track.TypeDefinitionTrackPostService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;

/**
 * @author Dmitriy Anisimov
 * @date 15.03.2025
 */
@Slf4j
@RequiredArgsConstructor
@Service
public class DeliveryHistoryService {

    private final StoreAnalyticsRepository storeAnalyticsRepository;
    private final DeliveryHistoryRepository deliveryHistoryRepository;
    private final TypeDefinitionTrackPostService typeDefinitionTrackPostService;
    private final StatusTrackService statusTrackService;
    private final TrackParcelRepository trackParcelRepository;

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—ã–ª–∫–∏.
     */
    @Transactional
    public void updateDeliveryHistory(TrackParcel trackParcel, GlobalStatus oldStatus, GlobalStatus newStatus, TrackInfoListDTO trackInfoListDTO) {
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        DeliveryHistory history = deliveryHistoryRepository.findByTrackParcelId(trackParcel.getId())
                .orElseGet(() -> {
                    log.info("–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–µ–∫–∞ {}", trackParcel.getNumber());

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—á—Ç–æ–≤—É—é —Å–ª—É–∂–±—É
                    PostalServiceType serviceType = typeDefinitionTrackPostService.detectPostalService(trackParcel.getNumber());
                    return new DeliveryHistory(trackParcel, trackParcel.getStore(), serviceType, null, null, null);
                });

        //  –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ù–ï –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (oldStatus == null || !newStatus.equals(oldStatus)) {
            log.info("–ù–æ–≤—ã–π —Ç—Ä–µ–∫ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é...");
        } else {
            log.debug("–°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è {}", trackParcel.getNumber());
            return;
        }

        //  –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Ç—Ä–µ–∫–∞
        DeliveryDates deliveryDates = extractDatesFromTrackInfo(trackParcel, trackInfoListDTO);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        setHistoryDate("–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", history.getSendDate(), deliveryDates.sendDate(), history::setSendDate);

        if (newStatus == GlobalStatus.DELIVERED) {
            setHistoryDate("–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è", history.getReceivedDate(), deliveryDates.receivedDate(), history::setReceivedDate);
        }

        if (newStatus == GlobalStatus.RETURNED) {
            setHistoryDate("–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", history.getReturnedDate(), deliveryDates.returnedDate(), history::setReturnedDate);
        }

        if (newStatus == GlobalStatus.WAITING_FOR_CUSTOMER) {
            setHistoryDate(
                    "–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏", history.getArrivedDate(), deliveryDates.arrivedDate(), history::setArrivedDate
            );
        }

        // –°—á–∏—Ç–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
        if (newStatus == GlobalStatus.DELIVERED || newStatus == GlobalStatus.RETURNED) {
            registerFinalStatus(history, newStatus);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        deliveryHistoryRepository.save(history);
        log.info("–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {}", trackParcel.getNumber());
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤.
     */
    private DeliveryDates extractDatesFromTrackInfo(TrackParcel trackParcel, TrackInfoListDTO trackInfoListDTO) {
        List<TrackInfoDTO> trackInfoList = trackInfoListDTO.getList();

        if (trackInfoList.isEmpty()) {
            log.warn("‚ö† –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Ç—Ä–µ–∫–∞ {}", trackParcel.getNumber());
            return new DeliveryDates(null, null, null);
        }

        PostalServiceType serviceType = typeDefinitionTrackPostService.detectPostalService(trackParcel.getNumber());
        ZonedDateTime sendDate = null, receivedDate = null, returnedDate = null, arrivedDate = null;

        //  –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (serviceType == PostalServiceType.BELPOST) {
            sendDate = parseDate(trackInfoList.get(trackInfoList.size() - 1).getTimex()); // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        } else if (serviceType == PostalServiceType.EVROPOST && trackInfoList.size() > 1) {
            sendDate = parseDate(trackInfoList.get(trackInfoList.size() - 2).getTimex()); // –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        } else {
            log.info("–ï–≤—Ä–æ–ø–æ—á—Ç–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏. –¢—Ä–µ–∫: {}", trackParcel.getNumber());
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        TrackInfoDTO latestStatus = trackInfoList.get(0);
        GlobalStatus finalStatus = statusTrackService.setStatus(List.of(latestStatus));

        if (finalStatus == GlobalStatus.DELIVERED) {
            receivedDate = parseDate(latestStatus.getTimex());
        } else if (finalStatus == GlobalStatus.RETURNED) {
            returnedDate = parseDate(latestStatus.getTimex());
        }

        // –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—É—Å–∞ WAITING_FOR_CUSTOMER
        for (TrackInfoDTO info : trackInfoList) {
            GlobalStatus status = statusTrackService.setStatus(List.of(info));
            if (status == GlobalStatus.WAITING_FOR_CUSTOMER) {
                arrivedDate = parseDate(info.getTimex());
                break;
            }
        }

        return new DeliveryDates(sendDate, receivedDate, returnedDate, arrivedDate);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (DELIVERED –∏–ª–∏ RETURNED) –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞.
     *
     * <p>–ú–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–æ–≤ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫, –∞ —Ç–∞–∫–∂–µ
     * —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–±–æ—Ä–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
     * –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å—ã–ª–∫–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ —Ñ–ª–∞–≥ {@code includedInStatistics} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ {@code true}.</p>
     *
     * –£—Å–ª–æ–≤–∏—è –¥–ª—è —É—á—ë—Ç–∞:
     * - –°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º (DELIVERED –∏–ª–∏ RETURNED)
     * - –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞—Ç—ã (–æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
     * - –ü–æ—Å—ã–ª–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∂–µ —É—á—Ç–µ–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
     *
     * @param history –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –¥–∞—Ç—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param status  –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π –ø–æ—Å—ã–ª–∫–æ–π
     */
    @Transactional
    public void registerFinalStatus(DeliveryHistory history, GlobalStatus status) {
        TrackParcel trackParcel = history.getTrackParcel();

        if(trackParcel.isIncludedInStatistics()){
            log.debug("üì¶ –ü–æ—Å—ã–ª–∫–∞ {} —É–∂–µ —É—á—Ç–µ–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", trackParcel.getNumber());
            return;
        }

        Store store = history.getStore();
        StoreStatistics stats = storeAnalyticsRepository.findByStoreId(store.getId())
                .orElseThrow(() -> new IllegalStateException("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        if (status == GlobalStatus.DELIVERED && history.getSendDate() != null && history.getReceivedDate() != null) {
            long deliveryDays = ChronoUnit.HOURS.between(history.getSendDate(), history.getReceivedDate()) / 24;
            stats.setTotalDelivered(stats.getTotalDelivered() + 1);
            stats.setSumDeliveryDays(stats.getSumDeliveryDays().add(BigDecimal.valueOf(deliveryDays)));

            if (history.getArrivedDate() != null) {
                long pickupDays = ChronoUnit.HOURS.between(history.getArrivedDate(), history.getReceivedDate()) / 24;
                stats.setSumPickupDays(stats.getSumPickupDays().add(BigDecimal.valueOf(pickupDays)));
            }

        } else if (status == GlobalStatus.RETURNED && history.getArrivedDate() != null && history.getReturnedDate() != null) {
            long pickupDays = ChronoUnit.HOURS.between(history.getArrivedDate(), history.getReturnedDate()) / 24;
            stats.setTotalReturned(stats.getTotalReturned() + 1);
            stats.setSumPickupDays(stats.getSumPickupDays().add(BigDecimal.valueOf(pickupDays)));
        }

        stats.setUpdatedAt(ZonedDateTime.now());
        storeAnalyticsRepository.save(stats);

        trackParcel.setIncludedInStatistics(true);
        trackParcelRepository.save(trackParcel);

        log.info("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É: {}", store.getName());
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –ø–æ—Å—ã–ª–∫–∞ –µ—â—ë –Ω–µ –±—ã–ª–∞ —É—á—Ç–µ–Ω–∞.
     *
     * <p>–ï—Å–ª–∏ –ø–æ—Å—ã–ª–∫–∞ –Ω–µ –∏–º–µ–ª–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ –µ—â—ë –Ω–µ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Ä–∞—Å—á—ë—Ç—ã,
     * –º–µ—Ç–æ–¥ —É–º–µ–Ω—å—à–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ {@code totalSent} –≤ {@code StoreStatistics} –Ω–∞ 1.</p>
     *
     * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –∏—Å–∫–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –∏ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.
     *
     * @param parcel –æ–±—ä–µ–∫—Ç —É–¥–∞–ª—è–µ–º–æ–π –ø–æ—Å—ã–ª–∫–∏
     */
    @Transactional
    public void handleTrackParcelBeforeDelete(TrackParcel parcel) {
        if (parcel.isIncludedInStatistics()) {
            log.debug("–£–¥–∞–ª—è–µ—Ç—Å—è —É–∂–µ —É—á—Ç—ë–Ω–Ω–∞—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ—Å—ã–ª–∫–∞ {}, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ —Ç—Ä–æ–≥–∞–µ–º", parcel.getNumber());
            return;
        }

        Store store = parcel.getStore();
        StoreStatistics stats = storeAnalyticsRepository.findByStoreId(store.getId())
                .orElseThrow(() -> new IllegalStateException("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        if (stats.getTotalSent() > 0) {
            stats.setTotalSent(stats.getTotalSent() - 1);
            stats.setUpdatedAt(ZonedDateTime.now());
            storeAnalyticsRepository.save(stats);
            log.info("‚ûñ –£–º–µ–Ω—å—à–∏–ª–∏ totalSent –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—É—á—Ç—ë–Ω–Ω–æ–π –ø–æ—Å—ã–ª–∫–∏: {}", parcel.getNumber());
        } else {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —É–º–µ–Ω—å—à–∏—Ç—å totalSent, –Ω–æ –æ–Ω —É–∂–µ 0. –ü–æ—Å—ã–ª–∫–∞: {}", parcel.getNumber());
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–æ–≤—É—é –¥–∞—Ç—É –≤ `ZonedDateTime`
     */
    private ZonedDateTime parseDate(String dateString) {
        if (dateString == null || dateString.isEmpty()) {
            return null;
        }
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss");
            LocalDateTime localDateTime = LocalDateTime.parse(dateString, formatter);

            // –ó–∞–º–µ–Ω–∏—Ç—å Europe/Minsk –Ω–∞ userZone, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –≤ –±—É–¥—É—â–µ–º
            ZoneId inputZone = ZoneId.of("Europe/Minsk");
            return localDateTime.atZone(inputZone).withZoneSameInstant(ZoneOffset.UTC);
        } catch (DateTimeParseException e) {
            log.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {}", dateString, e);
            return null;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.
     */
    private void setHistoryDate(String logMessage, ZonedDateTime oldDate, ZonedDateTime newDate, Consumer<ZonedDateTime> setter) {
        if (newDate != null && !Objects.equals(oldDate, newDate)) {
            log.info("{}: {}", logMessage, newDate);
            setter.accept(newDate);
        }
    }

    public List<PostalServiceStatsDTO> getStatsByPostalService(Long storeId) {
        List<Object[]> rawData = deliveryHistoryRepository.getRawStatsByPostalService(storeId);
        return rawData.stream()
                .map(this::mapToDto)
                .toList();
    }

    public List<PostalServiceStatsDTO> getStatsByPostalServiceForStores(List<Long> storeIds) {
        List<Object[]> rawData = deliveryHistoryRepository.getRawStatsByPostalServiceForStores(storeIds);
        return rawData.stream()
                .map(this::mapToDto)
                .toList();
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î,
     * –≤ –æ–±—ä–µ–∫—Ç {@link PostalServiceStatsDTO} c –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ—á—Ç–æ–≤–æ–π —Å–ª—É–∂–±—ã.
     *
     * @param row –º–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π: [–∫–æ–¥–°–ª—É–∂–±—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ, —Å—Ä–µ–¥–Ω—è—è–î–æ—Å—Ç–∞–≤–∫–∞]
     * @return –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π DTO —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º –ø–æ—á—Ç–æ–≤–æ–π —Å–ª—É–∂–±—ã, —á–∏—Å–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã—Ö
     */
    private PostalServiceStatsDTO mapToDto(Object[] row) {
        String code = (String) row[0];
        PostalServiceType type = PostalServiceType.fromCode(code);
        String displayName = type.getDisplayName();

        int sent = row[1] != null ? ((Number) row[1]).intValue() : 0;
        int delivered = row[2] != null ? ((Number) row[2]).intValue() : 0;
        int returned = row[3] != null ? ((Number) row[3]).intValue() : 0;
        double avgDeliveryDays = row[4] != null ? ((Number) row[4]).doubleValue() : 0.0;
        double avgPickupTimeDays = row[5] != null ? ((Number) row[5]).doubleValue() : 0.0;

        return new PostalServiceStatsDTO(
                displayName,
                sent,
                delivered,
                returned,
                avgDeliveryDays,
                avgPickupTimeDays
        );
    }

}