package com.project.tracking_system.service.analytics;

import com.project.tracking_system.entity.Store;
import com.project.tracking_system.entity.StoreStatistics;
import com.project.tracking_system.repository.StoreAnalyticsRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Optional;

/**
 * @author Dmitriy Anisimov
 * @date 11.03.2025
 */
@Slf4j
@RequiredArgsConstructor
@Service
public class StoreAnalyticsService {

    private final StoreAnalyticsRepository storeAnalyticsRepository;

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    public List<StoreStatistics> getUserStatistics(Long userId) {
        log.info("üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);
        return storeAnalyticsRepository.findAllByUserId(userId);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É.
     */
    public Optional<StoreStatistics> getStoreStatistics(Long storeId) {
        log.info("üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞–≥–∞–∑–∏–Ω—É ID: {}", storeId);
        return storeAnalyticsRepository.findByStoreId(storeId);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ updatedAt (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –≤—Ä—É—á–Ω—É—é).
     */
    @Transactional
    public void updateStoreAnalytics(Long storeId) {
        log.info("‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ID: {}", storeId);

        StoreStatistics stats = storeAnalyticsRepository.findByStoreId(storeId)
                .orElseThrow(() -> new IllegalStateException("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ID=" + storeId));

        stats.setUpdatedAt(ZonedDateTime.now());
        storeAnalyticsRepository.save(stats);

        log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: {}", stats.getStore().getName());
    }

    /**
     * –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –º–∞–≥–∞–∑–∏–Ω–∞–º (–¥–ª—è –±–ª–æ–∫–∞ "–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞").
     */
    public StoreStatistics aggregateStatistics(List<StoreStatistics> stats) {
        int totalSent = stats.stream().mapToInt(StoreStatistics::getTotalSent).sum();
        int totalDelivered = stats.stream().mapToInt(StoreStatistics::getTotalDelivered).sum();
        int totalReturned = stats.stream().mapToInt(StoreStatistics::getTotalReturned).sum();

        BigDecimal sumDelivery = stats.stream()
                .map(StoreStatistics::getSumDeliveryDays)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal sumPickup = stats.stream()
                .map(StoreStatistics::getSumPickupDays)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        StoreStatistics summary = new StoreStatistics();
        summary.setTotalSent(totalSent);
        summary.setTotalDelivered(totalDelivered);
        summary.setTotalReturned(totalReturned);
        summary.setSumDeliveryDays(sumDelivery);
        summary.setSumPickupDays(sumPickup);
        summary.setUpdatedAt(ZonedDateTime.now());

        Store virtualStore = new Store();
        virtualStore.setName("–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã");
        summary.setStore(virtualStore);

        return summary;
    }
}
