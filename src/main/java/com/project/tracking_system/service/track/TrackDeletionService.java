package com.project.tracking_system.service.track;

import com.project.tracking_system.entity.TrackParcel;
import com.project.tracking_system.repository.OrderReturnRequestRepository;
import com.project.tracking_system.repository.TrackParcelRepository;
import com.project.tracking_system.service.analytics.DeliveryHistoryService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
@Slf4j
@RequiredArgsConstructor
@Service
public class TrackDeletionService {

    private final TrackParcelRepository trackParcelRepository;
    private final DeliveryHistoryService deliveryHistoryService;
    private final OrderReturnRequestRepository orderReturnRequestRepository;

    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–æ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä–∞–º.
     *
     * @param numbers —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ—Å—ã–ª–æ–∫
     * @param userId  –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @throws EntityNotFoundException –µ—Å–ª–∏ –ø–æ—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
     */
    @Transactional
    public void deleteByNumbersAndUserId(List<String> numbers, Long userId) {
        log.info("–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", numbers, userId);

        List<TrackParcel> parcelsToDelete = trackParcelRepository.findByNumberInAndUserId(numbers, userId);

        if (parcelsToDelete.isEmpty()) {
            log.warn("‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—ã–ª–æ–∫. userId={}, –Ω–æ–º–µ—Ä–∞={}", userId, numbers);
            throw new EntityNotFoundException("–ù–µ—Ç –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
        }

        detachDeliveryHistory(parcelsToDelete);
        deleteLinkedReturnRequests(parcelsToDelete);
        trackParcelRepository.deleteAll(parcelsToDelete);
        log.info("‚úÖ –£–¥–∞–ª–µ–Ω—ã {} –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", parcelsToDelete.size(), userId);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–æ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º.
     *
     * @param ids    —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ—Å—ã–ª–æ–∫
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @throws EntityNotFoundException –µ—Å–ª–∏ –ø–æ—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
     */
    @Transactional
    public void deleteByIdsAndUserId(List<Long> ids, Long userId) {
        log.info("–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫ –ø–æ ID {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", ids, userId);

        List<TrackParcel> parcelsToDelete = trackParcelRepository.findByIdInAndUserId(ids, userId);

        if (parcelsToDelete.isEmpty()) {
            log.warn("‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ ID. userId={}, ids={}", userId, ids);
            throw new EntityNotFoundException("–ù–µ—Ç –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
        }

        detachDeliveryHistory(parcelsToDelete);
        deleteLinkedReturnRequests(parcelsToDelete);
        trackParcelRepository.deleteAll(parcelsToDelete);
        log.info("‚úÖ –£–¥–∞–ª–µ–Ω—ã {} –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", parcelsToDelete.size(), userId);
    }

    /**
     * –û—Ç–∫—Ä–µ–ø–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç –ø–æ—Å—ã–ª–æ–∫ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã Hibernate –Ω–µ –ø—ã—Ç–∞–ª—Å—è
     * –∫–∞—Å–∫–∞–¥–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.
     *
     * @param parcels –ø–æ—Å—ã–ª–∫–∏, –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –æ—á–∏—Å—Ç–∫–µ
     */
    private void detachDeliveryHistory(List<TrackParcel> parcels) {
        for (TrackParcel parcel : parcels) {
            deliveryHistoryService.handleTrackParcelBeforeDelete(parcel);

            if (parcel.getDeliveryHistory() != null) {
                parcel.getDeliveryHistory().setTrackParcel(null);
                parcel.setDeliveryHistory(null);
            }
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ—Å—ã–ª–∫–∞–º–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç/–æ–±–º–µ–Ω, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–π
     * –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç—Ä–µ–∫–æ–≤.
     *
     * @param parcels —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—è–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫
     */
    private void deleteLinkedReturnRequests(List<TrackParcel> parcels) {
        List<Long> parcelIds = parcels.stream()
                .map(TrackParcel::getId)
                .filter(Objects::nonNull)
                .collect(Collectors.toList());

        if (parcelIds.isEmpty()) {
            return;
        }

        long deleted = orderReturnRequestRepository.deleteByParcel_IdIn(parcelIds);
        if (deleted > 0) {
            log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {} –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ—Å—ã–ª–∫–∞–º–∏ {}", deleted, parcelIds);
        }
    }
}
