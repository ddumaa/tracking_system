package com.project.tracking_system.service.track;

import com.project.tracking_system.controller.WebSocketController;
import com.project.tracking_system.entity.*;
import com.project.tracking_system.repository.*;
import com.project.tracking_system.service.SubscriptionService;
import com.project.tracking_system.service.belpost.BelPostTrackQueueService;
import com.project.tracking_system.service.belpost.QueuedTrack;
import com.project.tracking_system.service.track.ProgressAggregatorService;
import com.project.tracking_system.service.track.TrackingResultCacheService;
import com.project.tracking_system.service.track.TrackSource;
import com.project.tracking_system.service.admin.ApplicationSettingsService;
import com.project.tracking_system.service.user.UserService;
import com.project.tracking_system.dto.TrackProcessingProgressDTO;
import com.project.tracking_system.dto.TrackStatusUpdateDTO;
import com.project.tracking_system.dto.TrackUpdateResponse;
import com.project.tracking_system.model.subscription.FeatureKey;
import com.project.tracking_system.dto.TrackingResultAdd;
import com.project.tracking_system.entity.PostalServiceType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * –°–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * <p>
 * –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–ª {@code trackExecutor},
 * —á—Ç–æ —Ä–∞–∑–≥—Ä—É–∂–∞–µ—Ç –æ–±—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á –∏ –ø–æ–≤—ã—à–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å.
 * </p>
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class TrackUpdateService {

    private final WebSocketController webSocketController;
    private final SubscriptionService subscriptionService;
    private final StoreRepository storeRepository;
    private final TrackParcelRepository trackParcelRepository;
    private final TrackParcelService trackParcelService;
    private final TrackUploadGroupingService groupingService;
    private final TrackUpdateDispatcherService dispatcherService;
    /** –û—á–µ—Ä–µ–¥—å –ë–µ–ª–ø–æ—á—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. */
    private final BelPostTrackQueueService belPostTrackQueueService;
    /** –°–µ—Ä–≤–∏—Å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. */
    private final ProgressAggregatorService progressAggregatorService;
    /** –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã. */
    private final TrackingResultCacheService trackingResultCacheService;
    /** –°–µ—Ä–≤–∏—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. */
    private final ApplicationSettingsService applicationSettingsService;
    /** –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. */
    private final UserService userService;

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    @Transactional
    public TrackUpdateResponse updateAllParcels(Long userId) {
        if (!subscriptionService.isFeatureEnabled(userId, FeatureKey.BULK_UPDATE)) {
            String msg = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏–∏.";
            log.warn("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);

            webSocketController.sendUpdateStatus(userId, msg, false);
            log.debug("üì° WebSocket –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {}", msg);

            return new TrackUpdateResponse(0, 0, 0, 0, 0, msg);
        }

        int count = storeRepository.countByOwnerId(userId);
        if (count == 0) {
            log.warn("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={} –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤.", userId);
            return new TrackUpdateResponse(0, 0, 0, 0, 0, "–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –ø–æ—Å—ã–ª–∫–∞–º–∏.");
        }

        List<TrackParcel> allParcels = trackParcelRepository.findByUserId(userId);

        int interval = applicationSettingsService.getTrackUpdateIntervalHours();
        ZonedDateTime threshold = ZonedDateTime.now(ZoneOffset.UTC).minusHours(interval);

        int preRegisteredCount = (int) allParcels.stream()
                .filter(this::isPreRegisteredWithoutNumber)
                // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                .peek(p -> log.debug("–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –Ω–æ–º–µ—Ä–∞: id={}", p.getId()))
                .count();

        List<TrackParcel> filteredParcels = allParcels.stream()
                .filter(p -> !isPreRegisteredWithoutNumber(p))
                .toList();

        int finalStatusCount = (int) filteredParcels.stream()
                .filter(p -> p.getStatus().isFinal())
                .count();
        int recentlyUpdatedCount = (int) filteredParcels.stream()
                .filter(p -> !p.getStatus().isFinal())
                .filter(p -> p.getLastUpdate() != null && p.getLastUpdate().isAfter(threshold))
                .count();

        List<TrackParcel> parcelsToUpdate = filteredParcels.stream()
                .filter(p -> !p.getStatus().isFinal())
                .filter(p -> p.getLastUpdate() == null || p.getLastUpdate().isBefore(threshold))
                .toList();

        int totalRequested = allParcels.size();
        int readyToUpdateCount = parcelsToUpdate.size();

        log.info("üì¶ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {} —Ç—Ä–µ–∫–æ–≤ –¥–æ–ø—É—â–µ–Ω–æ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é, {} –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ, {} –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å",
                readyToUpdateCount, finalStatusCount, recentlyUpdatedCount);

        String message = buildUpdateMessage(readyToUpdateCount, finalStatusCount, recentlyUpdatedCount, preRegisteredCount);
        webSocketController.sendUpdateStatus(userId, message, readyToUpdateCount > 0);

        if (readyToUpdateCount > 0) {
            processAllTrackUpdatesAsync(userId, parcelsToUpdate);
        }

        return new TrackUpdateResponse(totalRequested, readyToUpdateCount, finalStatusCount,
                recentlyUpdatedCount, preRegisteredCount, message);
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    @Async("trackExecutor")
    @Transactional
    public void processAllTrackUpdatesAsync(Long userId, List<TrackParcel> parcelsToUpdate) {
        try {
            List<TrackMeta> metas = parcelsToUpdate.stream()
                    .map(parcel -> new TrackMeta(
                            parcel.getNumber(),
                            parcel.getStore().getId(),
                            null,
                            true,
                            parcel.getDeliveryHistory() != null ? parcel.getDeliveryHistory().getPostalService() : null))
                    .toList();

            List<TrackingResultAdd> results = process(metas, userId);

            int updatedCount = (int) results.stream()
                    .filter(r -> !TrackConstants.NO_DATA_STATUS.equals(r.getStatus()))
                    .count();

            int totalCount = parcelsToUpdate.size();

            log.info("–ò—Ç–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è userId={}: {} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ",
                    userId, updatedCount, totalCount - updatedCount);

            String message;
            if (updatedCount == 0) {
                message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –≤—Å–µ —Ç—Ä–µ–∫–∏ —É–∂–µ –±—ã–ª–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ.";
            } else {
                message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! " + updatedCount + " –∏–∑ " + totalCount + " —Ç—Ä–µ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.";
            }

            webSocketController.sendDetailUpdateStatus(
                    userId,
                    new UpdateResult(true, updatedCount, totalCount, message)
            );

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
            webSocketController.sendUpdateStatus(userId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤: " + e.getMessage(), false);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * <p>
     * –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä –∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
     * –º–µ–Ω–µ–µ —á–µ–º –∑–∞ {@code interval} —á–∞—Å–æ–≤ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –º–µ—Ç–æ–¥ –Ω–µ
     * –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º,
     * –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.
     * </p>
     */
    @Transactional
    public TrackUpdateResponse updateSelectedParcels(Long userId, List<String> selectedNumbers) {
        List<TrackParcel> selectedParcels = trackParcelRepository.findByNumberInAndUserId(selectedNumbers, userId);
        int totalRequested = selectedParcels.size();

        int preRegisteredCount = (int) selectedParcels.stream()
                .filter(this::isPreRegisteredWithoutNumber)
                // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ—Å—ã–ª–∫–∏, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—è –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                .peek(p -> log.debug("–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –Ω–æ–º–µ—Ä–∞: id={}", p.getId()))
                .count();

        List<TrackParcel> filteredParcels = selectedParcels.stream()
                .filter(p -> !isPreRegisteredWithoutNumber(p))
                .toList();

        int interval = applicationSettingsService.getTrackUpdateIntervalHours();
        ZonedDateTime threshold = ZonedDateTime.now(ZoneOffset.UTC).minusHours(interval);

        if (selectedNumbers.size() == 1 && !filteredParcels.isEmpty()) {
            TrackParcel parcel = filteredParcels.get(0);
            if (!parcel.getStatus().isFinal() && parcel.getLastUpdate() != null) {
                ZonedDateTime nextAllowed = parcel.getLastUpdate().plusHours(interval);
                if (nextAllowed.isAfter(ZonedDateTime.now(ZoneOffset.UTC))) {
                    String formatted = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss")
                            .withZone(userService.getUserZone(userId))
                            .format(nextAllowed);
                    String msg = "–¢—Ä–µ–∫ " + parcel.getNumber() + " –æ–±–Ω–æ–≤–ª—è–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ, " +
                            "—Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–ª–µ " + formatted;
                    webSocketController.sendUpdateStatus(userId, msg, false);
                    return new TrackUpdateResponse(1, 0, 0, 1, 0, msg);
                }
            }
        }

        int finalStatusCount = (int) filteredParcels.stream()
                .filter(p -> p.getStatus().isFinal())
                .count();
        int recentlyUpdatedCount = (int) filteredParcels.stream()
                .filter(p -> !p.getStatus().isFinal())
                .filter(p -> p.getLastUpdate() != null && p.getLastUpdate().isAfter(threshold))
                .count();
        List<TrackParcel> updatableParcels = filteredParcels.stream()
                .filter(p -> !p.getStatus().isFinal())
                .filter(p -> p.getLastUpdate() == null || p.getLastUpdate().isBefore(threshold))
                .toList();
        int readyToUpdateCount = updatableParcels.size();

        log.info("üì¶ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {} —Ç—Ä–µ–∫–æ–≤ –¥–æ–ø—É—â–µ–Ω–æ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é, {} –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ, {} –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å",
                readyToUpdateCount, finalStatusCount, recentlyUpdatedCount);

        if (readyToUpdateCount == 0) {
            String msg = buildUpdateMessage(0, finalStatusCount, recentlyUpdatedCount, preRegisteredCount);
            log.warn(msg);
            webSocketController.sendUpdateStatus(userId, msg, false);
            return new TrackUpdateResponse(totalRequested, 0, finalStatusCount, recentlyUpdatedCount, preRegisteredCount, msg);
        }

        int remainingUpdates = subscriptionService.canUpdateTracks(userId, updatableParcels.size());

        if (remainingUpdates <= 0) {
            String msg = "–í–∞—à –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.";
            log.info("–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);
            webSocketController.sendUpdateStatus(userId, msg, true);
            return new TrackUpdateResponse(totalRequested, 0, finalStatusCount, recentlyUpdatedCount, preRegisteredCount, msg);
        }

        int updatesToProcess = Math.min(readyToUpdateCount, remainingUpdates);
        List<TrackParcel> parcelsToUpdate = updatableParcels.subList(0, updatesToProcess);
        String msg = buildUpdateMessage(updatesToProcess, finalStatusCount, recentlyUpdatedCount, preRegisteredCount);
        log.info("üì¶ –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", updatesToProcess, userId);

        processTrackUpdatesAsync(userId, parcelsToUpdate, totalRequested, finalStatusCount + recentlyUpdatedCount);

        webSocketController.sendUpdateStatus(userId, msg, true);
        return new TrackUpdateResponse(totalRequested, updatesToProcess, finalStatusCount, recentlyUpdatedCount, preRegisteredCount, msg);
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    @Async("trackExecutor")
    @Transactional
    public void processTrackUpdatesAsync(Long userId, List<TrackParcel> parcelsToUpdate, int totalRequested, int nonUpdatableCount) {
        try {
            List<TrackParcel> filteredParcels = parcelsToUpdate.stream()
                    .filter(p -> {
                        boolean skip = isPreRegisteredWithoutNumber(p);
                        if (skip) {
                            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∏–∑–±–µ–≥–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                            log.debug("–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –Ω–æ–º–µ—Ä–∞: id={}", p.getId());
                        }
                        return !skip;
                    })
                    .toList();

            log.info("–ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è userId={}", filteredParcels.size(), userId);

            List<TrackMeta> metas = filteredParcels.stream()
                    .map(parcel -> new TrackMeta(
                            parcel.getNumber(),
                            parcel.getStore().getId(),
                            null,
                            true,
                            parcel.getDeliveryHistory() != null ? parcel.getDeliveryHistory().getPostalService() : null))
                    .toList();
            List<TrackingResultAdd> results = process(metas, userId);

            int updatedCount = (int) results.stream()
                    .filter(r -> !TrackConstants.NO_DATA_STATUS.equals(r.getStatus()))
                    .count();

            log.info("–ò—Ç–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è userId={}: {} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {} –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ",
                    userId, updatedCount, nonUpdatableCount);

            if (updatedCount > 0) {
                log.info("–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ updateCount –¥–ª—è userId={}, –¥–æ–±–∞–≤–ª—è–µ–º={}", userId, updatedCount);
                trackParcelService.incrementUpdateCount(userId, updatedCount);
            }

            String message;
            if (updatedCount == 0 && nonUpdatableCount == 0) {
                message = "–í—Å–µ —Ç—Ä–µ–∫–∏ —É–∂–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.";
            } else if (updatedCount == 0) {
                message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –≤—Å–µ —Ç—Ä–µ–∫–∏ —É–∂–µ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ.";
            } else {
                message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! " + updatedCount + " –∏–∑ " + totalRequested + " —Ç—Ä–µ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.";
                if (nonUpdatableCount > 0) {
                    message += " " + nonUpdatableCount + " —Ç—Ä–µ–∫–æ–≤ —É–∂–µ –±—ã–ª–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ.";
                }
            }

            webSocketController.sendDetailUpdateStatus(
                    userId,
                    new UpdateResult(true, updatedCount, totalRequested, message)
            );

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
            webSocketController.sendUpdateStatus(userId, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + e.getMessage(), false);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–±–æ—Ä —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param tracks —Å–ø–∏—Å–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    public List<TrackingResultAdd> process(List<TrackMeta> tracks, Long userId) {
        long batchId = System.currentTimeMillis();
        progressAggregatorService.registerBatch(batchId, tracks.size(), userId);
        Map<PostalServiceType, List<TrackMeta>> grouped = groupingService.group(tracks);

        // –û—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ë–µ–ª–ø–æ—á—Ç—ã —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        List<TrackMeta> belpost = grouped.remove(PostalServiceType.BELPOST);
        if (belpost != null && !belpost.isEmpty()) {
            // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–∫ UPDATE
            // —á—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ç—Ä–µ–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            List<QueuedTrack> queued = belpost.stream()
                    .map(m -> new QueuedTrack(
                            m.number(),
                            userId,
                            m.storeId(),
                            TrackSource.UPDATE,
                            batchId,
                            m.phone()))
                    .toList();
            belPostTrackQueueService.enqueue(queued);
        }

        if (grouped.isEmpty()) {
            return List.of();
        }

        List<TrackingResultAdd> results = dispatcherService.dispatch(grouped, userId);

        for (TrackingResultAdd r : results) {
            progressAggregatorService.trackProcessed(batchId);
            TrackProcessingProgressDTO p = progressAggregatorService.getProgress(batchId);
            TrackStatusUpdateDTO dto = new TrackStatusUpdateDTO(
                    batchId,
                    r.getTrackingNumber(),
                    r.getStatus(),
                    p.processed(),
                    p.total());
            trackingResultCacheService.addResult(userId, dto);
        }

        return results;
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     *
     * @param ready             –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã
     * @param finalStatus       —Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤ –∏–º–µ—é—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
     * @param recent            —Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞
     * @param preRegistered     —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ
     * @return —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private String buildUpdateMessage(int ready, int finalStatus, int recent, int preRegistered) {
        int total = ready + finalStatus + recent + preRegistered;
        StringBuilder sb = new StringBuilder();
        if (ready == 0) {
            sb.append("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.");
        } else {
            sb.append("–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ")
                    .append(ready)
                    .append(" –∏–∑ ")
                    .append(total)
                    .append(" —Ç—Ä–µ–∫–æ–≤");
        }
        if (finalStatus > 0) {
            sb.append("\n‚ñ™ ")
                    .append(finalStatus)
                    .append(" —Ç—Ä–µ–∫–æ–≤ —É–∂–µ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ");
        }
        if (recent > 0) {
            sb.append("\n‚ñ™ ")
                    .append(recent)
                    .append(" —Ç—Ä–µ–∫–æ–≤ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã");
        }
        if (preRegistered > 0) {
            sb.append("\n‚ñ™ –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –±–µ–∑ –Ω–æ–º–µ—Ä–∞: ")
                    .append(preRegistered);
        }
        return sb.toString();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—ã–ª–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–µ–∑ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞.
     *
     * @param parcel –æ–±—ä–µ–∫—Ç –ø–æ—Å—ã–ª–∫–∏
     * @return {@code true}, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å {@link GlobalStatus#PRE_REGISTERED} –∏ –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
     *
     * <p><strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> –º–µ—Ç–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–æ–∫–µ–Ω—ã.</p>
     */
    private boolean isPreRegisteredWithoutNumber(TrackParcel parcel) {
        return parcel.getStatus() == GlobalStatus.PRE_REGISTERED &&
                (parcel.getNumber() == null || parcel.getNumber().isBlank());
    }

}