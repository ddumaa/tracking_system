package com.project.tracking_system.service.track;

import com.project.tracking_system.controller.WebSocketController;
import com.project.tracking_system.dto.TrackInfoListDTO;
import com.project.tracking_system.dto.TrackParcelDTO;
import com.project.tracking_system.entity.*;
import com.project.tracking_system.repository.*;
import com.project.tracking_system.service.SubscriptionService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.core.task.TaskExecutor;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –°–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * <p>
 * –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–ª {@code trackExecutor},
 * —á—Ç–æ —Ä–∞–∑–≥—Ä—É–∂–∞–µ—Ç –æ–±—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á –∏ –ø–æ–≤—ã—à–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å.
 * </p>
 */
@Slf4j
@Service
public class TrackUpdateService {

    private final WebSocketController webSocketController;
    private final TrackProcessingService trackProcessingService;
    private final SubscriptionService subscriptionService;
    private final StoreRepository storeRepository;
    private final TrackParcelRepository trackParcelRepository;
    private final TrackParcelService trackParcelService;
    private final TaskExecutor taskExecutor;

    public TrackUpdateService(WebSocketController webSocketController,
                              TrackProcessingService trackProcessingService,
                              SubscriptionService subscriptionService,
                              StoreRepository storeRepository,
                              TrackParcelRepository trackParcelRepository,
                              TrackParcelService trackParcelService,
                              @Qualifier("trackExecutor") TaskExecutor taskExecutor) {
        this.webSocketController = webSocketController;
        this.trackProcessingService = trackProcessingService;
        this.subscriptionService = subscriptionService;
        this.storeRepository = storeRepository;
        this.trackParcelRepository = trackParcelRepository;
        this.trackParcelService = trackParcelService;
        this.taskExecutor = taskExecutor;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    @Transactional
    public UpdateResult updateAllParcels(Long userId) {
        if (!subscriptionService.canUseBulkUpdate(userId)) {
            String msg = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏–∏.";
            log.warn("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);

            webSocketController.sendUpdateStatus(userId, msg, false);
            log.debug("üì° WebSocket –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {}", msg);

            return new UpdateResult(false, 0, 0, msg);
        }

        int count = storeRepository.countByOwnerId(userId);
        if (count == 0) {
            log.warn("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={} –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤.", userId);
            return new UpdateResult(false, 0, 0, "–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –ø–æ—Å—ã–ª–∫–∞–º–∏.");
        }

        List<TrackParcelDTO> allParcels = trackParcelService.findAllByUserTracks(userId);

        List<TrackParcelDTO> parcelsToUpdate = allParcels.stream()
                .filter(dto -> !GlobalStatus.fromDescription(dto.getStatus()).isFinal())
                .toList();

        log.info("üì¶ –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö {} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è userId={}", parcelsToUpdate.size(), userId);

        webSocketController.sendUpdateStatus(userId, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ...", true);

        processAllTrackUpdatesAsync(userId, parcelsToUpdate);

        return new UpdateResult(true, parcelsToUpdate.size(), allParcels.size(),
                "–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ " + parcelsToUpdate.size() + " —Ç—Ä–µ–∫–æ–≤ –∏–∑ " + allParcels.size());
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    @Async("trackExecutor")
    @Transactional
    public void processAllTrackUpdatesAsync(Long userId, List<TrackParcelDTO> parcelsToUpdate) {
        try {
            AtomicInteger successfulUpdates = new AtomicInteger(0);

            List<CompletableFuture<Void>> futures = parcelsToUpdate.stream()
                    .map(trackParcelDTO -> CompletableFuture.runAsync(() -> {
                        try {
                            TrackInfoListDTO trackInfo = trackProcessingService.processTrack(
                                    trackParcelDTO.getNumber(),
                                    trackParcelDTO.getStoreId(),
                                    userId,
                                    true
                            );

                            if (trackInfo != null && !trackInfo.getList().isEmpty()) {
                                successfulUpdates.incrementAndGet();
                                log.debug("–¢—Ä–µ–∫ {} –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", trackParcelDTO.getNumber(), userId);
                            } else {
                                log.warn("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–µ–∫—É {} (userId={})", trackParcelDTO.getNumber(), userId);
                            }

                        } catch (IllegalArgumentException e) {
                            log.warn("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ {}: {}", trackParcelDTO.getNumber(), e.getMessage());
                        } catch (Exception e) {
                            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞ {}: {}", trackParcelDTO.getNumber(), e.getMessage(), e);
                        }
                    }, taskExecutor))
                    .toList();

            CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).thenRun(() -> {
                int updatedCount = successfulUpdates.get();
                int totalCount = parcelsToUpdate.size();

                log.info("–ò—Ç–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è userId={}: {} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ",
                        userId, updatedCount, totalCount - updatedCount);

                String message;
                if (updatedCount == 0) {
                    message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –≤—Å–µ —Ç—Ä–µ–∫–∏ —É–∂–µ –±—ã–ª–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ.";
                } else {
                    message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! " + updatedCount + " –∏–∑ " + totalCount + " —Ç—Ä–µ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.";
                }

                webSocketController.sendDetailUpdateStatus(
                        userId,
                        new UpdateResult(true, updatedCount, totalCount, message)
                );
            });

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
            webSocketController.sendUpdateStatus(userId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤: " + e.getMessage(), false);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    @Transactional
    public UpdateResult updateSelectedParcels(Long userId, List<String> selectedNumbers) {
        List<TrackParcel> selectedParcels = trackParcelRepository.findByNumberInAndUserId(selectedNumbers, userId);

        int totalRequested = selectedParcels.size();
        List<TrackParcel> updatableParcels = selectedParcels.stream()
                .filter(parcel -> !parcel.getStatus().isFinal())
                .toList();
        int nonUpdatableCount = totalRequested - updatableParcels.size();

        log.info("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {} —Ç—Ä–µ–∫–æ–≤ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ {}, {} —É–∂–µ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ",
                updatableParcels.size(), totalRequested, nonUpdatableCount);

        if (updatableParcels.isEmpty()) {
            String msg = "–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ —É–∂–µ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.";
            log.warn(msg);
            webSocketController.sendUpdateStatus(userId, msg, true);
            return new UpdateResult(false, 0, selectedNumbers.size(), msg);
        }

        int remainingUpdates = subscriptionService.canUpdateTracks(userId, updatableParcels.size());

        if (remainingUpdates <= 0) {
            String msg = "–í–∞—à –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.";
            log.info("–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}", userId);
            webSocketController.sendUpdateStatus(userId, msg, true);
            return new UpdateResult(false, 0, updatableParcels.size(), msg);
        }

        int updatesToProcess = Math.min(updatableParcels.size(), remainingUpdates);
        List<TrackParcel> parcelsToUpdate = updatableParcels.subList(0, updatesToProcess);

        log.info("–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", updatesToProcess, userId);

        processTrackUpdatesAsync(userId, parcelsToUpdate, totalRequested, nonUpdatableCount);

        return new UpdateResult(true, updatesToProcess, selectedNumbers.size(),
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...");
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    @Async("trackExecutor")
    @Transactional
    public void processTrackUpdatesAsync(Long userId, List<TrackParcel> parcelsToUpdate, int totalRequested, int nonUpdatableCount) {
        try {
            AtomicInteger successfulUpdates = new AtomicInteger(0);

            log.info("–ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è userId={}", parcelsToUpdate.size(), userId);

            List<CompletableFuture<Void>> futures = parcelsToUpdate.stream()
                    .map(parcel -> CompletableFuture.runAsync(() -> {
                        try {
                            TrackInfoListDTO trackInfo = trackProcessingService.processTrack(parcel.getNumber(), parcel.getStore().getId(), userId, true);
                            if (trackInfo != null && !trackInfo.getList().isEmpty()) {
                                successfulUpdates.incrementAndGet();
                            }
                        } catch (Exception e) {
                            log.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ {}: {}", parcel.getNumber(), e.getMessage());
                        }
                    }, taskExecutor))
                    .toList();

            CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).thenRun(() -> {
                int updatedCount = successfulUpdates.get();
                log.info("–ò—Ç–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è userId={}: {} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {} –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ",
                        userId, updatedCount, nonUpdatableCount);

                if (updatedCount > 0) {
                    log.info("–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ updateCount –¥–ª—è userId={}, –¥–æ–±–∞–≤–ª—è–µ–º={}", userId, updatedCount);
                    trackParcelService.incrementUpdateCount(userId, updatedCount);
                }

                String message;
                if (updatedCount == 0 && nonUpdatableCount == 0) {
                    message = "–í—Å–µ —Ç—Ä–µ–∫–∏ —É–∂–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.";
                } else if (updatedCount == 0) {
                    message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –≤—Å–µ —Ç—Ä–µ–∫–∏ —É–∂–µ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ.";
                } else {
                    message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! " + updatedCount + " –∏–∑ " + totalRequested + " —Ç—Ä–µ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.";
                    if (nonUpdatableCount > 0) {
                        message += " " + nonUpdatableCount + " —Ç—Ä–µ–∫–æ–≤ —É–∂–µ –±—ã–ª–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ.";
                    }
                }

                webSocketController.sendDetailUpdateStatus(
                        userId,
                        new UpdateResult(true, updatedCount, totalRequested, message)
                );
            });

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
            webSocketController.sendUpdateStatus(userId, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + e.getMessage(), false);
        }
    }

}