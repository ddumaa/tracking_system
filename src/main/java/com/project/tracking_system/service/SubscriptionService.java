package com.project.tracking_system.service;

import com.project.tracking_system.entity.SubscriptionPlan;
import com.project.tracking_system.entity.SubscriptionLimits;
import com.project.tracking_system.entity.User;
import com.project.tracking_system.entity.UserSubscription;
import com.project.tracking_system.model.subscription.FeatureKey;
import com.project.tracking_system.repository.SubscriptionPlanRepository;
import com.project.tracking_system.repository.TrackParcelRepository;
import com.project.tracking_system.repository.UserSubscriptionRepository;
import org.springframework.transaction.annotation.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Optional;
import java.math.BigDecimal;

/**
 * @author Dmitriy Anisimov
 * @date 11.02.2025
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class SubscriptionService {

    private final TrackParcelRepository trackParcelRepository;
    private final UserSubscriptionRepository userSubscriptionRepository;
    private final SubscriptionPlanRepository subscriptionPlanRepository;

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ.
     * <p>
     * –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è {@code 0}. –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ
     * –ø–ª–∞–Ω–∞ –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—ë—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤.
     * </p>
     *
     * @param userId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param tracksCount –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
     * @return –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    public int canUploadTracks(Long userId, int tracksCount) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Optional<UserSubscription> optionalSubscription = userSubscriptionRepository.findByUserId(userId);
        if (optionalSubscription.isEmpty()) {
            return 0; // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
        }

        UserSubscription subscription = optionalSubscription.get();
        SubscriptionPlan plan = subscription.getSubscriptionPlan();
        SubscriptionLimits limits = (plan != null) ? plan.getLimits() : null;

        // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç —Ç—Ä–µ–∫–æ–≤ –Ω–∞ —Ñ–∞–π–ª
        Integer maxTracksPerFile = (limits != null) ? limits.getMaxTracksPerFile() : null;
        if (maxTracksPerFile == null) {
            return Integer.MAX_VALUE; // –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω
        }

        return Math.min(tracksCount, maxTracksPerFile);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
     * <p>
     * –õ–∏–º–∏—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—Ä–µ–∫–æ–≤.
     * –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {@code 0}.
     * </p>
     *
     * @param userId            –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param tracksCountToSave –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
     * @return –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    public int canSaveMoreTracks(Long userId, int tracksCountToSave) {
        Optional<UserSubscription> optionalSubscription = userSubscriptionRepository.findByUserId(userId);
        if (optionalSubscription.isEmpty()) {
            log.warn("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", userId);
            return 0;
        }

        UserSubscription subscription = optionalSubscription.get();
        SubscriptionPlan plan = subscription.getSubscriptionPlan();
        SubscriptionLimits limits = (plan != null) ? plan.getLimits() : null;

        Integer maxSavedTracks = (limits != null) ? limits.getMaxSavedTracks() : null;
        if (maxSavedTracks == null) {
            log.info("‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω. –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {} —Ç—Ä–µ–∫–æ–≤.", userId, tracksCountToSave);
            return tracksCountToSave; // –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
        }

        int currentSavedTracks = trackParcelRepository.countByUserId(userId);
        int remainingTracks = Math.max(0, maxSavedTracks - currentSavedTracks);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ
        int allowedToSave = Math.min(remainingTracks, tracksCountToSave);

        log.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {} —Ç—Ä–µ–∫–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {}. –†–∞–∑—Ä–µ—à–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {}.",
                userId, tracksCountToSave, remainingTracks, allowedToSave);

        return allowedToSave;
    }


    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—Ä–µ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–µ–≥–æ–¥–Ω—è.
     * <p>
     * –ü—Ä–∏ —Å–º–µ–Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è —Å—á—ë—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
     * –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—é {@code 0}.
     * </p>
     *
     * @param userId          –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param updatesRequested –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     * @return —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    public int canUpdateTracks(Long userId, int updatesRequested) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserSubscription subscription = userSubscriptionRepository.findByUserId(userId)
                .orElse(null);
        if (subscription == null) {
            log.warn("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", userId);
            return 0; // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã
        }

        SubscriptionPlan plan = subscription.getSubscriptionPlan();
        SubscriptionLimits limits = (plan != null) ? plan.getLimits() : null;
        Integer maxUpdates = (limits != null) ? limits.getMaxTrackUpdates() : null;
        if (maxUpdates == null) {
            log.info("‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω. –†–∞–∑—Ä–µ—à–µ–Ω–æ {} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.", userId, updatesRequested);
            return updatesRequested; // –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã, –µ—Å–ª–∏ –¥–µ–Ω—å —Å–º–µ–Ω–∏–ª—Å—è
        LocalDate previousResetDate = subscription.getResetDate();
        subscription.checkAndResetLimits();

        // –ï—Å–ª–∏ –ª–∏–º–∏—Ç—ã —Å–±—Ä–æ—Å–∏–ª–∏—Å—å, –ª–æ–≥–∏—Ä—É–µ–º
        if (!previousResetDate.equals(subscription.getResetDate())) {
            log.warn("‚ö†Ô∏è [resetUpdateCount] –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è userId={} (–±—ã–ª–æ: {}, —Å—Ç–∞–ª–æ: {}).",
                    userId, previousResetDate, subscription.getResetDate());
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        int usedUpdates = subscription.getUpdateCount();
        int remainingUpdates = Math.max(maxUpdates - usedUpdates, 0);

        // –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
        int updatesAllowed = Math.min(remainingUpdates, updatesRequested);

        if (updatesAllowed > 0) {
            subscription.setUpdateCount(usedUpdates + updatesAllowed);
            userSubscriptionRepository.save(subscription);
            log.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∑–∞–ø—Ä–æ—Å–∏–ª {} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {}).",
                    userId, updatesRequested, updatesAllowed, subscription.getUpdateCount());
        } else {
            log.warn("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {}/{}", userId, usedUpdates, maxUpdates);
        }

        return updatesAllowed;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    public boolean canUseBulkUpdate(Long userId) {
        boolean allowed = isFeatureEnabled(userId, FeatureKey.BULK_UPDATE);
        log.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –î–æ—Å—Ç—É–ø: {}", userId, allowed);
        return allowed;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–∞—Ä–∏—Ñ–µ
     */
    public boolean canUseAutoUpdate(Long userId) {
        return isFeatureEnabled(userId, FeatureKey.AUTO_UPDATE);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∑–≤–æ–ª—è–µ—Ç Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    public boolean canUseTelegramNotifications(Long userId) {
        boolean allowed = isFeatureEnabled(userId, FeatureKey.TELEGRAM_NOTIFICATIONS);
        if (!allowed) {
            log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", userId);
        }
        return allowed;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param key    –∫–ª—é—á —Ñ—É–Ω–∫—Ü–∏–∏
     * @return {@code true}, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
     */
    public boolean isFeatureEnabled(Long userId, FeatureKey key) {
        String code = userSubscriptionRepository.getSubscriptionPlanCode(userId);
        if (code == null) {
            return false;
        }
        return subscriptionPlanRepository.findByCode(code)
                .map(plan -> plan.isFeatureEnabled(key))
                .orElse(false);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞ –±–æ–ª—å—à–µ –Ω—É–ª—è
     */
    public boolean isUserPremium(Long userId) {
        String code = userSubscriptionRepository.getSubscriptionPlanCode(userId);
        if (code == null) {
            return false;
        }
        return subscriptionPlanRepository.findByCode(code)
                .map(SubscriptionPlan::isPaid)
                .orElse(false);
    }

    /**
     * –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –Ω–∞ –Ω–µ—ë.
     * <p>
     * –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –ø–ª–∞—Ç–Ω—ã–π, –µ–≥–æ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è.
     * –ü—Ä–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–ø–≥—Ä–µ–π–¥ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.
     * </p>
     *
     * @param userId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param months –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
     * @throws IllegalArgumentException –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ª–∏–±–æ –µ—ë —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ø–≥—Ä–µ–π–¥
     * @throws IllegalStateException    –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
     */
    @Transactional
    public void upgradeOrExtendSubscription(Long userId, int months) {
        log.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", userId);

        UserSubscription subscription = userSubscriptionRepository.findByUserId(userId)
                .orElseThrow(() -> {
                    log.warn("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", userId);
                    return new IllegalArgumentException("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                });

        ZonedDateTime nowUtc = ZonedDateTime.now(ZoneOffset.UTC);
        SubscriptionPlan plan = subscription.getSubscriptionPlan();

        if (plan == null) {
            log.error("üö® –û—à–∏–±–∫–∞! –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞!", userId);
            throw new IllegalStateException("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞");
        }

        if (plan.isPaid()) {
            extendPaidSubscription(subscription, months, nowUtc);
        } else {
            upgradeToPaidSubscription(subscription, months, nowUtc);
        }

        userSubscriptionRepository.save(subscription);
        log.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–æ–≤—ã–π –ø–ª–∞–Ω: {} –¥–æ {}",
                userId, subscription.getSubscriptionPlan().getCode(), subscription.getSubscriptionEndDate());
    }

    private void extendPaidSubscription(UserSubscription subscription, int months, ZonedDateTime nowUtc) {
        ZonedDateTime currentExpiry = subscription.getSubscriptionEndDate();
        if (currentExpiry == null || currentExpiry.isBefore(nowUtc)) {
            currentExpiry = nowUtc;
        }
        subscription.setSubscriptionEndDate(currentExpiry.plusMonths(months));
        log.info("üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –¥–æ {}", subscription.getUser().getId(), subscription.getSubscriptionEndDate());
    }

    private void upgradeToPaidSubscription(UserSubscription subscription, int months, ZonedDateTime nowUtc) {
        SubscriptionPlan paidPlan = subscriptionPlanRepository
                .findFirstByMonthlyPriceGreaterThanOrAnnualPriceGreaterThan(BigDecimal.ZERO, BigDecimal.ZERO)
                .orElseThrow(() -> new RuntimeException("üö® –ü–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        subscription.setSubscriptionPlan(paidPlan);
        subscription.setSubscriptionEndDate(nowUtc.plusMonths(months));
        log.info("‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –¥–æ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ {}",
                subscription.getUser().getId(), subscription.getSubscriptionEndDate());
    }

    /**
     * –ò–∑–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω.
     * <p>
     * –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö
     * –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—á–∏—â–∞–µ—Ç—Å—è.
     * </p>
     *
     * @param userId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param code        –∫–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
     * @param months      —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ—Å—è—Ü–∞—Ö (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤)
     * @throws IllegalArgumentException –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
     */
    @Transactional
    public void changeSubscription(Long userId, String code, Integer months) {
        log.info("–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={} –Ω–∞ {}", userId, code);

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ —Ç–∞—Ä–∏—Ñ–∞
        String parsedCode = parseCode(code)
                .orElseThrow(() -> new IllegalArgumentException("–ö–æ–¥ –ø–ª–∞–Ω–∞ –Ω–µ –∑–∞–¥–∞–Ω"));

        UserSubscription subscription = userSubscriptionRepository.findByUserId(userId)
                .orElseThrow(() -> new IllegalArgumentException("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ –ë–î –ø–æ –∫–æ–¥—É
        SubscriptionPlan newPlan = subscriptionPlanRepository.findByCode(parsedCode)
                .orElseThrow(() -> new IllegalArgumentException("–ü–ª–∞–Ω —Å –∫–æ–¥–æ–º " + parsedCode + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
        subscription.setSubscriptionPlan(newPlan);

        if (newPlan.isPaid()) {
            int subscriptionMonths = (months != null && months > 0) ? months : 1;
            subscription.setSubscriptionEndDate(ZonedDateTime.now(ZoneOffset.UTC).plusMonths(subscriptionMonths));
            log.info("‚¨ÜÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–æ–ª—É—á–∏–ª –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–æ {}", userId, subscription.getSubscriptionEndDate());
        } else {
            subscription.setSubscriptionEndDate(null);
            log.info("‚¨áÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –ø–ª–∞–Ω {}", userId, parsedCode);
        }

        userSubscriptionRepository.save(subscription);
        log.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {} –¥–æ {}", userId, parsedCode, subscription.getSubscriptionEndDate());
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –±–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * <p>
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ–Ω–æ–º—É –ø–ª–∞–Ω—É
     * —Å–æ —Å–±—Ä–æ—à–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
     * </p>
     *
     * @param user –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞
     * @return –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public UserSubscription createDefaultSubscriptionForUser(User user) {
        SubscriptionPlan defaultPlan = subscriptionPlanRepository
                .findByCode("FREE")
                .orElseThrow(() -> new IllegalStateException("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        UserSubscription subscription = new UserSubscription();
        subscription.setUser(user);
        subscription.setSubscriptionPlan(defaultPlan);
        subscription.setResetDate(LocalDate.now());
        subscription.setUpdateCount(0);

        return subscription;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.
     *
     * @param name –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–¥–∞
     * @return –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏–ª–∏ {@link Optional#empty()} –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏
     */
    private Optional<String> parseCode(String name) {
        if (name == null || name.isBlank()) {
            return Optional.empty();
        }
        return Optional.of(name.trim().toUpperCase());
    }

}
