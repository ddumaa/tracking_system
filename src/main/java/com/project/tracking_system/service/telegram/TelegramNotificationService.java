package com.project.tracking_system.service.telegram;

import com.project.tracking_system.entity.BuyerStatus;
import com.project.tracking_system.entity.GlobalStatus;
import com.project.tracking_system.entity.TrackParcel;
import com.project.tracking_system.entity.StoreTelegramSettings;
import com.project.tracking_system.mapper.BuyerStatusMapper;
import com.project.tracking_system.service.customer.CustomerService;
import com.project.tracking_system.repository.CustomerTelegramLinkRepository;
import com.project.tracking_system.repository.CustomerRepository;
import com.project.tracking_system.entity.CustomerTelegramLink;
import com.project.tracking_system.service.telegram.TelegramBotResolverService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;
import com.project.tracking_system.utils.PhoneUtils;

/**
 * –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram-–ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class TelegramNotificationService {

    private final CustomerService customerService;
    private final CustomerTelegramLinkRepository linkRepository;
    private final CustomerRepository customerRepository;
    private final TelegramBotResolverService botResolverService;

    /**
     * –£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º, –∏–∑ –∫—ç—à–∞.
     *
     * @param token —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
     */
    public void invalidateClient(String token) {
        botResolverService.invalidateClient(token);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫—ç—à–∞ –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞.
     *
     * @param settings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –º–∞–≥–∞–∑–∏–Ω–∞
     */
    public void invalidateClient(StoreTelegramSettings settings) {
        botResolverService.invalidateClient(settings);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—ã–ª–∫–∏.
     * <p>
     * –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –º–∞–≥–∞–∑–∏–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–¥–ø–∏—Å—å, –æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞
     * –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è.
     * </p>
     *
     * @param parcel –ø–æ—Å—ã–ª–∫–∞
     * @param status –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
     */
    public void sendStatusUpdate(TrackParcel parcel, GlobalStatus status) {
        if (!customerService.isNotifiable(parcel.getCustomer(), parcel.getStore())) {
            log.warn("‚õî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è —Ç—Ä–µ–∫–∞ {}", parcel.getNumber());
            return;
        }

        StoreTelegramSettings settings = parcel.getStore().getTelegramSettings();
        if (settings != null && !settings.isEnabled()) {
            log.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {}", parcel.getStore().getId());
            return;
        }

        BuyerStatus buyerStatus = BuyerStatusMapper.map(status);
        if (buyerStatus == null) {
            log.debug("–°—Ç–∞—Ç—É—Å {} –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", status);
            return;
        }

        Long chatId = getChatId(parcel);
        if (chatId == null) {
            log.warn("‚ö†Ô∏è –ß–∞—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç—Ä–µ–∫–∞ {}", parcel.getNumber());
            return;
        }
        String text;
        if (settings != null && settings.getTemplatesMap().containsKey(buyerStatus)) {
            text = settings.getTemplatesMap().get(buyerStatus)
                    .replace("{track}", parcel.getNumber())
                    .replace("{store}", parcel.getStore().getName());
        } else {
            text = buyerStatus.formatMessage(parcel.getNumber(), parcel.getStore().getName());
        }

        if (settings != null && settings.getCustomSignature() != null && !settings.getCustomSignature().isBlank()) {
            text += "\n\n" + settings.getCustomSignature();
        }

        SendMessage message = new SendMessage(chatId.toString(), text);
        TelegramClient client = botResolverService.resolveBotForStore(parcel.getStore());

        try {
            client.execute(message);
            log.info("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {} (—Å—Ç–∞—Ç—É—Å {}) –≤ —á–∞—Ç {} –¥–ª—è —Ç—Ä–µ–∫–∞ {}",
                    text, status, chatId, parcel.getNumber());
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {}: {}", chatId, e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É.
     *
     * @param parcel –ø–æ—Å—ã–ª–∫–∞
     */
    public void sendReminder(TrackParcel parcel) {
        if (!customerService.isNotifiable(parcel.getCustomer(), parcel.getStore())) {
            log.warn("‚õî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è —Ç—Ä–µ–∫–∞ {}", parcel.getNumber());
            return;
        }

        StoreTelegramSettings settings = parcel.getStore().getTelegramSettings();
        if (settings != null && (!settings.isEnabled() || !settings.isRemindersEnabled())) {
            log.debug("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {}", parcel.getStore().getId());
            return;
        }

        Long chatId = getChatId(parcel);
        if (chatId == null) {
            log.warn("‚ö†Ô∏è –ß–∞—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç—Ä–µ–∫–∞ {}", parcel.getNumber());
            return;
        }

        String text;
        if (settings != null && settings.getReminderTemplate() != null && !settings.getReminderTemplate().isBlank()) {
            text = settings.getReminderTemplate()
                    .replace("{track}", parcel.getNumber())
                    .replace("{store}", parcel.getStore().getName());
        } else {
            text = String.format(
                    "üîî –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É %s –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ %s ‚Äî –æ–Ω–∞ –∂–¥—ë—Ç –≤–∞—Å –≤ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏.",
                    parcel.getNumber(),
                    parcel.getStore().getName()
            );
        }

        if (settings != null && settings.getCustomSignature() != null && !settings.getCustomSignature().isBlank()) {
            text += "\n\n" + settings.getCustomSignature();
        }

        SendMessage message = new SendMessage(chatId.toString(), text);

        TelegramClient client = botResolverService.resolveBotForStore(parcel.getStore());

        try {
            client.execute(message);
            log.info("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {} –æ —Ç—Ä–µ–∫–µ {}", chatId, parcel.getNumber());
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {}: {}", chatId, e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     *
     * @param phone   –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     * @param text    —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param storeId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ {@code null} –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–æ—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω —á–∞—Ç
     */
    public boolean sendCustomMessage(String phone, String text, Long storeId) {
        if (phone == null || phone.isBlank() || text == null || text.isBlank()) {
            return false;
        }

        String normalized;
        try {
            normalized = PhoneUtils.normalizePhone(phone);
        } catch (IllegalArgumentException e) {
            log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {}", phone);
            return false;
        }

        var customerOpt = customerRepository.findByPhone(normalized);
        if (customerOpt.isEmpty()) {
            log.warn("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {} –Ω–µ –Ω–∞–π–¥–µ–Ω", normalized);
            return false;
        }

        var links = linkRepository.findActiveLinksByPhone(normalized);
        if (storeId != null) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –±–æ—Ç—É
            links = links.stream()
                    .filter(l -> storeId == 0
                            ? l.getStore() == null
                            : l.getStore() != null && l.getStore().getId().equals(storeId))
                    .toList();
        }
        if (links.isEmpty()) {
            log.warn("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {}", normalized);
            return false;
        }

        boolean sent = false;
        for (CustomerTelegramLink link : links) {
            SendMessage message = new SendMessage(link.getTelegramChatId().toString(), text);
            TelegramClient client = botResolverService.resolveBotForStore(link.getStore());
            try {
                client.execute(message);
                sent = true;
                log.info("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {}", link.getTelegramChatId());
            } catch (TelegramApiException e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {}: {}", link.getTelegramChatId(), e.getMessage(), e);
            }
        }

        return sent;
    }


    // –ü–æ–ª—É—á–µ–Ω–∏–µ chatId –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–∞–≥–∞–∑–∏–Ω—É
    private Long getChatId(TrackParcel parcel) {
        if (parcel == null || parcel.getCustomer() == null || parcel.getStore() == null) {
            return null;
        }

        return linkRepository.findByCustomerIdAndStoreId(
                        parcel.getCustomer().getId(),
                        parcel.getStore().getId())
                .filter(CustomerTelegramLink::isTelegramConfirmed)
                .filter(CustomerTelegramLink::isNotificationsEnabled)
                .map(CustomerTelegramLink::getTelegramChatId)
                .orElse(null);
    }

}