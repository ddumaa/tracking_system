package com.project.tracking_system.service.telegram;

import com.project.tracking_system.entity.BuyerStatus;
import com.project.tracking_system.entity.GlobalStatus;
import com.project.tracking_system.entity.TrackParcel;
import com.project.tracking_system.entity.StoreTelegramSettings;
import com.project.tracking_system.mapper.BuyerStatusMapper;
import com.project.tracking_system.service.customer.CustomerService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;
import com.project.tracking_system.service.telegram.TelegramClientFactory;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram-–ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class TelegramNotificationService {

    private final TelegramClient telegramClient;
    private final CustomerService customerService;
    private final TelegramClientFactory telegramClientFactory;
    /** –ö—ç—à –∫–ª–∏–µ–Ω—Ç–æ–≤ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–æ—Ç–æ–≤. */
    private final Map<String, TelegramClient> clientCache = new ConcurrentHashMap<>();

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—ã–ª–∫–∏.
     * <p>
     * –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –º–∞–≥–∞–∑–∏–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–¥–ø–∏—Å—å, –æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞
     * –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è.
     * </p>
     *
     * @param parcel –ø–æ—Å—ã–ª–∫–∞
     * @param status –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
     */
    public void sendStatusUpdate(TrackParcel parcel, GlobalStatus status) {
        if (!customerService.isNotifiable(parcel.getCustomer(), parcel.getStore())) {
            log.warn("‚õî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è —Ç—Ä–µ–∫–∞ {}", parcel.getNumber());
            return;
        }

        StoreTelegramSettings settings = parcel.getStore().getTelegramSettings();
        if (settings != null && !settings.isEnabled()) {
            log.debug("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {}", parcel.getStore().getId());
            return;
        }

        BuyerStatus buyerStatus = BuyerStatusMapper.map(status);
        if (buyerStatus == null) {
            log.debug("–°—Ç–∞—Ç—É—Å {} –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", status);
            return;
        }

        Long chatId = getChatId(parcel);
        if (chatId == null) {
            log.warn("‚ö†Ô∏è –ß–∞—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç—Ä–µ–∫–∞ {}", parcel.getNumber());
            return;
        }
        String text;
        if (settings != null && settings.getTemplatesMap().containsKey(buyerStatus)) {
            text = settings.getTemplatesMap().get(buyerStatus)
                    .replace("{track}", parcel.getNumber())
                    .replace("{store}", parcel.getStore().getName());
        } else {
            text = buyerStatus.formatMessage(parcel.getNumber(), parcel.getStore().getName());
        }

        if (settings != null && settings.getCustomSignature() != null && !settings.getCustomSignature().isBlank()) {
            text += "\n\n" + settings.getCustomSignature();
        }

        SendMessage message = new SendMessage(chatId.toString(), text);
        TelegramClient client = resolveClient(settings);

        try {
            client.execute(message);
            log.info("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {} (—Å—Ç–∞—Ç—É—Å {}) –≤ —á–∞—Ç {} –¥–ª—è —Ç—Ä–µ–∫–∞ {}",
                    text, status, chatId, parcel.getNumber());
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {}: {}", chatId, e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É.
     *
     * @param parcel –ø–æ—Å—ã–ª–∫–∞
     */
    public void sendReminder(TrackParcel parcel) {
        if (!customerService.isNotifiable(parcel.getCustomer(), parcel.getStore())) {
            log.warn("‚õî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è —Ç—Ä–µ–∫–∞ {}", parcel.getNumber());
            return;
        }

        StoreTelegramSettings settings = parcel.getStore().getTelegramSettings();
        if (settings != null && (!settings.isEnabled() || !settings.isRemindersEnabled())) {
            log.debug("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {}", parcel.getStore().getId());
            return;
        }

        Long chatId = getChatId(parcel);
        if (chatId == null) {
            log.warn("‚ö†Ô∏è –ß–∞—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç—Ä–µ–∫–∞ {}", parcel.getNumber());
            return;
        }

        String text;
        if (settings != null && settings.getReminderTemplate() != null && !settings.getReminderTemplate().isBlank()) {
            text = settings.getReminderTemplate()
                    .replace("{track}", parcel.getNumber())
                    .replace("{store}", parcel.getStore().getName());
        } else {
            text = String.format(
                    "üîî –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É %s –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ %s ‚Äî –æ–Ω–∞ –∂–¥—ë—Ç –≤–∞—Å –≤ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏.",
                    parcel.getNumber(),
                    parcel.getStore().getName()
            );
        }

        if (settings != null && settings.getCustomSignature() != null && !settings.getCustomSignature().isBlank()) {
            text += "\n\n" + settings.getCustomSignature();
        }

        SendMessage message = new SendMessage(chatId.toString(), text);

        TelegramClient client = resolveClient(settings);

        try {
            client.execute(message);
            log.info("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {} –æ —Ç—Ä–µ–∫–µ {}", chatId, parcel.getNumber());
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {}: {}", chatId, e.getMessage(), e);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ TelegramClient —Å —É—á—ë—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    private TelegramClient resolveClient(StoreTelegramSettings settings) {
        if (settings == null) {
            return telegramClient;
        }

        String token = settings.getBotToken();
        String username = settings.getBotUsername();

        // –°—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π –∏ –¥–ª—è –Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–º—è –±–æ—Ç–∞
        if (token == null || token.isBlank() || username == null) {
            return telegramClient;
        }

        // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –±–µ—Ä—ë–º –∏–∑ –∫—ç—à–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        return clientCache.computeIfAbsent(token, telegramClientFactory::create);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ chatId –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–∑ –ø–æ—Å—ã–ª–∫–∏
    private Long getChatId(TrackParcel parcel) {
        if (parcel == null || parcel.getCustomer() == null) {
            return null;
        }
        return parcel.getCustomer().getTelegramChatId();
    }

}