package com.project.tracking_system.service.telegram;

import com.project.tracking_system.service.customer.CustomerRegistrationService;
import com.project.tracking_system.utils.PhoneUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Contact;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;

/**
 * Telegram-–±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
 */
@Component
@Slf4j
public class BuyerTelegramBot {

    private final CustomerRegistrationService registrationService;

    @Value("${telegrambots.bots[0].botUsername}")
    private String botUsername;

    @Value("${telegrambots.bots[0].botToken}")
    private String botToken;

    /**
     * –°–æ–∑–¥–∞—ë—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
     *
     * @param registrationService —Å–µ—Ä–≤–∏—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
     */
    public BuyerTelegramBot(CustomerRegistrationService registrationService) {
        this.registrationService = registrationService;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –±–æ—Ç–∞ –≤ Telegram.
     *
     * @return –∏–º—è –±–æ—Ç–∞
     */
    @Override
    public String getBotUsername() {
        return botUsername;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram.
     *
     * @return —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
     */
    @Override
    public String getBotToken() {
        return botToken;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    @Override
    public void onUpdateReceived(Update update) {

        log.info("üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", update);

        if (update.hasMessage()) {
            String text = update.getMessage().getText();
            if (text != null && text.startsWith("/start")) {
                log.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.");
                sendSharePhoneKeyboard(update.getMessage().getChatId());
                return;
            }

            Contact contact = update.getMessage().getContact();
            log.info("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {}", update.getMessage().getText());

            if (contact != null) {
                handleContact(update);
            }
        }
    }

    private void sendSharePhoneKeyboard(Long chatId) {
        KeyboardButton button = new KeyboardButton("\uD83D\uDCF1 –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º");
        button.setRequestContact(true);
        KeyboardRow row = new KeyboardRow(List.of(button));

        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup(List.of(row));
        markup.setResizeKeyboard(true);
        markup.setOneTimeKeyboard(true);

        SendMessage message = new SendMessage(chatId.toString(), "üëã –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—ã–ª–∫–∞—Ö, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
        message.setReplyMarkup(markup);

        log.info("üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–º–µ—Ä–∞ –≤ —á–∞—Ç {}", chatId);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", e);
        }
    }

    private void handleContact(Update update) {
        String rawPhone = update.getMessage().getContact().getPhoneNumber();
        String phone = PhoneUtils.normalizePhone(rawPhone);
        Long chatId = update.getMessage().getChatId();
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            registrationService.linkTelegramToCustomer(chatId, phone);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–µ
            SendMessage confirm = new SendMessage(chatId.toString(), "–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!");
            try {
                execute(confirm);
            } catch (TelegramApiException e) {
                log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", e);
            }
        } catch (Exception e) {
            // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} –∫ —á–∞—Ç—É {}", phone, chatId, e);
        }
    }
}