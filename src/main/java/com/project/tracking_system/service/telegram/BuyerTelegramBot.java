package com.project.tracking_system.service.telegram;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.project.tracking_system.dto.ActionRequiredReturnRequestDto;
import com.project.tracking_system.dto.CustomerStatisticsDTO;
import com.project.tracking_system.dto.ReturnRequestUpdateResponse;
import com.project.tracking_system.dto.TelegramParcelInfoDTO;
import com.project.tracking_system.dto.TelegramParcelsOverviewDTO;
import com.project.tracking_system.entity.*;
import com.project.tracking_system.service.admin.AdminNotificationService;
import com.project.tracking_system.service.customer.CustomerTelegramService;
import com.project.tracking_system.utils.PhoneUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.security.access.AccessDeniedException;
import org.telegram.telegrambots.longpolling.interfaces.LongPollingUpdateConsumer;
import org.telegram.telegrambots.longpolling.starter.SpringLongPollingBot;
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Contact;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.message.MaybeInaccessibleMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMemberUpdated;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Optional;
import java.util.Objects;
import java.util.function.Function;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.nio.charset.StandardCharsets;

/**
 * Telegram-–±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
 */
@Component
@Slf4j
public class BuyerTelegramBot implements SpringLongPollingBot, LongPollingSingleThreadUpdateConsumer, TelegramAnnouncementSender {

    private static final String BUTTON_STATS = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞";
    private static final String BUTTON_PARCELS = "üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏";
    private static final String BUTTON_PARCELS_DELIVERED = "üì¨ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ";
    private static final String BUTTON_PARCELS_AWAITING = "üè¨ –ñ–¥—É—Ç –∑–∞–±–æ—Ä–∞";
    private static final String BUTTON_PARCELS_TRANSIT = "üöö –í –ø—É—Ç–∏";
    private static final String BUTTON_RETURNS = "üîÅ –í–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ–±–º–µ–Ω—ã";
    private static final String BUTTON_RETURNS_ACTIVE = "üìÇ –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏";
    private static final String BUTTON_RETURNS_CREATE = "üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É";
    private static final String BUTTON_RETURNS_DONE = "–•–æ—Ä–æ—à–æ";
    private static final String BUTTON_SETTINGS = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏";
    private static final String BUTTON_HELP = "‚ùì –ü–æ–º–æ—â—å";
    private static final String BUTTON_MENU = "üè† –ú–µ–Ω—é";
    private static final String BUTTON_BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥";
    private static final String BUTTON_OUTCOME_OK = "–û–∫";
    private static final String BUTTON_OUTCOME_BACK = "–ù–∞–∑–∞–¥";

    private static final String CALLBACK_BACK_TO_MENU = "menu:back";
    private static final String CALLBACK_MENU_SHOW_STATS = "menu:stats";
    private static final String CALLBACK_MENU_SHOW_PARCELS = "menu:parcels";
    private static final String CALLBACK_MENU_RETURNS_EXCHANGES = "menu:returns";
    private static final String CALLBACK_MENU_SHOW_SETTINGS = "menu:settings";
    private static final String CALLBACK_MENU_SHOW_HELP = "menu:help";
    private static final String CALLBACK_PARCELS_DELIVERED = "parcels:delivered";
    private static final String CALLBACK_PARCELS_AWAITING = "parcels:awaiting";
    private static final String CALLBACK_PARCELS_TRANSIT = "parcels:transit";
    private static final String CALLBACK_RETURNS_SHOW_ACTIVE = "returns:active";
    private static final String CALLBACK_RETURNS_CREATE_REQUEST = "returns:create";
    private static final String CALLBACK_RETURNS_CREATE_TYPE_RETURN = "returns:create:type:return";
    private static final String CALLBACK_RETURNS_CREATE_TYPE_EXCHANGE = "returns:create:type:exchange";
    private static final String CALLBACK_RETURNS_CREATE_STORE_PREFIX = "returns:create:store:";
    private static final String CALLBACK_RETURNS_CREATE_PARCEL_PREFIX = "returns:create:parcel:";
    private static final String CALLBACK_RETURNS_REASON_PREFIX = "returns:create:reason:";
    private static final String CALLBACK_RETURNS_REASON_NOT_FIT = CALLBACK_RETURNS_REASON_PREFIX + "not_fit";
    private static final String CALLBACK_RETURNS_REASON_DEFECT = CALLBACK_RETURNS_REASON_PREFIX + "defect";
    private static final String CALLBACK_RETURNS_REASON_DISLIKE = CALLBACK_RETURNS_REASON_PREFIX + "dislike";
    private static final String CALLBACK_RETURNS_REASON_OTHER = CALLBACK_RETURNS_REASON_PREFIX + "other";
    private static final String CALLBACK_RETURNS_ACTIVE_SELECT_PREFIX = "returns:active:select:";
    private static final String CALLBACK_RETURNS_ACTIVE_TRACK_PREFIX = "returns:active:track:";
    private static final String CALLBACK_RETURNS_ACTIVE_COMMENT_PREFIX = "returns:active:comment:";
    private static final String CALLBACK_RETURNS_ACTIVE_CANCEL_PREFIX = "returns:active:cancel:";
    private static final String CALLBACK_RETURNS_ACTIVE_CANCEL_EXCHANGE_PREFIX = "returns:active:cancel_exchange:";
    private static final String CALLBACK_RETURNS_ACTIVE_CONVERT_PREFIX = "returns:active:convert:";
    private static final String CALLBACK_RETURNS_ACTIVE_BACK_TO_LIST = "returns:active:list";
    private static final String CALLBACK_RETURNS_DONE = "returns:done";
    private static final String CALLBACK_SETTINGS_TOGGLE_NOTIFICATIONS = "settings:toggle_notifications";
    private static final String CALLBACK_SETTINGS_CONFIRM_NAME = "settings:confirm_name";
    private static final String CALLBACK_SETTINGS_EDIT_NAME = "settings:edit_name";
    private static final String CALLBACK_NAME_CONFIRM = "name:confirm";
    private static final String CALLBACK_NAME_EDIT = "name:edit";
    private static final String CALLBACK_ANNOUNCEMENT_ACK = "announcement:ack";
    private static final String CALLBACK_NAVIGATE_BACK = "nav:back";

    private static final String NO_PARCELS_PLACEHOLDER = "‚Ä¢ –Ω–µ—Ç –ø–æ—Å—ã–ª–æ–∫";

    private static final String PARCEL_RETURN_FLOW_STARTED =
            "üì© –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ –ø–æ—Å—ã–ª–∫–µ %s. –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—á–∏–Ω—É –Ω–∏–∂–µ.";
    private static final String PARCEL_RETURN_REASON_REMINDER =
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.";
    private static final String PARCEL_RETURN_REASON_SELECTED_ACK = "–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞";
    private static final String RETURN_REASON_LABEL_NOT_FIT = "–ù–µ –ø–æ–¥–æ—à–ª–æ";
    private static final String RETURN_REASON_LABEL_DEFECT = "–ë—Ä–∞–∫";
    private static final String RETURN_REASON_LABEL_DISLIKE = "–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å";
    private static final String RETURN_REASON_LABEL_OTHER = "–î—Ä—É–≥–æ–µ";
    private static final String PARCEL_RETURN_FINISHED_TEMPLATE =
            "‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å—ã–ª–∫–∏ %s.\n‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: %s\n‚Ä¢ –î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: %s\n‚ÑπÔ∏è –ï—Å–ª–∏ —Ç—Ä–µ–∫ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª ¬´üìÇ –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏¬ª.";
    private static final String PARCEL_RETURN_NO_COMMENT = "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è";
    private static final String PARCEL_RETURN_NO_TRACK = "–Ω–µ —É–∫–∞–∑–∞–Ω";
    private static final String PARCEL_RETURN_DATE_UNKNOWN = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞";
    private static final String PARCEL_RETURN_REASON_UNKNOWN = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞";
    private static final String PARCEL_RETURN_ALREADY_REGISTERED_TEMPLATE =
            "‚ÑπÔ∏è –ü–æ –ø–æ—Å—ã–ª–∫–µ %s —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞. –ú—ã –¥–µ—Ä–∂–∏–º –µ—ë –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ.";
    private static final String PARCEL_RETURN_STEP_ACK = "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ";
    private static final String PARCEL_EXCHANGE_REASON_REMINDER =
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±–º–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.";
    private static final String PARCEL_RETURN_CONTEXT_LOST =
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª \"üîÅ –í–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ–±–º–µ–Ω—ã\" ‚Üí ¬´üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª.";
    private static final DateTimeFormatter PARCEL_RETURN_DATE_FORMAT = DateTimeFormatter.ofPattern("d.MM.yyyy");
    private static final String PARCEL_RETURN_STATUS_INVALID =
            "‚ö†Ô∏è –í–µ—Ä–Ω—É—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å—ã–ª–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ¬´üì¨ –ü–æ–ª—É—á–µ–Ω–∞¬ª. –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—â—ë –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    private static final String PARCEL_RETURN_ACCESS_DENIED =
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ—Å—ã–ª–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üîÅ –í–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ–±–º–µ–Ω—ã¬ª ‚Üí ¬´üÜï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª.";
    private static final String PARCEL_RETURN_REGISTRATION_FAILED =
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
    private static final String PARCEL_RETURN_IDEMPOTENCY_CONFLICT =
            "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.";
    private static final String PARCEL_EXCHANGE_FAILED =
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–º–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";

    private static final String RETURNS_MENU_TEXT =
            "üîÅ –í–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ–±–º–µ–Ω—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
    private static final String RETURNS_ACTIVE_TITLE = "üìÇ –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏";
    private static final String RETURNS_ACTIVE_EMPTY_PLACEHOLDER = "‚Ä¢ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç";
    private static final String RETURNS_ACTIVE_CONTACT_HINT = "üì± –ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.";
    private static final String RETURNS_CREATE_TITLE = "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏";
    private static final String RETURNS_CREATE_CONTACT_HINT = "üì± –ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É.";
    private static final String RETURNS_CREATE_TYPE_PROMPT = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:";
    private static final String RETURNS_CREATE_TYPE_RETURN_LABEL = "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç";
    private static final String RETURNS_CREATE_TYPE_EXCHANGE_LABEL = "üîÑ –û–±–º–µ–Ω";
    private static final String RETURNS_CREATE_STORE_PROMPT = "–í—ã –≤—ã–±—Ä–∞–ª–∏ %s. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:";
    private static final String RETURNS_CREATE_PARCEL_PROMPT = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—ã–ª–∫—É –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ %s:";
    private static final String RETURNS_CREATE_NO_PARCELS =
            "‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è.";
    private static final String RETURNS_CREATE_TYPE_ACK = "–¢–∏–ø –≤—ã–±—Ä–∞–Ω";
    private static final String RETURNS_CREATE_STORE_ACK = "–ú–∞–≥–∞–∑–∏–Ω –≤—ã–±—Ä–∞–Ω";
    private static final String RETURNS_CREATE_PARCEL_ACK = "–ü–æ—Å—ã–ª–∫–∞ –≤—ã–±—Ä–∞–Ω–∞";
    private static final String RETURNS_CREATE_REPEAT_HINT =
            "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.";
    private static final String PARCEL_ACTION_BLOCKED_TEXT = "–∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ";

    private static final String RETURNS_ACTIVE_SELECT_PROMPT =
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.";
    private static final String RETURNS_ACTIVE_SELECTED_HEADER_TEMPLATE = "–¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ %s";
    private static final String RETURNS_ACTIVE_DETAILS_TEMPLATE =
            "*–¢—Ä–µ–∫:* %s\n*–ú–∞–≥–∞–∑–∏–Ω:* %s\n*–°—Ç–∞—Ç—É—Å:* %s\n*–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:* %s\n*–ü—Ä–∏—á–∏–Ω–∞:* %s\n*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* %s\n*–û–±—Ä–∞—Ç–Ω—ã–π —Ç—Ä–µ–∫:* %s";
    private static final String RETURNS_ACTIVE_ACTIONS_RETURN =
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:";
    private static final String RETURNS_ACTIVE_ACTIONS_EXCHANGE =
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞:";
    private static final String RETURNS_ACTIVE_ACTION_NOT_AVAILABLE = "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
    private static final String RETURNS_ACTIVE_ACTION_FAILED =
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
    private static final String RETURNS_ACTIVE_TRACK_PROMPT =
            "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ù–µ—Ç¬ª, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ.";
    private static final String RETURNS_ACTIVE_COMMENT_PROMPT =
            "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ù–µ—Ç¬ª.";
    private static final String RETURNS_ACTIVE_TRACK_SAVED =
            "‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.";
    private static final String RETURNS_ACTIVE_COMMENT_SAVED =
            "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω.";
    private static final String RETURNS_ACTIVE_CANCEL_RETURN_SUCCESS =
            "‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú—ã —É–≤–µ–¥–æ–º–∏–º –º–∞–≥–∞–∑–∏–Ω.";
    private static final String RETURNS_ACTIVE_CANCEL_EXCHANGE_SUCCESS =
            "‚ÑπÔ∏è –û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω. –ú—ã —É–≤–µ–¥–æ–º–∏–º –º–∞–≥–∞–∑–∏–Ω.";
    private static final String RETURNS_ACTIVE_CONVERT_SUCCESS =
            "‚úÖ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –≤–æ–∑–≤—Ä–∞—Ç. –í—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –ø–æ–∑–¥–Ω–µ–µ.";
    private static final String RETURNS_ACTIVE_NO_SELECTION =
            "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è.";
    private static final String RETURNS_ACTIVE_UPDATE_INVALID_TRACK =
            "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–∫ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ù–µ—Ç¬ª, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ.";
    private static final String RETURNS_ACTIVE_COMMENT_INVALID =
            "‚ö†Ô∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ ¬´–ù–µ—Ç¬ª –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.";
    private static final String RETURNS_ACTIVE_UPDATE_FAILED =
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
    private static final String BUTTON_RETURNS_BACK_TO_LIST = "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É";
    private static final String BUTTON_RETURNS_ACTION_TRACK = "üìÆ –£–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫";
    private static final String BUTTON_RETURNS_ACTION_COMMENT = "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π";
    private static final String BUTTON_RETURNS_ACTION_CANCEL_RETURN = "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç";
    private static final String BUTTON_RETURNS_ACTION_CANCEL_EXCHANGE = "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –æ–±–º–µ–Ω";
    private static final String BUTTON_RETURNS_ACTION_CONVERT = "‚Ü©Ô∏è –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –≤–æ–∑–≤—Ä–∞—Ç";

    private static final Base64.Encoder STORE_KEY_ENCODER = Base64.getUrlEncoder().withoutPadding();
    private static final Base64.Decoder STORE_KEY_DECODER = Base64.getUrlDecoder();

    private static final String TELEGRAM_PARSE_MODE = ParseMode.MARKDOWNV2;

    /**
     * –†–∞–∑–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ –ø–æ—Å—ã–ª–æ–∫, –≥–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏.
     */
    private enum ParcelsSection {
        DELIVERED,
        WAITING_FOR_PICKUP,
        IN_TRANSIT,
        GENERIC
    }

    private static final String NAME_CONFIRMATION_MISSING_MESSAGE =
            "‚ö†Ô∏è –ü–æ–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –§–ò–û –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.";
    private static final String NAME_EDIT_ANCHOR_TEXT =
            "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´üè† –ú–µ–Ω—é¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.";

    private final TelegramClient telegramClient;
    private final CustomerTelegramService telegramService;
    private final AdminNotificationService adminNotificationService;
    private final FullNameValidator fullNameValidator;
    private final ChatSessionRepository chatSessionRepository;
    private final ObjectMapper objectMapper;
    private final String botToken;

    /**
     * –°–æ–∑–¥–∞—ë—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
     *
     * @param telegramClient       –∫–ª–∏–µ–Ω—Ç Telegram, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π Spring
     * @param token                —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
     * @param telegramService      —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∫ Telegram
     * @param fullNameValidator    –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –§–ò–û
     * @param chatSessionRepository —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
     * @param objectMapper         –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ä–µ–∫—Ç–æ–≤ Telegram –≤ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     */
    public BuyerTelegramBot(TelegramClient telegramClient,
                            @Value("${telegram.bot.token:}") String token,
                            CustomerTelegramService telegramService,
                            AdminNotificationService adminNotificationService,
                            FullNameValidator fullNameValidator,
                            ChatSessionRepository chatSessionRepository,
                            ObjectMapper objectMapper) {
        this.telegramClient = telegramClient;
        this.botToken = token;
        this.telegramService = telegramService;
        this.adminNotificationService = adminNotificationService;
        this.fullNameValidator = fullNameValidator;
        this.chatSessionRepository = chatSessionRepository;
        this.objectMapper = objectMapper;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram.
     *
     * @return —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
     */
    @Override
    public String getBotToken() {
        return botToken;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ –∫–∞–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.
     *
     * @return –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram
     */
    @Override
    public LongPollingUpdateConsumer getUpdatesConsumer() {
        return this;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram, —Ä–µ–∞–≥–∏—Ä—É—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback-–∑–∞–ø—Ä–æ—Å—ã.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
     */
    @Override
    public void consume(Update update) {
        log.info("üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {}", formatUpdateMetadata(update));

        Long chatIdForActivity = extractChatId(update);
        Customer customerForActivity = null;
        if (chatIdForActivity != null) {
            customerForActivity = telegramService.findByChatId(chatIdForActivity)
                    .orElse(null);
            synchronizeAnnouncementState(chatIdForActivity, customerForActivity);
        }

        if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
            return;
        }

        if (update.hasMyChatMember()) {
            handleMyChatMember(update.getMyChatMember());
            return;
        }

        if (!update.hasMessage() || update.getMessage() == null) {
            return;
        }

        var message = update.getMessage();
        Long chatId = message.getChatId();

        boolean keyboardRemoved = detectPersistentKeyboardRemoval(chatId, message);
        restorePersistentKeyboardIfNeeded(chatId, keyboardRemoved);

        if (message.hasText()) {
            handleTextMessage(chatId, message.getText(), customerForActivity);
        }

        if (message.hasContact()) {
            handleContact(chatId, message, message.getContact());
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º Telegram.
     *
     * @param update –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram
     * @return –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –∏–ª–∏ {@code null}, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ–ª—å–∑—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
     */
    private Long extractChatId(Update update) {
        if (update == null) {
            return null;
        }

        if (update.hasCallbackQuery()) {
            CallbackQuery callbackQuery = update.getCallbackQuery();
            if (callbackQuery != null) {
                MaybeInaccessibleMessage callbackMessage = callbackQuery.getMessage();
                if (callbackMessage != null) {
                    return callbackMessage.getChatId();
                }
            }
        }

        if (update.hasMessage()) {
            Message message = update.getMessage();
            if (message != null && message.getChat() != null) {
                return message.getChatId();
            }
        }

        if (update.hasMyChatMember()
                && update.getMyChatMember() != null
                && update.getMyChatMember().getChat() != null) {
            return update.getMyChatMember().getChat().getId();
        }

        return null;
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     * <p>
     * –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–∏–ª –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ,
     * –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —á—Ç–æ–±—ã –±–∞–Ω–Ω–µ—Ä
     * –≤–Ω–æ–≤—å –ø–æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.
     * </p>
     *
     * @param chatId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —á–∞—Ç—É
     */
    private void synchronizeAnnouncementState(Long chatId, Customer customer) {
        if (chatId == null || customer == null || !customer.isTelegramConfirmed()) {
            return;
        }

        adminNotificationService.findActiveNotification()
                .ifPresent(notification -> {
                    ChatSession session = chatSessionRepository.find(chatId).orElse(null);
                    Long storedId = session != null ? session.getCurrentNotificationId() : null;
                    ZonedDateTime storedUpdatedAt = session != null ? session.getAnnouncementUpdatedAt() : null;

                    boolean shouldReset = storedId == null
                            || !notification.getId().equals(storedId)
                            || isNotificationRefreshed(notification.getUpdatedAt(), storedUpdatedAt);

                    if (shouldReset) {
                        Integer anchorId = session != null ? session.getAnchorMessageId() : null;
                        chatSessionRepository.updateAnnouncement(chatId,
                                notification.getId(),
                                anchorId,
                                notification.getUpdatedAt());
                    }
                });
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞ –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω.
     * <p>
     * –ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram, –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
     * –∏ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–º–µ—Å—Ç–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π. –î–ª—è –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö
     * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç —Å –∫–Ω–æ–ø–∫–æ–π ¬´üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª.
     * </p>
     *
     * @param myChatMember –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è chat_member –æ—Ç Telegram
     */
    private void handleMyChatMember(ChatMemberUpdated myChatMember) {
        if (myChatMember == null || myChatMember.getChat() == null) {
            return;
        }

        Long chatId = myChatMember.getChat().getId();
        if (chatId == null) {
            return;
        }

        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isPresent()) {
            transitionToState(chatId, BuyerChatState.IDLE);
            chatSessionRepository.markKeyboardHidden(chatId);
            sendMainMenu(chatId);
            return;
        }

        transitionToState(chatId, BuyerChatState.AWAITING_CONTACT);
        sendSharePhoneKeyboard(chatId);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void handleTextMessage(Long chatId, String text, Customer knownCustomer) {
        if (chatId == null || text == null) {
            return;
        }

        String trimmed = text.trim();

        if (BUTTON_MENU.equals(trimmed) || "/menu".equals(trimmed)) {
            handleMenuCommand(chatId);
            return;
        }

        BuyerChatState state = getState(chatId);

        if (state == BuyerChatState.AWAITING_CONTACT) {
            if ("/start".equals(trimmed)) {
                handleStartWhileAwaitingContact(chatId);
                return;
            }

            if (trimmed.isEmpty() || trimmed.startsWith("/")) {
                remindContactRequired(chatId);
                return;
            }

            handleAwaitedPhoneText(chatId, trimmed);
            return;
        }

        if ("/start".equals(trimmed)) {
            handleStartCommand(chatId, knownCustomer);
            return;
        }

        if (state == BuyerChatState.AWAITING_RETURN_REASON) {
            sendSimpleMessage(chatId, PARCEL_RETURN_REASON_REMINDER);
            return;
        }

        if (state == BuyerChatState.AWAITING_EXCHANGE_REASON) {
            sendSimpleMessage(chatId, PARCEL_EXCHANGE_REASON_REMINDER);
            return;
        }

        if (state == BuyerChatState.AWAITING_REQUEST_TYPE) {
            remindRequestTypeSelection(chatId);
            return;
        }

        if (state == BuyerChatState.AWAITING_STORE_SELECTION) {
            remindStoreSelection(chatId);
            return;
        }

        if (state == BuyerChatState.AWAITING_PARCEL_SELECTION) {
            remindParcelSelection(chatId);
            return;
        }

        if (state == BuyerChatState.AWAITING_ACTIVE_REQUEST_SELECTION) {
            remindRequestAction(chatId);
            return;
        }

        if (state == BuyerChatState.AWAITING_TRACK_UPDATE
                || state == BuyerChatState.AWAITING_COMMENT_UPDATE) {
            handleTrackUpdateInput(chatId, trimmed);
            return;
        }

        if (trimmed.isEmpty()) {
            return;
        }

        if (state == BuyerChatState.AWAITING_NAME_INPUT) {
            if (trimmed.startsWith("/") || isNameControlCommand(trimmed)) {
                remindNameRequired(chatId);
            } else {
                handleNameInput(chatId, trimmed);
            }
            return;
        }

        handleIdleText(chatId, trimmed);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
     *
     * @param callbackQuery callback-–∑–∞–ø—Ä–æ—Å –æ—Ç Telegram
     */
    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        if (callbackQuery == null) {
            return;
        }

        String data = callbackQuery.getData();
        MaybeInaccessibleMessage callbackMessage = callbackQuery.getMessage();
        Long chatId = callbackMessage != null ? callbackMessage.getChatId() : null;
        Integer messageId = callbackMessage != null ? callbackMessage.getMessageId() : null;

        if (data == null || chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        ChatSession session = chatSessionRepository.find(chatId).orElse(null);
        if (isCallbackFromOutdatedMessage(messageId, session)) {
            handleOutdatedCallback(chatId, messageId, callbackQuery, session);
            return;
        }

        rememberAnchorMessage(chatId, messageId);

        boolean reasonNavigation = isReasonSelectionNavigation(data, session);

        if (CALLBACK_RETURNS_CREATE_TYPE_RETURN.equals(data)) {
            handleReturnRequestTypeSelection(chatId, callbackQuery, ReturnRequestType.RETURN);
            return;
        }

        if (CALLBACK_RETURNS_CREATE_TYPE_EXCHANGE.equals(data)) {
            handleReturnRequestTypeSelection(chatId, callbackQuery, ReturnRequestType.EXCHANGE);
            return;
        }

        if (data.startsWith(CALLBACK_RETURNS_CREATE_STORE_PREFIX)) {
            handleReturnRequestStoreSelection(chatId, callbackQuery, data);
            return;
        }

        if (data.startsWith(CALLBACK_RETURNS_CREATE_PARCEL_PREFIX)) {
            handleReturnRequestParcelSelection(chatId, callbackQuery, data);
            return;
        }

        if (data.startsWith(CALLBACK_RETURNS_REASON_PREFIX) || reasonNavigation) {
            boolean exchangeContext = session != null
                    && (session.getState() == BuyerChatState.AWAITING_EXCHANGE_REASON
                    || session.getLastScreen() == BuyerBotScreen.RETURNS_EXCHANGE_REASON);
            if (exchangeContext) {
                handleExchangeReasonCallback(chatId, callbackQuery, data);
            } else {
                handleReturnReasonCallback(chatId, callbackQuery, data);
            }
            return;
        }

        if (data.startsWith(CALLBACK_RETURNS_ACTIVE_SELECT_PREFIX)) {
            handleActiveRequestSelection(chatId, callbackQuery, data);
            return;
        }

        if (data.startsWith(CALLBACK_RETURNS_ACTIVE_TRACK_PREFIX)) {
            handleActiveRequestTrack(chatId, callbackQuery, data);
            return;
        }

        if (data.startsWith(CALLBACK_RETURNS_ACTIVE_COMMENT_PREFIX)) {
            handleActiveRequestComment(chatId, callbackQuery, data);
            return;
        }

        if (data.startsWith(CALLBACK_RETURNS_ACTIVE_CANCEL_PREFIX)) {
            handleActiveRequestCancelReturn(chatId, callbackQuery, data);
            return;
        }

        if (data.startsWith(CALLBACK_RETURNS_ACTIVE_CANCEL_EXCHANGE_PREFIX)) {
            handleActiveRequestCancelExchange(chatId, callbackQuery, data);
            return;
        }

        if (data.startsWith(CALLBACK_RETURNS_ACTIVE_CONVERT_PREFIX)) {
            handleActiveRequestConvert(chatId, callbackQuery, data);
            return;
        }

        if (CALLBACK_RETURNS_ACTIVE_BACK_TO_LIST.equals(data)) {
            handleActiveRequestBackToList(chatId, callbackQuery);
            return;
        }

        switch (data) {
            case CALLBACK_MENU_SHOW_STATS -> handleMenuOpenStats(chatId, callbackQuery);
            case CALLBACK_MENU_SHOW_PARCELS -> handleMenuOpenParcels(chatId, callbackQuery);
            case CALLBACK_MENU_RETURNS_EXCHANGES -> handleMenuOpenReturns(chatId, callbackQuery);
            case CALLBACK_MENU_SHOW_SETTINGS -> handleMenuOpenSettings(chatId, callbackQuery);
            case CALLBACK_MENU_SHOW_HELP -> handleMenuOpenHelp(chatId, callbackQuery);
            case CALLBACK_PARCELS_DELIVERED -> handleParcelsDeliveredCallback(chatId, callbackQuery);
            case CALLBACK_PARCELS_AWAITING -> handleParcelsAwaitingCallback(chatId, callbackQuery);
            case CALLBACK_PARCELS_TRANSIT -> handleParcelsTransitCallback(chatId, callbackQuery);
            case CALLBACK_RETURNS_SHOW_ACTIVE -> handleReturnsShowActive(chatId, callbackQuery);
            case CALLBACK_RETURNS_CREATE_REQUEST -> handleReturnsCreateRequest(chatId, callbackQuery);
            case CALLBACK_RETURNS_DONE -> handleReturnCompletionAcknowledgement(chatId, callbackQuery);
            case CALLBACK_ANNOUNCEMENT_ACK -> handleAnnouncementAcknowledgement(chatId, callbackQuery);
            case CALLBACK_SETTINGS_TOGGLE_NOTIFICATIONS ->
                    handleSettingsToggleNotifications(chatId, callbackQuery);
            case CALLBACK_SETTINGS_CONFIRM_NAME ->
                    handleSettingsConfirmName(chatId, callbackQuery);
            case CALLBACK_SETTINGS_EDIT_NAME ->
                    handleSettingsEditName(chatId, callbackQuery);
            case CALLBACK_NAME_CONFIRM -> handleNameConfirmationCallback(chatId, callbackQuery);
            case CALLBACK_NAME_EDIT -> handleNameEditCallback(chatId, callbackQuery);
            case CALLBACK_BACK_TO_MENU ->
                    handleCallbackBackToMenu(chatId, callbackQuery);
            case CALLBACK_NAVIGATE_BACK -> handleNavigateBack(chatId, callbackQuery);
            default -> answerCallbackQuery(callbackQuery, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        }
    }

    /**
     * –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
     *
     * @param chatId    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param messageId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º
     */
    private void rememberAnchorMessage(Long chatId, Integer messageId) {
        if (chatId == null || messageId == null) {
            return;
        }
        chatSessionRepository.updateAnchor(chatId, messageId);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ —à–∞–≥–∞—Ö –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –æ–±–º–µ–Ω–∞.
     *
     * @param data    –¥–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
     * @param session —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –∏–ª–∏ ¬´–ú–µ–Ω—é¬ª –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã
     */
    private boolean isReasonSelectionNavigation(String data, ChatSession session) {
        if (data == null) {
            return false;
        }
        if (!CALLBACK_NAVIGATE_BACK.equals(data) && !CALLBACK_BACK_TO_MENU.equals(data)) {
            return false;
        }
        BuyerBotScreen lastScreen = session != null ? session.getLastScreen() : null;
        return lastScreen == BuyerBotScreen.RETURNS_RETURN_REASON
                || lastScreen == BuyerBotScreen.RETURNS_EXCHANGE_REASON;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –æ—Ç–ª–∏—á–Ω–æ–º—É –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —è–∫–æ—Ä—è.
     *
     * @param messageId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à—ë–ª callback
     * @param state     —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ callback –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
     */
    private boolean isCallbackFromOutdatedMessage(Integer messageId, ChatSession session) {
        return session != null
                && session.getAnchorMessageId() != null
                && messageId != null
                && !session.getAnchorMessageId().equals(messageId);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param messageId     –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     * @param state         —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —ç–∫—Ä–∞–Ω–µ
     */
    private void handleOutdatedCallback(Long chatId,
                                        Integer messageId,
                                        CallbackQuery callbackQuery,
                                        ChatSession session) {
        answerCallbackQuery(callbackQuery, "–≠–∫—Ä–∞–Ω –æ–±–Ω–æ–≤–ª—ë–Ω");
        removeInlineKeyboard(chatId, messageId);
        BuyerBotScreen screen = session != null ? session.getLastScreen() : null;
        renderScreen(chatId, screen);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–∫–∏.
     *
     * @param chatId    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param messageId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void removeInlineKeyboard(Long chatId, Integer messageId) {
        if (chatId == null || messageId == null) {
            return;
        }

        EditMessageReplyMarkup editMarkup = EditMessageReplyMarkup.builder()
                .chatId(chatId.toString())
                .messageId(messageId)
                .replyMarkup(null)
                .build();
        try {
            telegramClient.execute(editMarkup);
        } catch (TelegramApiException e) {
            log.debug("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è {} –≤ —á–∞—Ç–µ {}", messageId, chatId, e);
        }
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —è–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     * <p>
     * –ú–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ ¬´üè† –ú–µ–Ω—é¬ª, —á—Ç–æ–±—ã –±–æ—Ç –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–∏–ª
     * —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ–≥–æ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     * —É–¥–∞–ª—è–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º. –ü—Ä–∏ —ç—Ç–æ–º
     * —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—à–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void resetMenuAnchorIfAlreadyShown(Long chatId) {
        if (chatId == null) {
            return;
        }

        chatSessionRepository.find(chatId)
                .filter(session -> session.getLastScreen() == BuyerBotScreen.MENU)
                .ifPresent(session -> {
                    Integer anchorMessageId = session.getAnchorMessageId();
                    chatSessionRepository.deactivateAnchor(chatId);
                    if (anchorMessageId != null) {
                        removeInlineKeyboard(chatId, anchorMessageId);
                    }
                });
    }

    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –≤ —è–∫–æ—Ä–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param screen –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
     */
    private void renderScreen(Long chatId, BuyerBotScreen screen) {
        if (chatId == null) {
            return;
        }

        if (screen == null) {
            sendMainMenu(chatId);
            return;
        }

        switch (screen) {
            case MENU -> sendMainMenu(chatId);
            case STATISTICS -> sendStatisticsScreen(chatId);
            case PARCELS -> sendParcelsScreen(chatId);
            case RETURNS_MENU -> sendReturnsMenuScreen(chatId);
            case RETURNS_ACTIVE_REQUESTS -> sendActiveReturnRequestsScreen(chatId);
            case RETURNS_CREATE_TYPE -> showReturnRequestTypeScreen(chatId);
            case RETURNS_CREATE_STORE -> {
                ChatSession session = ensureChatSession(chatId);
                ReturnRequestType type = Optional.ofNullable(session.getReturnRequestType())
                        .orElse(ReturnRequestType.RETURN);
                List<TelegramParcelInfoDTO> available = loadReturnableParcels(chatId);
                showReturnRequestStoreScreen(chatId, type, available);
            }
            case RETURNS_CREATE_REQUEST -> {
                ChatSession session = ensureChatSession(chatId);
                String storeName = session.getReturnStoreName();
                if (storeName == null) {
                    showReturnRequestTypeScreen(chatId);
                    return;
                }
                List<TelegramParcelInfoDTO> available = loadReturnableParcels(chatId);
                Map<String, List<TelegramParcelInfoDTO>> grouped = groupReturnableParcelsByStore(available);
                List<TelegramParcelInfoDTO> storeParcels = grouped.getOrDefault(storeName, List.of());
                if (storeParcels.isEmpty()) {
                    ReturnRequestType type = Optional.ofNullable(session.getReturnRequestType())
                            .orElse(ReturnRequestType.RETURN);
                    showReturnRequestStoreScreen(chatId, type, available);
                    return;
                }
                showReturnRequestParcelScreen(chatId, storeName, storeParcels);
            }
            case RETURNS_RETURN_REASON -> resendReturnReasonPrompt(chatId);
            case RETURNS_EXCHANGE_REASON -> resendExchangeReasonPrompt(chatId);
            case RETURNS_RETURN_COMPLETION -> sendReturnCompletionScreen(chatId);
            case RETURNS_EXCHANGE_COMPLETION -> sendExchangeCompletionScreen(chatId);
            case SETTINGS -> sendSettingsScreen(chatId);
            case HELP -> sendHelpScreen(chatId);
            case NAME_CONFIRMATION -> renderNameConfirmationScreen(chatId);
            case NAME_EDIT_PROMPT -> sendNameEditPromptScreen(chatId);
            default -> sendMainMenu(chatId);
        }
    }


    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –∏–Ω–∏—Ü–∏–∏—Ä—É—è –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—è –º–µ–Ω—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void handleStartCommand(Long chatId, Customer knownCustomer) {
        log.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {}", chatId);
        Optional<Customer> optional = knownCustomer != null
                ? Optional.of(knownCustomer)
                : telegramService.findByChatId(chatId);
        Customer customer = optional.orElse(null);
        synchronizeAnnouncementState(chatId, customer);
        if (optional.isEmpty()) {
            transitionToState(chatId, BuyerChatState.AWAITING_CONTACT);
            sendSharePhoneKeyboard(chatId);
            return;
        }

        BuyerChatState previousState = getState(chatId);
        transitionToState(chatId, BuyerChatState.IDLE);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.
        boolean keyboardHidden = chatSessionRepository.isKeyboardHidden(chatId);
        boolean shouldResetKeyboardFlag = previousState == BuyerChatState.AWAITING_CONTACT || keyboardHidden;
        if (shouldResetKeyboardFlag) {
            chatSessionRepository.markKeyboardHidden(chatId);
        }
        sendMainMenu(chatId, customer);

        if (!ensureValidStoredNameOrRequestUpdate(chatId, customer)) {
            return;
        }

        String fullName = customer.getFullName();
        if (fullName != null
                && !fullName.isBlank()
                && customer.getNameSource() != NameSource.USER_CONFIRMED) {
            sendNameConfirmation(chatId, fullName);
        } else if (fullName == null) {
            promptForName(chatId);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start, –∫–æ–≥–¥–∞ –±–æ—Ç —É–∂–µ –∂–¥—ë—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * <p>
     * –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º.
     * –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞), –±–æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
     * –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∫–æ–º–∞–Ω–¥–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ–±—ã
     * –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –¥–∏–∞–ª–æ–≥.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void handleStartWhileAwaitingContact(Long chatId) {
        if (chatId == null) {
            return;
        }

        boolean contactRequestSent = chatSessionRepository.isContactRequestSent(chatId);
        if (!contactRequestSent) {
            remindContactRequired(chatId);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleMenuOpenStats(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }
        answerCallbackQuery(callbackQuery, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        sendStatisticsScreen(chatId);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏¬ª –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleMenuOpenParcels(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }
        answerCallbackQuery(callbackQuery, "–ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏");
        sendParcelsScreen(chatId);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –∏ –æ–±–º–µ–Ω–æ–≤ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleMenuOpenReturns(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }
        answerCallbackQuery(callbackQuery, "–í–æ–∑–≤—Ä–∞—Ç—ã");
        sendReturnsMenuScreen(chatId);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç–∫—Ä–∞–Ω –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendReturnsMenuScreen(Long chatId) {
        String text = buildReturnsMenuText();
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_MENU);
        InlineKeyboardMarkup markup = buildReturnsMenuKeyboard(navigationPath);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_MENU, navigationPath);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –∏ –æ–±–º–µ–Ω–æ–≤.
     *
     * @return —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
     */
    private String buildReturnsMenuText() {
        return escapeMarkdown(RETURNS_MENU_TEXT);
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.
     *
     * @param navigationPath –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥ –∏ –º–µ–Ω—é
     * @return –≥–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—É–Ω–∫—Ç–∞–º–∏ –º–µ–Ω—é
     */
    private InlineKeyboardMarkup buildReturnsMenuKeyboard(List<BuyerBotScreen> navigationPath) {
        InlineKeyboardButton activeButton = InlineKeyboardButton.builder()
                .text(BUTTON_RETURNS_ACTIVE)
                .callbackData(CALLBACK_RETURNS_SHOW_ACTIVE)
                .build();
        InlineKeyboardButton createButton = InlineKeyboardButton.builder()
                .text(BUTTON_RETURNS_CREATE)
                .callbackData(CALLBACK_RETURNS_CREATE_REQUEST)
                .build();

        List<InlineKeyboardRow> rows = new ArrayList<>();
        rows.add(new InlineKeyboardRow(activeButton));
        rows.add(new InlineKeyboardRow(createButton));
        appendNavigationRow(rows, navigationPath);

        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ –Ω–∞–∂–∞—Ç–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleParcelsDeliveredCallback(Long chatId, CallbackQuery callbackQuery) {
        handleParcelsCategoryCallback(chatId,
                callbackQuery,
                "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ",
                "üì¨ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏",
                TelegramParcelsOverviewDTO::getDelivered,
                ParcelsSection.DELIVERED);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleParcelsAwaitingCallback(Long chatId, CallbackQuery callbackQuery) {
        handleParcelsCategoryCallback(chatId,
                callbackQuery,
                "–ñ–¥—É—Ç –∑–∞–±–æ—Ä–∞",
                "üè¨ –ü–æ—Å—ã–ª–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–±–æ—Ä–∞",
                TelegramParcelsOverviewDTO::getWaitingForPickup,
                ParcelsSection.WAITING_FOR_PICKUP);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ –≤ –ø—É—Ç–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleParcelsTransitCallback(Long chatId, CallbackQuery callbackQuery) {
        handleParcelsCategoryCallback(chatId,
                callbackQuery,
                "–í –ø—É—Ç–∏",
                "üöö –ü–æ—Å—ã–ª–∫–∏ –≤ –ø—É—Ç–∏",
                TelegramParcelsOverviewDTO::getInTransit,
                ParcelsSection.IN_TRANSIT);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleReturnsShowActive(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }
        answerCallbackQuery(callbackQuery, "–¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏");
        sendActiveReturnRequestsScreen(chatId);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleReturnsCreateRequest(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }
        answerCallbackQuery(callbackQuery, "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É");
        if (telegramService.findByChatId(chatId).isEmpty()) {
            List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_CREATE_TYPE);
            InlineKeyboardMarkup markup = buildNavigationKeyboard(navigationPath);
            String text = escapeMarkdown(RETURNS_CREATE_TITLE)
                    + "\n\n"
                    + escapeMarkdown(RETURNS_CREATE_CONTACT_HINT);
            sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_CREATE_TYPE, navigationPath);
            remindContactRequired(chatId);
            return;
        }

        ChatSession session = ensureChatSession(chatId);
        session.clearReturnRequestData();
        session.setState(BuyerChatState.AWAITING_REQUEST_TYPE);
        chatSessionRepository.save(session);
        transitionToState(chatId, BuyerChatState.AWAITING_REQUEST_TYPE);
        showReturnRequestTypeScreen(chatId);
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –æ–±–º–µ–Ω–∞.
     * <p>
     * –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—É—Ç—å –≤ —Å–µ—Å—Å–∏–∏, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –Ω–∞–ª–∏—á–∏–µ —à–∞–≥–∞ ¬´–í–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ–±–º–µ–Ω—ã¬ª,
     * –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É –∫–Ω–æ–ø–∫–∞ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –≤—Å–µ–≥–¥–∞ –≤–µ–¥—ë—Ç –≤ –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤. –ï—Å–ª–∏ —á–∞—Ç –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫
     * –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, –±–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–µ –æ–±—Ä–∞—â–∞—è—Å—å
     * –∫ —Å–µ—Ä–≤–∏—Å—É –∑–∞ –¥–∞–Ω–Ω—ã–º–∏.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendActiveReturnRequestsScreen(Long chatId) {
        ChatSession session = ensureChatSession(chatId);
        session.updateNavigationForScreen(BuyerBotScreen.RETURNS_ACTIVE_REQUESTS, false);
        List<BuyerBotScreen> navigationPath = session.getNavigationPath();

        boolean customerMissing = telegramService.findByChatId(chatId).isEmpty();
        if (customerMissing) {
            session.setState(BuyerChatState.IDLE);
            chatSessionRepository.save(session);

            InlineKeyboardMarkup markup = buildNavigationKeyboard(navigationPath);
            String text = escapeMarkdown(RETURNS_ACTIVE_TITLE)
                    + "\n\n"
                    + escapeMarkdown(RETURNS_ACTIVE_CONTACT_HINT);
            sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_ACTIVE_REQUESTS, navigationPath);
            remindContactRequired(chatId);
            return;
        }

        List<ActionRequiredReturnRequestDto> requests = telegramService.getReturnRequestsRequiringAction(chatId);
        ActionRequiredReturnRequestDto selected = resolveSelectedRequest(session, requests);

        session.setState(BuyerChatState.AWAITING_ACTIVE_REQUEST_SELECTION);
        chatSessionRepository.save(session);

        InlineKeyboardMarkup markup = buildActiveRequestsKeyboard(requests, selected, navigationPath);
        String text = buildActiveReturnRequestsMessage(requests, selected);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_ACTIVE_REQUESTS, navigationPath);

        transitionToState(chatId, BuyerChatState.AWAITING_ACTIVE_REQUEST_SELECTION);
    }

    private ActionRequiredReturnRequestDto resolveSelectedRequest(ChatSession session,
                                                                  List<ActionRequiredReturnRequestDto> requests) {
        if (session == null) {
            return null;
        }
        if (requests == null || requests.isEmpty()) {
            session.clearActiveReturnRequestContext();
            return null;
        }
        Long selectedId = session.getActiveReturnRequestId();
        if (selectedId == null) {
            return null;
        }
        return requests.stream()
                .filter(request -> selectedId.equals(request.requestId()))
                .findFirst()
                .orElseGet(() -> {
                    session.clearActiveReturnRequestContext();
                    return null;
                });
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ.
     */
    private String buildActiveReturnRequestsMessage(List<ActionRequiredReturnRequestDto> requests,
                                                    ActionRequiredReturnRequestDto selected) {
        StringBuilder builder = new StringBuilder();
        builder.append(escapeMarkdown(RETURNS_ACTIVE_TITLE))
                .append(System.lineSeparator())
                .append(System.lineSeparator());

        if (requests == null || requests.isEmpty()) {
            builder.append(RETURNS_ACTIVE_EMPTY_PLACEHOLDER);
            return builder.toString();
        }

        if (selected == null) {
            builder.append(escapeMarkdown(RETURNS_ACTIVE_SELECT_PROMPT));
            return builder.toString();
        }

        String requestTypeLabel = resolveRequestTypeLabel(selected);
        String selectedHeader = String.format(RETURNS_ACTIVE_SELECTED_HEADER_TEMPLATE, requestTypeLabel);
        builder.append('*')
                .append(escapeMarkdown(selectedHeader))
                .append('*')
                .append(System.lineSeparator());
        builder.append(formatSelectedRequestDetails(selected));
        builder.append(System.lineSeparator())
                .append(System.lineSeparator());
        String actionsHint = selected.status() == OrderReturnRequestStatus.EXCHANGE_APPROVED
                ? RETURNS_ACTIVE_ACTIONS_EXCHANGE
                : RETURNS_ACTIVE_ACTIONS_RETURN;
        builder.append(escapeMarkdown(actionsHint));
        return builder.toString();
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–ª–æ–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.
     *
     * @param request –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
     * @return —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞: ¬´–≤–æ–∑–≤—Ä–∞—Ç¬ª –∏–ª–∏ ¬´–æ–±–º–µ–Ω¬ª
     */
    private String resolveRequestTypeLabel(ActionRequiredReturnRequestDto request) {
        if (request == null || request.status() != OrderReturnRequestStatus.EXCHANGE_APPROVED) {
            return "–≤–æ–∑–≤—Ä–∞—Ç";
        }
        return "–æ–±–º–µ–Ω";
    }

    private String formatSelectedRequestDetails(ActionRequiredReturnRequestDto request) {
        String track = escapeMarkdown(formatTrackNumber(request.trackNumber()));
        String store = escapeMarkdown(resolveStoreLabel(request.storeName()));
        String status = escapeMarkdown(safeRequestStatus(request.statusLabel()));
        String date = escapeMarkdown(safeOrDash(request.requestedAt()));
        String reason = escapeMarkdown(request.reason() == null ? PARCEL_RETURN_REASON_UNKNOWN : request.reason());
        String commentValue = request.comment();
        String comment = escapeMarkdown(commentValue == null || commentValue.isBlank()
                ? PARCEL_RETURN_NO_COMMENT
                : commentValue);
        String reverse = escapeMarkdown(request.reverseTrackNumber() == null || request.reverseTrackNumber().isBlank()
                ? PARCEL_RETURN_NO_TRACK
                : request.reverseTrackNumber());
        return String.format(RETURNS_ACTIVE_DETAILS_TEMPLATE, track, store, status, date, reason, comment, reverse);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–æ –≤—ã–±–æ—Ä–∞ –∏ –Ω–∞–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞.
     *
     * @param requests       –ø–µ—Ä–µ—á–µ–Ω—å –∑–∞—è–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è
     * @param selected       —Ç–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞
     * @param navigationPath –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ —Ç–µ–∫—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
     * @return –≥–æ—Ç–æ–≤–∞—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    private InlineKeyboardMarkup buildActiveRequestsKeyboard(List<ActionRequiredReturnRequestDto> requests,
                                                             ActionRequiredReturnRequestDto selected,
                                                             List<BuyerBotScreen> navigationPath) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        boolean hasRequests = requests != null && !requests.isEmpty();

        if (hasRequests && selected == null) {
            for (ActionRequiredReturnRequestDto request : requests) {
                if (request == null || request.requestId() == null || request.parcelId() == null) {
                    continue;
                }
                InlineKeyboardButton button = InlineKeyboardButton.builder()
                        .text(buildRequestSelectionLabel(request, null))
                        .callbackData(CALLBACK_RETURNS_ACTIVE_SELECT_PREFIX + request.requestId() + ':' + request.parcelId())
                        .build();
                rows.add(new InlineKeyboardRow(button));
            }
        } else if (selected != null) {
            rows.add(buildBackToListRow());
        }

        if (selected != null && selected.requestId() != null && selected.parcelId() != null) {
            rows.addAll(buildActionButtons(selected));
        }

        appendNavigationRow(rows, navigationPath);
        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    private String buildRequestSelectionLabel(ActionRequiredReturnRequestDto request,
                                              ActionRequiredReturnRequestDto selected) {
        String label = formatTrackNumber(request.trackNumber()) + " ‚Ä¢ " + resolveStoreLabel(request.storeName());
        if (selected != null && request.requestId() != null && request.requestId().equals(selected.requestId())) {
            return "‚ñ∂ " + label;
        }
        return label;
    }

    private List<InlineKeyboardRow> buildActionButtons(ActionRequiredReturnRequestDto request) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        Long requestId = request.requestId();
        Long parcelId = request.parcelId();
        if (requestId == null || parcelId == null) {
            return rows;
        }
        rows.add(new InlineKeyboardRow(InlineKeyboardButton.builder()
                .text(BUTTON_RETURNS_ACTION_TRACK)
                .callbackData(CALLBACK_RETURNS_ACTIVE_TRACK_PREFIX + requestId + ':' + parcelId)
                .build()));
        rows.add(new InlineKeyboardRow(InlineKeyboardButton.builder()
                .text(BUTTON_RETURNS_ACTION_COMMENT)
                .callbackData(CALLBACK_RETURNS_ACTIVE_COMMENT_PREFIX + requestId + ':' + parcelId)
                .build()));
        if (request.status() == OrderReturnRequestStatus.EXCHANGE_APPROVED) {
            rows.add(new InlineKeyboardRow(InlineKeyboardButton.builder()
                    .text(BUTTON_RETURNS_ACTION_CANCEL_EXCHANGE)
                    .callbackData(CALLBACK_RETURNS_ACTIVE_CANCEL_EXCHANGE_PREFIX + requestId + ':' + parcelId)
                    .build()));
            rows.add(new InlineKeyboardRow(InlineKeyboardButton.builder()
                    .text(BUTTON_RETURNS_ACTION_CONVERT)
                    .callbackData(CALLBACK_RETURNS_ACTIVE_CONVERT_PREFIX + requestId + ':' + parcelId)
                    .build()));
        } else {
            rows.add(new InlineKeyboardRow(InlineKeyboardButton.builder()
                    .text(BUTTON_RETURNS_ACTION_CANCEL_RETURN)
                    .callbackData(CALLBACK_RETURNS_ACTIVE_CANCEL_PREFIX + requestId + ':' + parcelId)
                    .build()));
        }
        return rows;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏.
     *
     * @return —Å—Ç—Ä–æ–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
     */
    private InlineKeyboardRow buildBackToListRow() {
        InlineKeyboardButton backButton = InlineKeyboardButton.builder()
                .text(BUTTON_RETURNS_BACK_TO_LIST)
                .callbackData(CALLBACK_RETURNS_ACTIVE_BACK_TO_LIST)
                .build();
        return new InlineKeyboardRow(backButton);
    }
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.
     *
     * @param rawStore –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
     * @return –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞
     */
    private String resolveStoreLabel(String rawStore) {
        if (rawStore == null || rawStore.isBlank()) {
            return "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω";
        }
        return rawStore;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     *
     * @param status –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å
     * @return —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String safeRequestStatus(String status) {
        if (status == null || status.isBlank()) {
            return OrderReturnRequestStatus.REGISTERED.getDisplayName();
        }
        return status;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç –µ—ë –¥–µ—Ñ–∏—Å–æ–º –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è.
     *
     * @param value –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @return —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
     */
    private String safeOrDash(String value) {
        if (value == null || value.isBlank()) {
            return "‚Äî";
        }
        return value;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void showReturnRequestTypeScreen(Long chatId) {
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_CREATE_TYPE);
        InlineKeyboardMarkup markup = buildReturnRequestTypeKeyboard(navigationPath);
        String text = buildReturnRequestTypeText();
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_CREATE_TYPE, navigationPath);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞.
     */
    private void handleReturnRequestTypeSelection(Long chatId,
                                                 CallbackQuery callbackQuery,
                                                 ReturnRequestType type) {
        answerCallbackQuery(callbackQuery, RETURNS_CREATE_TYPE_ACK);
        ChatSession session = ensureChatSession(chatId);
        session.clearReturnRequestData();
        session.setReturnRequestType(type);
        List<TelegramParcelInfoDTO> availableParcels = loadReturnableParcels(chatId);
        if (availableParcels.isEmpty()) {
            session.setState(BuyerChatState.AWAITING_REQUEST_TYPE);
            chatSessionRepository.save(session);
            transitionToState(chatId, BuyerChatState.AWAITING_REQUEST_TYPE);
            List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_CREATE_TYPE);
            InlineKeyboardMarkup navigationMarkup = buildBackAndMenuKeyboard();
            String text = escapeMarkdown(RETURNS_CREATE_NO_PARCELS);
            sendInlineMessage(chatId, text, navigationMarkup, BuyerBotScreen.RETURNS_CREATE_TYPE, navigationPath);
            return;
        }
        session.setState(BuyerChatState.AWAITING_STORE_SELECTION);
        chatSessionRepository.save(session);
        transitionToState(chatId, BuyerChatState.AWAITING_STORE_SELECTION);
        showReturnRequestStoreScreen(chatId, type, availableParcels);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤, –≥–¥–µ –µ—Å—Ç—å –ø–æ—Å—ã–ª–∫–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.
     */
    private void showReturnRequestStoreScreen(Long chatId,
                                              ReturnRequestType type,
                                              List<TelegramParcelInfoDTO> availableParcels) {
        Map<String, List<TelegramParcelInfoDTO>> grouped = groupReturnableParcelsByStore(availableParcels);
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_CREATE_STORE);

        if (grouped.isEmpty()) {
            ChatSession session = ensureChatSession(chatId);
            session.setState(BuyerChatState.AWAITING_STORE_SELECTION);
            chatSessionRepository.save(session);
            transitionToState(chatId, BuyerChatState.AWAITING_STORE_SELECTION);
            InlineKeyboardMarkup navigationMarkup = buildBackAndMenuKeyboard();
            String text = escapeMarkdown(RETURNS_CREATE_NO_PARCELS);
            sendInlineMessage(chatId, text, navigationMarkup, BuyerBotScreen.RETURNS_CREATE_STORE, navigationPath);
            return;
        }

        InlineKeyboardMarkup markup = buildReturnRequestStoreKeyboard(grouped, navigationPath);
        String text = buildReturnRequestStoreText(type);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_CREATE_STORE, navigationPath);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.
     */
    private void handleReturnRequestStoreSelection(Long chatId,
                                                   CallbackQuery callbackQuery,
                                                   String data) {
        Optional<String> decodedStore = decodeStoreFromCallback(data, CALLBACK_RETURNS_CREATE_STORE_PREFIX);
        if (decodedStore.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            return;
        }

        ChatSession session = ensureChatSession(chatId);
        ReturnRequestType type = session.getReturnRequestType();
        if (type == null) {
            showReturnRequestTypeScreen(chatId);
            return;
        }

        List<TelegramParcelInfoDTO> availableParcels = loadReturnableParcels(chatId);
        Map<String, List<TelegramParcelInfoDTO>> grouped = groupReturnableParcelsByStore(availableParcels);
        List<TelegramParcelInfoDTO> storeParcels = grouped.getOrDefault(decodedStore.get(), List.of());
        if (storeParcels.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            showReturnRequestStoreScreen(chatId, type, availableParcels);
            return;
        }

        answerCallbackQuery(callbackQuery, RETURNS_CREATE_STORE_ACK);
        session.setReturnStoreName(decodedStore.get());
        session.setState(BuyerChatState.AWAITING_PARCEL_SELECTION);
        chatSessionRepository.save(session);
        transitionToState(chatId, BuyerChatState.AWAITING_PARCEL_SELECTION);
        showReturnRequestParcelScreen(chatId, decodedStore.get(), storeParcels);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.
     */
    private void showReturnRequestParcelScreen(Long chatId,
                                               String storeName,
                                               List<TelegramParcelInfoDTO> parcels) {
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_CREATE_REQUEST);
        InlineKeyboardMarkup markup = buildReturnRequestParcelKeyboard(parcels, navigationPath);
        String text = buildReturnRequestParcelText(storeName);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_CREATE_REQUEST, navigationPath);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–µ—Ç–∫—É —Å—Ü–µ–Ω–∞—Ä–∏—è.
     */
    private void handleReturnRequestParcelSelection(Long chatId,
                                                    CallbackQuery callbackQuery,
                                                    String data) {
        Optional<Long> parcelIdOptional = parseIdFromCallback(data, CALLBACK_RETURNS_CREATE_PARCEL_PREFIX);
        if (parcelIdOptional.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            return;
        }

        ChatSession session = ensureChatSession(chatId);
        ReturnRequestType type = session.getReturnRequestType();
        if (type == null) {
            showReturnRequestTypeScreen(chatId);
            return;
        }

        Long parcelId = parcelIdOptional.get();
        Optional<TelegramParcelInfoDTO> parcelOptional = findParcelById(chatId, parcelId);
        if (parcelOptional.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            showReturnRequestTypeScreen(chatId);
            return;
        }

        TelegramParcelInfoDTO parcel = parcelOptional.get();
        if (parcel.hasActiveReturnRequest()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            notifyReturnAlreadyRegistered(chatId, parcel);
            showReturnRequestTypeScreen(chatId);
            return;
        }

        answerCallbackQuery(callbackQuery, RETURNS_CREATE_PARCEL_ACK);
        if (type == ReturnRequestType.RETURN) {
            startReturnScenario(chatId, callbackQuery, parcel, session);
        } else {
            startExchangeScenario(chatId, callbackQuery, parcel, session);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     * @param data          –¥–∞–Ω–Ω—ã–µ callback —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
     */
    private void handleReturnReasonCallback(Long chatId,
                                            CallbackQuery callbackQuery,
                                            String data) {
        if (CALLBACK_NAVIGATE_BACK.equals(data)) {
            handleNavigateBack(chatId, callbackQuery);
            return;
        }
        if (CALLBACK_BACK_TO_MENU.equals(data)) {
            handleCallbackBackToMenu(chatId, callbackQuery, true);
            return;
        }

        Optional<String> reasonOptional = decodeReturnReason(data);
        if (reasonOptional.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            return;
        }

        answerCallbackQuery(callbackQuery, PARCEL_RETURN_REASON_SELECTED_ACK);
        MaybeInaccessibleMessage message = callbackQuery.getMessage();
        Integer messageId = message != null ? message.getMessageId() : null;
        if (messageId != null) {
            removeInlineKeyboard(chatId, messageId);
        }
        handleReturnReason(chatId, reasonOptional.get());
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã –æ–±–º–µ–Ω–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     * @param data          –¥–∞–Ω–Ω—ã–µ callback —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π
     */
    private void handleExchangeReasonCallback(Long chatId,
                                              CallbackQuery callbackQuery,
                                              String data) {
        if (CALLBACK_NAVIGATE_BACK.equals(data)) {
            handleNavigateBack(chatId, callbackQuery);
            return;
        }
        if (CALLBACK_BACK_TO_MENU.equals(data)) {
            handleCallbackBackToMenu(chatId, callbackQuery, true);
            return;
        }

        Optional<String> reasonOptional = decodeReturnReason(data);
        if (reasonOptional.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            return;
        }

        answerCallbackQuery(callbackQuery, PARCEL_RETURN_REASON_SELECTED_ACK);
        MaybeInaccessibleMessage message = callbackQuery.getMessage();
        Integer messageId = message != null ? message.getMessageId() : null;
        if (messageId != null) {
            removeInlineKeyboard(chatId, messageId);
        }
        handleExchangeReason(chatId, reasonOptional.get());
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è.
     */
    private List<TelegramParcelInfoDTO> loadReturnableParcels(Long chatId) {
        return telegramService.getParcelsOverview(chatId)
                .map(TelegramParcelsOverviewDTO::getDelivered)
                .orElse(List.of())
                .stream()
                .filter(parcel -> parcel != null && !parcel.hasActiveReturnRequest())
                .collect(Collectors.toList());
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ—Å—ã–ª–∫–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è.
     */
    private Map<String, List<TelegramParcelInfoDTO>> groupReturnableParcelsByStore(List<TelegramParcelInfoDTO> parcels) {
        Map<String, List<TelegramParcelInfoDTO>> grouped = new LinkedHashMap<>();
        if (parcels == null) {
            return grouped;
        }
        for (TelegramParcelInfoDTO parcel : parcels) {
            if (parcel == null) {
                continue;
            }
            String storeName = resolveStoreName(parcel);
            grouped.computeIfAbsent(storeName, key -> new ArrayList<>()).add(parcel);
        }
        return grouped;
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏.
     */
    private InlineKeyboardMarkup buildReturnRequestTypeKeyboard(List<BuyerBotScreen> navigationPath) {
        InlineKeyboardButton returnButton = InlineKeyboardButton.builder()
                .text(RETURNS_CREATE_TYPE_RETURN_LABEL)
                .callbackData(CALLBACK_RETURNS_CREATE_TYPE_RETURN)
                .build();
        InlineKeyboardButton exchangeButton = InlineKeyboardButton.builder()
                .text(RETURNS_CREATE_TYPE_EXCHANGE_LABEL)
                .callbackData(CALLBACK_RETURNS_CREATE_TYPE_EXCHANGE)
                .build();

        List<InlineKeyboardRow> rows = new ArrayList<>();
        rows.add(new InlineKeyboardRow(returnButton, exchangeButton));
        appendNavigationRow(rows, navigationPath);
        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞.
     */
    private InlineKeyboardMarkup buildReturnRequestStoreKeyboard(Map<String, List<TelegramParcelInfoDTO>> grouped,
                                                                List<BuyerBotScreen> navigationPath) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        for (Map.Entry<String, List<TelegramParcelInfoDTO>> entry : grouped.entrySet()) {
            String storeName = entry.getKey();
            int count = entry.getValue() != null ? entry.getValue().size() : 0;
            InlineKeyboardButton button = InlineKeyboardButton.builder()
                    .text(storeName + " (" + count + ")")
                    .callbackData(CALLBACK_RETURNS_CREATE_STORE_PREFIX + encodeStoreKey(storeName))
                    .build();
            rows.add(new InlineKeyboardRow(button));
        }
        appendNavigationRow(rows, navigationPath);
        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏ –≤–Ω—É—Ç—Ä–∏ –º–∞–≥–∞–∑–∏–Ω–∞.
     */
    private InlineKeyboardMarkup buildReturnRequestParcelKeyboard(List<TelegramParcelInfoDTO> parcels,
                                                                 List<BuyerBotScreen> navigationPath) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        if (parcels != null) {
            for (TelegramParcelInfoDTO parcel : parcels) {
                if (parcel == null || parcel.getParcelId() == null) {
                    continue;
                }
                String track = formatTrackNumber(parcel.getTrackNumber());
                InlineKeyboardButton button = InlineKeyboardButton.builder()
                        .text(track)
                        .callbackData(CALLBACK_RETURNS_CREATE_PARCEL_PREFIX + parcel.getParcelId())
                        .build();
                rows.add(new InlineKeyboardRow(button));
            }
        }
        appendNavigationRow(rows, navigationPath);
        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞.
     *
     * @return –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏—á–∏–Ω
     */
    private InlineKeyboardMarkup buildReturnReasonKeyboard() {
        InlineKeyboardRow firstRow = new InlineKeyboardRow(
                InlineKeyboardButton.builder()
                        .text(RETURN_REASON_LABEL_NOT_FIT)
                        .callbackData(CALLBACK_RETURNS_REASON_NOT_FIT)
                        .build(),
                InlineKeyboardButton.builder()
                        .text(RETURN_REASON_LABEL_DEFECT)
                        .callbackData(CALLBACK_RETURNS_REASON_DEFECT)
                        .build()
        );
        InlineKeyboardRow secondRow = new InlineKeyboardRow(
                InlineKeyboardButton.builder()
                        .text(RETURN_REASON_LABEL_DISLIKE)
                        .callbackData(CALLBACK_RETURNS_REASON_DISLIKE)
                        .build(),
                InlineKeyboardButton.builder()
                        .text(RETURN_REASON_LABEL_OTHER)
                        .callbackData(CALLBACK_RETURNS_REASON_OTHER)
                        .build()
        );
        InlineKeyboardRow navigationRow = buildBackAndMenuRow();
        return InlineKeyboardMarkup.builder()
                .keyboard(List.of(firstRow, secondRow, navigationRow))
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞.
     *
     * @param parcelLabel –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏
     * @param reason      –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
     * @param dateText    —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–±—Ä–∞—â–µ–Ω–∏—è
     * @return –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private String buildReturnCompletionText(String parcelLabel, String reason, String dateText) {
        String safeParcel = (parcelLabel == null || parcelLabel.isBlank())
                ? PARCEL_RETURN_NO_TRACK
                : parcelLabel;
        String safeReason = (reason == null || reason.isBlank())
                ? PARCEL_RETURN_REASON_UNKNOWN
                : reason;
        String safeDate = (dateText == null || dateText.isBlank())
                ? PARCEL_RETURN_DATE_UNKNOWN
                : dateText;

        StringBuilder builder = new StringBuilder();
        builder.append(escapeMarkdown("‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å—ã–ª–∫–∏ "))
                .append(escapeMarkdown(safeParcel))
                .append(escapeMarkdown("."))
                .append('\n');
        builder.append(escapeMarkdown("‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: "))
                .append(escapeMarkdown(safeReason))
                .append('\n');
        builder.append(escapeMarkdown("‚Ä¢ –î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: "))
                .append(escapeMarkdown(safeDate))
                .append('\n');
        builder.append(escapeMarkdown("‚ÑπÔ∏è –ï—Å–ª–∏ —Ç—Ä–µ–∫ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª ¬´üìÇ –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏¬ª."));
        return builder.toString();
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏.
     *
     * @return –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞—è–≤–∫–∞–º
     */
    private InlineKeyboardMarkup buildReturnCompletionKeyboard() {
        InlineKeyboardButton doneButton = InlineKeyboardButton.builder()
                .text(BUTTON_RETURNS_DONE)
                .callbackData(CALLBACK_RETURNS_DONE)
                .build();
        InlineKeyboardButton activeButton = InlineKeyboardButton.builder()
                .text(BUTTON_RETURNS_ACTIVE)
                .callbackData(CALLBACK_RETURNS_SHOW_ACTIVE)
                .build();
        InlineKeyboardRow mainRow = new InlineKeyboardRow(doneButton, activeButton);
        return InlineKeyboardMarkup.builder()
                .keyboard(List.of(mainRow))
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞.
     *
     * @param parcelLabel –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏
     * @param reason      –ø—Ä–∏—á–∏–Ω–∞ –æ–±–º–µ–Ω–∞
     * @param dateText    —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–±—Ä–∞—â–µ–Ω–∏—è
     * @return –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private String buildExchangeCompletionText(String parcelLabel, String reason, String dateText) {
        String safeParcel = (parcelLabel == null || parcelLabel.isBlank())
                ? PARCEL_RETURN_NO_TRACK
                : parcelLabel;
        String safeReason = (reason == null || reason.isBlank())
                ? PARCEL_RETURN_REASON_UNKNOWN
                : reason;
        String safeDate = (dateText == null || dateText.isBlank())
                ? PARCEL_RETURN_DATE_UNKNOWN
                : dateText;

        StringBuilder builder = new StringBuilder();
        builder.append(escapeMarkdown("‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω –ø–æ –ø–æ—Å—ã–ª–∫–µ "))
                .append(escapeMarkdown(safeParcel))
                .append(escapeMarkdown("."))
                .append('\n');
        builder.append(escapeMarkdown("‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: "))
                .append(escapeMarkdown(safeReason))
                .append('\n');
        builder.append(escapeMarkdown("‚Ä¢ –î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: "))
                .append(escapeMarkdown(safeDate))
                .append('\n');
        builder.append(escapeMarkdown("‚ÑπÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."));
        return builder.toString();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –æ–±–º–µ–Ω–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
     *
     * @return –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞—è–≤–∫–∞–º
     */
    private InlineKeyboardMarkup buildExchangeCompletionKeyboard() {
        InlineKeyboardButton okButton = InlineKeyboardButton.builder()
                .text(BUTTON_OUTCOME_OK)
                .callbackData(CALLBACK_RETURNS_DONE)
                .build();
        InlineKeyboardButton activeButton = InlineKeyboardButton.builder()
                .text(BUTTON_RETURNS_ACTIVE)
                .callbackData(CALLBACK_RETURNS_SHOW_ACTIVE)
                .build();
        InlineKeyboardRow mainRow = new InlineKeyboardRow(okButton, activeButton);
        return InlineKeyboardMarkup.builder()
                .keyboard(List.of(mainRow))
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏.
     */
    private String buildReturnRequestTypeText() {
        return escapeMarkdown(RETURNS_CREATE_TITLE)
                + "\n\n"
                + escapeMarkdown(RETURNS_CREATE_TYPE_PROMPT);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞.
     */
    private String buildReturnRequestStoreText(ReturnRequestType type) {
        String typeLabel = type == ReturnRequestType.RETURN
                ? RETURNS_CREATE_TYPE_RETURN_LABEL
                : RETURNS_CREATE_TYPE_EXCHANGE_LABEL;
        return escapeMarkdown(RETURNS_CREATE_TITLE)
                + "\n\n"
                + escapeMarkdown(String.format(RETURNS_CREATE_STORE_PROMPT, typeLabel));
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å—ã–ª–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ.
     */
    private String buildReturnRequestParcelText(String storeName) {
        String storeLabel = storeName == null || storeName.isBlank() ? "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω" : storeName;
        return escapeMarkdown(RETURNS_CREATE_TITLE)
                + "\n\n"
                + escapeMarkdown(String.format(RETURNS_CREATE_PARCEL_PROMPT, storeLabel));
    }

    /**
     * –ö–æ–¥–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback-–¥–∞–Ω–Ω—ã—Ö.
     */
    private String encodeStoreKey(String storeName) {
        String value = storeName == null ? "" : storeName;
        return STORE_KEY_ENCODER.encodeToString(value.getBytes(StandardCharsets.UTF_8));
    }

    /**
     * –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö.
     */
    private Optional<String> decodeStoreFromCallback(String data, String prefix) {
        if (data == null || !data.startsWith(prefix)) {
            return Optional.empty();
        }
        String encoded = data.substring(prefix.length());
        if (encoded.isBlank()) {
            return Optional.of("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω");
        }
        try {
            return Optional.of(new String(STORE_KEY_DECODER.decode(encoded), StandardCharsets.UTF_8));
        } catch (IllegalArgumentException ex) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω –∏–∑ callback: {}", data, ex);
            return Optional.empty();
        }
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç callback-–¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞.
     *
     * @param data –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ callback
     * @return –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
     */
    private Optional<String> decodeReturnReason(String data) {
        if (CALLBACK_RETURNS_REASON_NOT_FIT.equals(data)) {
            return Optional.of(RETURN_REASON_LABEL_NOT_FIT);
        }
        if (CALLBACK_RETURNS_REASON_DEFECT.equals(data)) {
            return Optional.of(RETURN_REASON_LABEL_DEFECT);
        }
        if (CALLBACK_RETURNS_REASON_DISLIKE.equals(data)) {
            return Optional.of(RETURN_REASON_LABEL_DISLIKE);
        }
        if (CALLBACK_RETURNS_REASON_OTHER.equals(data)) {
            return Optional.of(RETURN_REASON_LABEL_OTHER);
        }
        return Optional.empty();
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ callback-—Å—Ç—Ä–æ–∫–∏.
     */
    private Optional<Long> parseIdFromCallback(String data, String prefix) {
        if (data == null || !data.startsWith(prefix)) {
            return Optional.empty();
        }
        String idPart = data.substring(prefix.length());
        if (idPart.isBlank()) {
            return Optional.empty();
        }
        try {
            return Optional.of(Long.parseLong(idPart));
        } catch (NumberFormatException ex) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ callback: {}", data);
            return Optional.empty();
        }
    }

    private void handleActiveRequestSelection(Long chatId, CallbackQuery callbackQuery, String data) {
        Optional<RequestActionContext> contextOptional = parseActionContext(data, CALLBACK_RETURNS_ACTIVE_SELECT_PREFIX);
        if (contextOptional.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            return;
        }
        RequestActionContext context = contextOptional.get();
        answerCallbackQuery(callbackQuery, "–ó–∞—è–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–∞");
        ChatSession session = ensureChatSession(chatId);
        session.setActiveReturnRequestContext(context.requestId(), context.parcelId());
        chatSessionRepository.save(session);
        sendActiveReturnRequestsScreen(chatId);
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleActiveRequestBackToList(Long chatId, CallbackQuery callbackQuery) {
        answerCallbackQuery(callbackQuery, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É");
        ChatSession session = ensureChatSession(chatId);
        session.clearActiveReturnRequestContext();
        chatSessionRepository.save(session);
        sendActiveReturnRequestsScreen(chatId);
    }

    private void handleActiveRequestTrack(Long chatId, CallbackQuery callbackQuery, String data) {
        Optional<RequestActionContext> contextOptional = parseActionContext(data, CALLBACK_RETURNS_ACTIVE_TRACK_PREFIX);
        if (contextOptional.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            return;
        }
        RequestActionContext context = contextOptional.get();
        answerCallbackQuery(callbackQuery, "–ñ–¥—ë–º —Ç—Ä–µ–∫");
        ChatSession session = ensureChatSession(chatId);
        session.setActiveReturnRequestContext(context.requestId(), context.parcelId(), ReturnRequestEditMode.TRACK);
        session.setState(BuyerChatState.AWAITING_TRACK_UPDATE);
        chatSessionRepository.save(session);
        transitionToState(chatId, BuyerChatState.AWAITING_TRACK_UPDATE);
        sendSimpleMessage(chatId, RETURNS_ACTIVE_TRACK_PROMPT);
    }

    private void handleActiveRequestComment(Long chatId, CallbackQuery callbackQuery, String data) {
        Optional<RequestActionContext> contextOptional = parseActionContext(data, CALLBACK_RETURNS_ACTIVE_COMMENT_PREFIX);
        if (contextOptional.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            return;
        }
        RequestActionContext context = contextOptional.get();
        answerCallbackQuery(callbackQuery, "–ñ–¥—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π");
        ChatSession session = ensureChatSession(chatId);
        session.setActiveReturnRequestContext(context.requestId(), context.parcelId(), ReturnRequestEditMode.COMMENT);
        session.setState(BuyerChatState.AWAITING_COMMENT_UPDATE);
        chatSessionRepository.save(session);
        transitionToState(chatId, BuyerChatState.AWAITING_COMMENT_UPDATE);
        sendSimpleMessage(chatId, RETURNS_ACTIVE_COMMENT_PROMPT);
    }

    private void handleActiveRequestCancelReturn(Long chatId, CallbackQuery callbackQuery, String data) {
        Optional<RequestActionContext> contextOptional = parseActionContext(data, CALLBACK_RETURNS_ACTIVE_CANCEL_PREFIX);
        if (contextOptional.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            return;
        }
        RequestActionContext context = contextOptional.get();
        answerCallbackQuery(callbackQuery, "–û—Ç–º–µ–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç");
        ChatSession session = ensureChatSession(chatId);
        try {
            telegramService.closeReturnRequestFromTelegram(chatId, context.parcelId(), context.requestId());
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_CANCEL_RETURN_SUCCESS, BUTTON_OUTCOME_OK);
        } catch (AccessDeniedException ex) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –∑–∞—è–≤–∫—É {} –≤ —á–∞—Ç–µ {}", context.requestId(), chatId);
            finalizeRequestUpdate(chatId, session, PARCEL_RETURN_ACCESS_DENIED, BUTTON_OUTCOME_BACK);
        } catch (IllegalArgumentException | IllegalStateException ex) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ {}: {}", context.requestId(), ex.getMessage());
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_ACTION_FAILED, BUTTON_OUTCOME_BACK);
        } catch (Exception ex) {
            log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç {}", context.requestId(), ex);
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_ACTION_FAILED, BUTTON_OUTCOME_BACK);
        }
    }

    private void handleActiveRequestCancelExchange(Long chatId, CallbackQuery callbackQuery, String data) {
        Optional<RequestActionContext> contextOptional = parseActionContext(data, CALLBACK_RETURNS_ACTIVE_CANCEL_EXCHANGE_PREFIX);
        if (contextOptional.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            return;
        }
        RequestActionContext context = contextOptional.get();
        answerCallbackQuery(callbackQuery, "–û—Ç–º–µ–Ω—è–µ–º –æ–±–º–µ–Ω");
        ChatSession session = ensureChatSession(chatId);
        try {
            telegramService.cancelExchangeFromTelegram(chatId, context.parcelId(), context.requestId());
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_CANCEL_EXCHANGE_SUCCESS, BUTTON_OUTCOME_OK);
        } catch (AccessDeniedException ex) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂–æ–π –æ–±–º–µ–Ω {} –≤ —á–∞—Ç–µ {}", context.requestId(), chatId);
            finalizeRequestUpdate(chatId, session, PARCEL_RETURN_ACCESS_DENIED, BUTTON_OUTCOME_BACK);
        } catch (IllegalArgumentException | IllegalStateException ex) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–±–º–µ–Ω–∞ {}: {}", context.requestId(), ex.getMessage());
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_ACTION_FAILED, BUTTON_OUTCOME_BACK);
        } catch (Exception ex) {
            log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±–º–µ–Ω {}", context.requestId(), ex);
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_ACTION_FAILED, BUTTON_OUTCOME_BACK);
        }
    }

    private void handleActiveRequestConvert(Long chatId, CallbackQuery callbackQuery, String data) {
        Optional<RequestActionContext> contextOptional = parseActionContext(data, CALLBACK_RETURNS_ACTIVE_CONVERT_PREFIX);
        if (contextOptional.isEmpty()) {
            answerCallbackQuery(callbackQuery, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            return;
        }
        RequestActionContext context = contextOptional.get();
        answerCallbackQuery(callbackQuery, "–ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–æ–∑–≤—Ä–∞—Ç");
        ChatSession session = ensureChatSession(chatId);
        try {
            telegramService.convertExchangeToReturnFromTelegram(chatId, context.parcelId(), context.requestId());
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_CONVERT_SUCCESS, BUTTON_OUTCOME_OK);
        } catch (AccessDeniedException ex) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —á—É–∂–æ–π –æ–±–º–µ–Ω {} –≤ —á–∞—Ç–µ {}", context.requestId(), chatId);
            finalizeRequestUpdate(chatId, session, PARCEL_RETURN_ACCESS_DENIED, BUTTON_OUTCOME_BACK);
        } catch (IllegalArgumentException | IllegalStateException ex) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ–±–º–µ–Ω–∞ {}: {}", context.requestId(), ex.getMessage());
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_ACTION_FAILED, BUTTON_OUTCOME_BACK);
        } catch (Exception ex) {
            log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–±–º–µ–Ω {} –≤ –≤–æ–∑–≤—Ä–∞—Ç", context.requestId(), ex);
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_ACTION_FAILED, BUTTON_OUTCOME_BACK);
        }
    }

    private ActionRequiredReturnRequestDto findRequestInfo(Long chatId, Long requestId) {
        return telegramService.getReturnRequestsRequiringAction(chatId).stream()
                .filter(dto -> requestId.equals(dto.requestId()))
                .findFirst()
                .orElse(null);
    }

    private void handleTrackUpdateInput(Long chatId, String text) {
        ChatSession session = ensureChatSession(chatId);
        Long requestId = session.getActiveReturnRequestId();
        Long parcelId = session.getActiveReturnParcelId();
        ReturnRequestEditMode mode = session.getReturnRequestEditMode();
        if (requestId == null || parcelId == null || mode == null) {
            sendSimpleMessage(chatId, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            session.clearActiveReturnRequestContext();
            session.setState(BuyerChatState.IDLE);
            chatSessionRepository.save(session);
            transitionToState(chatId, BuyerChatState.IDLE);
            sendActiveReturnRequestsScreen(chatId);
            return;
        }

        ActionRequiredReturnRequestDto requestInfo = findRequestInfo(chatId, requestId);
        if (requestInfo == null) {
            sendSimpleMessage(chatId, RETURNS_ACTIVE_ACTION_NOT_AVAILABLE);
            session.clearActiveReturnRequestContext();
            session.setState(BuyerChatState.IDLE);
            chatSessionRepository.save(session);
            sendActiveReturnRequestsScreen(chatId);
            return;
        }

        if (mode == ReturnRequestEditMode.TRACK) {
            processTrackUpdate(chatId, session, requestInfo, parcelId, requestId, text);
        } else {
            processCommentUpdate(chatId, session, requestInfo, parcelId, requestId, text);
        }
    }

    private void processTrackUpdate(Long chatId,
                                    ChatSession session,
                                    ActionRequiredReturnRequestDto requestInfo,
                                    Long parcelId,
                                    Long requestId,
                                    String text) {
        String normalized = text == null ? "" : text.strip();
        if (normalized.isEmpty()) {
            sendActiveRequestOutcomeMessage(chatId, RETURNS_ACTIVE_UPDATE_INVALID_TRACK, BUTTON_OUTCOME_BACK);
            return;
        }
        String newTrack = isSkipWord(normalized) ? null : normalized;
        String comment = requestInfo.comment();
        try {
            telegramService.updateReturnRequestDetailsFromTelegram(chatId, parcelId, requestId, newTrack, comment);
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_TRACK_SAVED, BUTTON_OUTCOME_OK);
        } catch (AccessDeniedException ex) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂—É—é –∑–∞—è–≤–∫—É {} –≤ —á–∞—Ç–µ {}", requestId, chatId);
            finalizeRequestUpdate(chatId, session, PARCEL_RETURN_ACCESS_DENIED, BUTTON_OUTCOME_BACK);
        } catch (IllegalArgumentException ex) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫ –¥–ª—è –∑–∞—è–≤–∫–∏ {}: {}", requestId, ex.getMessage());
            sendActiveRequestOutcomeMessage(chatId, RETURNS_ACTIVE_UPDATE_INVALID_TRACK, BUTTON_OUTCOME_BACK);
        } catch (IllegalStateException ex) {
            log.warn("‚ö†Ô∏è –ó–∞—è–≤–∫—É {} –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å: {}", requestId, ex.getMessage());
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_ACTION_FAILED, BUTTON_OUTCOME_BACK);
        } catch (Exception ex) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {}", requestId, ex);
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_UPDATE_FAILED, BUTTON_OUTCOME_BACK);
        }
    }

    private void processCommentUpdate(Long chatId,
                                      ChatSession session,
                                      ActionRequiredReturnRequestDto requestInfo,
                                      Long parcelId,
                                      Long requestId,
                                      String text) {
        String normalized = text == null ? "" : text.strip();
        if (normalized.isEmpty()) {
            sendActiveRequestOutcomeMessage(chatId, RETURNS_ACTIVE_COMMENT_INVALID, BUTTON_OUTCOME_BACK);
            return;
        }
        String newComment = isSkipWord(normalized) ? null : normalized;
        String reverseTrack = requestInfo.reverseTrackNumber();
        try {
            telegramService.updateReturnRequestDetailsFromTelegram(chatId, parcelId, requestId, reverseTrack, newComment);
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_COMMENT_SAVED, BUTTON_OUTCOME_OK);
        } catch (AccessDeniedException ex) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —á—É–∂—É—é –∑–∞—è–≤–∫—É {} –≤ —á–∞—Ç–µ {}", requestId, chatId);
            finalizeRequestUpdate(chatId, session, PARCEL_RETURN_ACCESS_DENIED, BUTTON_OUTCOME_BACK);
        } catch (IllegalArgumentException ex) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ {}: {}", requestId, ex.getMessage());
            sendActiveRequestOutcomeMessage(chatId, RETURNS_ACTIVE_COMMENT_INVALID, BUTTON_OUTCOME_BACK);
        } catch (IllegalStateException ex) {
            log.warn("‚ö†Ô∏è –ó–∞—è–≤–∫—É {} –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å: {}", requestId, ex.getMessage());
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_ACTION_FAILED, BUTTON_OUTCOME_BACK);
        } catch (Exception ex) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {}", requestId, ex);
            finalizeRequestUpdate(chatId, session, RETURNS_ACTIVE_UPDATE_FAILED, BUTTON_OUTCOME_BACK);
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏, –æ—á–∏—â–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞—è –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     *
     * @param chatId     –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param session    —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param message    —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @param buttonLabel –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫
     */
    private void finalizeRequestUpdate(Long chatId, ChatSession session, String message, String buttonLabel) {
        session = session != null ? session : ensureChatSession(chatId);
        resetActiveRequestContext(session);
        sendActiveRequestOutcomeMessage(chatId, message, buttonLabel);
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞—è–≤–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —á–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
     *
     * @param session –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void resetActiveRequestContext(ChatSession session) {
        if (session == null) {
            return;
        }
        session.clearActiveReturnRequestContext();
        session.setState(BuyerChatState.IDLE);
        chatSessionRepository.save(session);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–æ–π —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É.
     *
     * @param chatId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text        —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param buttonLabel –ø–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    private void sendActiveRequestOutcomeMessage(Long chatId, String text, String buttonLabel) {
        if (chatId == null) {
            return;
        }
        String safeText = escapeMarkdown(text == null ? "" : text);
        String safeButtonLabel = (buttonLabel == null || buttonLabel.isBlank()) ? BUTTON_OUTCOME_BACK : buttonLabel;
        InlineKeyboardButton button = InlineKeyboardButton.builder()
                .text(safeButtonLabel)
                .callbackData(CALLBACK_RETURNS_ACTIVE_BACK_TO_LIST)
                .build();
        InlineKeyboardRow row = new InlineKeyboardRow(button);
        InlineKeyboardMarkup markup = InlineKeyboardMarkup.builder()
                .keyboard(List.of(row))
                .build();
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_ACTIVE_REQUESTS);
        sendInlineMessage(chatId, safeText, markup, BuyerBotScreen.RETURNS_ACTIVE_REQUESTS, navigationPath);
    }
    /**
     * –ü–∞—Ä—Å–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∑–∞—è–≤–∫–∏ –∏ –ø–æ—Å—ã–ª–∫–∏ –∏–∑ callback-—Å—Ç—Ä–æ–∫–∏.
     */
    private Optional<RequestActionContext> parseActionContext(String data, String prefix) {
        if (data == null || !data.startsWith(prefix)) {
            return Optional.empty();
        }
        String[] parts = data.substring(prefix.length()).split(":");
        if (parts.length != 2) {
            return Optional.empty();
        }
        try {
            Long requestId = Long.parseLong(parts[0]);
            Long parcelId = Long.parseLong(parts[1]);
            return Optional.of(new RequestActionContext(requestId, parcelId));
        } catch (NumberFormatException ex) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ callback: {}", data);
            return Optional.empty();
        }
    }

    /**
     * –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞—è–≤–∫–µ: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –∏ –ø–æ—Å—ã–ª–∫–∏.
     */
    private record RequestActionContext(Long requestId, Long parcelId) {
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º —Ç—Ä–µ–∫–æ–º –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.
     */
    /**
     * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å—ã–ª–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     *
     * @param chatId         –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery  –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     * @param acknowledgement —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param title           –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º
     * @param extractor       —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–≤–æ–¥–∫–∏
     */
    private void handleParcelsCategoryCallback(Long chatId,
                                               CallbackQuery callbackQuery,
                                               String acknowledgement,
                                               String title,
                                               Function<TelegramParcelsOverviewDTO, List<TelegramParcelInfoDTO>> extractor,
                                               ParcelsSection section) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        answerCallbackQuery(callbackQuery, acknowledgement);

        Optional<TelegramParcelsOverviewDTO> overviewOptional = telegramService.getParcelsOverview(chatId);

        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.PARCELS, true);
        List<TelegramParcelInfoDTO> parcels = overviewOptional
                .map(extractor)
                .orElse(List.of());

        InlineKeyboardMarkup markup = section == ParcelsSection.DELIVERED
                ? buildDeliveredParcelsKeyboard(parcels, navigationPath)
                : buildNavigationKeyboard(navigationPath);

        String text = buildParcelsCategoryText(title, parcels, section);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.PARCELS, navigationPath);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å—ã–ª–æ–∫.
     *
     * @param title   –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
     * @param parcels —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @return –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
     */
    private String buildParcelsCategoryText(String title,
                                            List<TelegramParcelInfoDTO> parcels,
                                            ParcelsSection section) {
        StringBuilder builder = new StringBuilder();
        builder.append(escapeMarkdown(title)).append('\n').append('\n');
        if (parcels == null || parcels.isEmpty()) {
            builder.append(escapeMarkdown(NO_PARCELS_PLACEHOLDER));
            return builder.toString();
        }

        Map<String, List<TelegramParcelInfoDTO>> parcelsByStore = groupParcelsByStore(parcels);
        parcelsByStore.forEach((storeName, storeParcels) -> {
            builder.append('*').append(escapeMarkdown(storeName)).append('*').append('\n');
            for (TelegramParcelInfoDTO parcel : storeParcels) {
                builder.append("‚Ä¢ ").append(formatParcelLine(parcel, section)).append('\n');
            }
            builder.append('\n');
        });

        return builder.toString().trim();
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ—Å—ã–ª–∫–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏.
     *
     * @param parcels —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @return –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ¬´–º–∞–≥–∞–∑–∏–Ω ‚Üí –ø–æ—Å—ã–ª–∫–∏¬ª, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–µ –ø–æ –≤—Ö–æ–¥–Ω–æ–º—É —Å–ø–∏—Å–∫—É
     */
    private Map<String, List<TelegramParcelInfoDTO>> groupParcelsByStore(List<TelegramParcelInfoDTO> parcels) {
        Map<String, List<TelegramParcelInfoDTO>> grouped = new LinkedHashMap<>();
        for (TelegramParcelInfoDTO parcel : parcels) {
            String storeName = resolveStoreName(parcel);
            grouped.computeIfAbsent(storeName, key -> new ArrayList<>()).add(parcel);
        }
        return grouped;
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleMenuOpenSettings(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }
        answerCallbackQuery(callbackQuery, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
        sendSettingsScreen(chatId);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleMenuOpenHelp(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }
        answerCallbackQuery(callbackQuery, "–ü–æ–º–æ—â—å");
        sendHelpScreen(chatId);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å Telegram
     */
    private void handleAnnouncementAcknowledgement(Long chatId, CallbackQuery callbackQuery) {
        if (callbackQuery == null || chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        ChatSession session = chatSessionRepository.find(chatId).orElse(null);
        if (session == null || session.getCurrentNotificationId() == null) {
            answerCallbackQuery(callbackQuery, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
            return;
        }

        if (session.isAnnouncementSeen()) {
            answerCallbackQuery(callbackQuery, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ");
            return;
        }

        chatSessionRepository.markAnnouncementSeen(chatId);
        answerCallbackQuery(callbackQuery, "–ì–æ—Ç–æ–≤–æ");
        sendMainMenu(chatId, true);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–º—è –∏–∑ —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleNameConfirmationCallback(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        boolean confirmed = confirmNameAndNotify(chatId);
        if (confirmed) {
            answerCallbackQuery(callbackQuery, "–ò–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
            sendMainMenu(chatId);
        } else {
            answerCallbackQuery(callbackQuery, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è");
            sendNameConfirmationFailure(chatId);
            sendMainMenu(chatId);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏–∑ —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleNameEditCallback(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        answerCallbackQuery(callbackQuery, "–û–∂–∏–¥–∞—é –≤–≤–æ–¥ –§–ò–û");
        telegramService.markNameUnconfirmed(chatId);
        transitionToState(chatId, BuyerChatState.AWAITING_NAME_INPUT);

        String prompt = "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —Å–æ–æ–±—â–µ–Ω–∏–µ–º.";
        sendSimpleMessage(chatId, prompt);
        sendNameEditPromptScreen(chatId);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ –§–ò–û –≤ —è–∫–æ—Ä–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendNameEditPromptScreen(Long chatId) {
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.NAME_EDIT_PROMPT);
        InlineKeyboardMarkup markup = buildNavigationKeyboard(navigationPath);
        sendInlineMessage(chatId,
                escapeMarkdown(NAME_EDIT_ANCHOR_TEXT),
                markup,
                BuyerBotScreen.NAME_EDIT_PROMPT,
                navigationPath);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE.
     * <p>
     * –ú–µ—Ç–æ–¥ –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –∏ –æ–±–º–µ–Ω–æ–≤, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å
     * –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –∏ —Ç–µ–º —Å–∞–º—ã–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void handleMenuCommand(Long chatId) {
        resetReturnFlow(chatId);
        transitionToState(chatId, BuyerChatState.IDLE);
        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isPresent()) {
            Customer customer = optional.get();
            resetMenuAnchorIfAlreadyShown(chatId);
            sendMainMenu(chatId);
            if (customer.getFullName() == null || customer.getFullName().isBlank()) {
                sendSimpleMessage(chatId,
                        "‚úçÔ∏è –ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –§–ò–û, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—É–Ω–∫—Ç \"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ \"‚úçÔ∏è –£–∫–∞–∑–∞—Ç—å –∏–º—è\".");
            } else if (customer.getNameSource() != NameSource.USER_CONFIRMED) {
                sendSimpleMessage(chatId,
                        "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –§–ò–û –≤ —Ä–∞–∑–¥–µ–ª–µ \"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\" –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –∫–Ω–æ–ø–∫–æ–π \"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è\".");
            }
            return;
        }

        sendSimpleMessage(chatId,
                "üì± –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.");
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void handleIdleText(Long chatId, String text) {
        if ("/stop".equals(text) || "/unsubscribe".equals(text)) {
            log.info("üîï –ö–æ–º–∞–Ω–¥–∞ {} –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {}", text, chatId);
            boolean disabled = telegramService.disableNotifications(chatId);
            if (disabled) {
                SendMessage confirm = createPlainMessage(chatId,
                        "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö, —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.");
                try {
                    telegramClient.execute(confirm);
                } catch (TelegramApiException e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", e);
                }
            }
            return;
        }

        if (BUTTON_MENU.equals(text)) {
            handleMenuCommand(chatId);
            return;
        }

        if ("/stats".equals(text) || BUTTON_STATS.equals(text) || "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".equals(text)) {
            sendStatisticsScreen(chatId);
            return;
        }

        if (BUTTON_PARCELS.equals(text)) {
            sendParcelsScreen(chatId);
            return;
        }

        if (BUTTON_SETTINGS.equals(text)) {
            sendSettingsScreen(chatId);
            return;
        }

        if (BUTTON_HELP.equals(text) || "/help".equals(text)) {
            sendHelpScreen(chatId);
            return;
        }

        if ("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è".equals(text)) {
            boolean disabled = telegramService.disableNotifications(chatId);
            if (disabled) {
                refreshMainMenu(chatId);
            }
            return;
        }

        if ("üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è".equals(text)) {
            boolean enabled = telegramService.enableNotifications(chatId);
            if (enabled) {
                refreshMainMenu(chatId);
            }
            return;
        }

        if (fullNameValidator.isConfirmationPhrase(text)) {
            boolean confirmed = confirmNameAndNotify(chatId);
            if (confirmed) {
                refreshMainMenu(chatId);
            } else {
                sendNameConfirmationFailure(chatId);
            }
            return;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendStatisticsScreen(Long chatId) {
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.STATISTICS);
        InlineKeyboardMarkup backMarkup = buildNavigationKeyboard(navigationPath);
        telegramService.getStatistics(chatId)
                .ifPresentOrElse(stats -> {
                    String text = buildStatisticsText(stats);
                    sendInlineMessage(chatId, text, backMarkup, BuyerBotScreen.STATISTICS, navigationPath);
                }, () -> sendInlineMessage(chatId,
                        buildStatisticsUnavailableText(),
                        backMarkup,
                        BuyerBotScreen.STATISTICS,
                        navigationPath));
    }

    /**
     * –°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —ç–∫—Ä–∞–Ω–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç MarkdownV2.
     *
     * @param stats –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     * @return –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private String buildStatisticsText(CustomerStatisticsDTO stats) {
        if (stats == null) {
            return buildStatisticsUnavailableText();
        }

        String safePickedUp = escapeMarkdown(String.valueOf(stats.getPickedUpCount()));
        String safeReturned = escapeMarkdown(String.valueOf(stats.getReturnedCount()));
        String safeStores = stats.getStoreNames() == null || stats.getStoreNames().isEmpty()
                ? escapeMarkdown("-")
                : stats.getStoreNames().stream()
                .map(this::escapeMarkdown)
                .collect(Collectors.joining(", "));
        String safeReputation = stats.getReputation() == null
                ? escapeMarkdown("-")
                : escapeMarkdown(stats.getReputation().getDisplayName());

        StringBuilder builder = new StringBuilder();
        builder.append(escapeMarkdown("üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")).append('\n');
        builder.append(escapeMarkdown("–ó–∞–±—Ä–∞–Ω–æ: ")).append(safePickedUp).append('\n');
        builder.append(escapeMarkdown("–ù–µ –∑–∞–±—Ä–∞–Ω–æ: ")).append(safeReturned).append('\n');
        builder.append(escapeMarkdown("–ú–∞–≥–∞–∑–∏–Ω—ã: ")).append(safeStores).append('\n');
        builder.append(escapeMarkdown("–†–µ–ø—É—Ç–∞—Ü–∏—è: ")).append(safeReputation);
        return builder.toString();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     *
     * @return —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–ª—è MarkdownV2
     */
    private String buildStatisticsUnavailableText() {
        return escapeMarkdown("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã.");
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª —Å –ø–æ—Å—ã–ª–∫–∞–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, —Ä–∞–∑–±–∏—Ç—ã–º–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendParcelsScreen(Long chatId) {
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.PARCELS);
        InlineKeyboardMarkup backMarkup = buildNavigationKeyboard(navigationPath);
        telegramService.getParcelsOverview(chatId)
                .ifPresentOrElse(overview -> {
                    boolean hasDelivered = hasParcels(overview.getDelivered());
                    boolean hasAwaiting = hasParcels(overview.getWaitingForPickup());
                    boolean hasTransit = hasParcels(overview.getInTransit());
                    boolean hasAny = hasDelivered || hasAwaiting || hasTransit;

                    InlineKeyboardMarkup markup = hasAny
                            ? buildParcelsOverviewKeyboard(overview, navigationPath)
                            : backMarkup;
                    String text = hasAny
                            ? buildParcelsScreenText()
                            : buildEmptyParcelsText();

                    sendInlineMessage(chatId, text, markup, BuyerBotScreen.PARCELS, navigationPath);
                }, () -> sendInlineMessage(chatId,
                        buildParcelsContactHintText(),
                        backMarkup,
                        BuyerBotScreen.PARCELS,
                        navigationPath));
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ—Å—ã–ª–æ–∫ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
     *
     * @return —Ç–µ–∫—Å—Ç, —É–≤–µ–¥–æ–º–ª—è—é—â–∏–π –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ—Å—ã–ª–æ–∫
     */
    private String buildEmptyParcelsText() {
        return escapeMarkdown("üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏") +
                "\n\n" +
                escapeMarkdown("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫");
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —à–∞–ø–∫—É —Ä–∞–∑–¥–µ–ª–∞ ¬´–ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏¬ª, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
     *
     * @return –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
     */
    private String buildParcelsScreenText() {
        return escapeMarkdown("üì¶ –ú–æ–∏ –ø–æ—Å—ã–ª–∫–∏") +
                "\n\n" +
                escapeMarkdown("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:");
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ—Å—ã–ª–æ–∫.
     *
     * @return –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–ª—è MarkdownV2 —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    private String buildParcelsContactHintText() {
        return escapeMarkdown("üì± –ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø–æ—Å—ã–ª–∫–∏ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.");
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å—ã–ª–æ–∫ –∏ –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞.
     *
     * @param overview —Å–≤–æ–¥–∫–∞ –ø–æ—Å—ã–ª–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    private InlineKeyboardMarkup buildParcelsOverviewKeyboard(TelegramParcelsOverviewDTO overview,
                                                              List<BuyerBotScreen> navigationPath) {
        int deliveredCount = Optional.ofNullable(overview.getDelivered())
                .map(List::size)
                .orElse(0);
        int awaitingCount = Optional.ofNullable(overview.getWaitingForPickup())
                .map(List::size)
                .orElse(0);
        int transitCount = Optional.ofNullable(overview.getInTransit())
                .map(List::size)
                .orElse(0);

        List<InlineKeyboardRow> rows = new ArrayList<>();
        if (hasParcels(overview.getDelivered())) {
            rows.add(new InlineKeyboardRow(buildParcelsCategoryButton(
                    buildParcelsCategoryLabel(BUTTON_PARCELS_DELIVERED, deliveredCount),
                    CALLBACK_PARCELS_DELIVERED)));
        }
        if (hasParcels(overview.getWaitingForPickup())) {
            rows.add(new InlineKeyboardRow(buildParcelsCategoryButton(
                    buildParcelsCategoryLabel(BUTTON_PARCELS_AWAITING, awaitingCount),
                    CALLBACK_PARCELS_AWAITING)));
        }
        if (hasParcels(overview.getInTransit())) {
            rows.add(new InlineKeyboardRow(buildParcelsCategoryButton(
                    buildParcelsCategoryLabel(BUTTON_PARCELS_TRANSIT, transitCount),
                    CALLBACK_PARCELS_TRANSIT)));
        }
        appendNavigationRow(rows, navigationPath);

        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å—ã–ª–æ–∫ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
     *
     * @param baseLabel –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param count     –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—ã–ª–æ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @return —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞ ¬´–±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)¬ª
     */
    private String buildParcelsCategoryLabel(String baseLabel, int count) {
        return String.format("%s (%d)", baseLabel, count);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—ã–ª–æ–∫ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç.
     *
     * @param parcels —Å–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @return {@code true}, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
     */
    private boolean hasParcels(List<TelegramParcelInfoDTO> parcels) {
        return parcels != null && !parcels.isEmpty();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å—ã–ª–æ–∫.
     *
     * @param text         —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
     * @param callbackData callback-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @return –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    private InlineKeyboardButton buildParcelsCategoryButton(String text, String callbackData) {
        return InlineKeyboardButton.builder()
                .text(text)
                .callbackData(callbackData)
                .build();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     *
     * @param parcel DTO —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—ã–ª–∫–µ
     * @return –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ —á–∏—Ç–∞–µ–º–∞—è –∑–∞–≥–ª—É—à–∫–∞
     */
    private String resolveStoreName(TelegramParcelInfoDTO parcel) {
        if (parcel == null) {
            return "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω";
        }
        String store = parcel.getStoreName();
        if (store == null || store.isBlank()) {
            return "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω";
        }
        return store;
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ—Å—ã–ª–∫–∏ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–¥–µ–ª–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     *
     * @param parcel  DTO —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—ã–ª–∫–µ
     * @param section —Ä–∞–∑–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å—ã–ª–∫–∞
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
     */
    private String formatParcelLine(TelegramParcelInfoDTO parcel, ParcelsSection section) {
        if (parcel == null) {
            return "‚Äî";
        }

        String track = escapeMarkdown(formatTrackNumber(parcel.getTrackNumber()));
        if (section == ParcelsSection.WAITING_FOR_PICKUP
                && parcel.getStatus() == GlobalStatus.CUSTOMER_NOT_PICKING_UP) {
            return String.format("%s ‚Äî ‚ö†Ô∏è —Å–∫–æ—Ä–æ —É–µ–¥–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω", track);
        }

        if (section == ParcelsSection.DELIVERED && parcel.hasActiveReturnRequest()) {
            return String.format("%s ‚Äî %s", track, escapeMarkdown(PARCEL_ACTION_BLOCKED_TEXT));
        }

        return track;
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ¬ª, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—é.
     *
     * @param parcels        —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–∞)
     * @param navigationPath –ø—É—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π(–∞–º–∏) –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    private InlineKeyboardMarkup buildDeliveredParcelsKeyboard(List<TelegramParcelInfoDTO> parcels,
                                                               List<BuyerBotScreen> navigationPath) {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        appendNavigationRow(rows, navigationPath);
        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ Telegram.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     * @param parcel        –ø–æ—Å—ã–ª–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—à–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç
     */
    private void startReturnScenario(Long chatId,
                                     CallbackQuery callbackQuery,
                                     TelegramParcelInfoDTO parcel,
                                     ChatSession session) {
        String track = formatTrackNumber(parcel.getTrackNumber());
        MaybeInaccessibleMessage callbackMessage = callbackQuery != null ? callbackQuery.getMessage() : null;
        Integer sourceMessageId = callbackMessage != null ? callbackMessage.getMessageId() : null;
        if (sourceMessageId != null) {
            removeInlineKeyboard(chatId, sourceMessageId);
        }
        session = session != null ? session : ensureChatSession(chatId);
        session.clearReturnRequestData();
        session.setReturnRequestType(ReturnRequestType.RETURN);
        session.setReturnParcelId(parcel.getParcelId());
        session.setReturnParcelTrackNumber(track);
        session.setReturnIdempotencyKey(UUID.randomUUID().toString());
        session.setState(BuyerChatState.AWAITING_RETURN_REASON);
        chatSessionRepository.save(session);
        transitionToState(chatId, BuyerChatState.AWAITING_RETURN_REASON);
        sendReturnReasonPrompt(chatId, track);
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –∏–∑ Telegram.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     * @param parcel        –ø–æ—Å—ã–ª–∫–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—à–µ–Ω –æ–±–º–µ–Ω
     */
    private void startExchangeScenario(Long chatId,
                                       CallbackQuery callbackQuery,
                                       TelegramParcelInfoDTO parcel,
                                       ChatSession session) {
        String track = formatTrackNumber(parcel.getTrackNumber());
        MaybeInaccessibleMessage callbackMessage = callbackQuery != null ? callbackQuery.getMessage() : null;
        Integer sourceMessageId = callbackMessage != null ? callbackMessage.getMessageId() : null;
        if (sourceMessageId != null) {
            removeInlineKeyboard(chatId, sourceMessageId);
        }
        session = session != null ? session : ensureChatSession(chatId);
        session.clearReturnRequestData();
        session.setReturnRequestType(ReturnRequestType.EXCHANGE);
        session.setReturnParcelId(parcel.getParcelId());
        session.setReturnParcelTrackNumber(track);
        session.setReturnIdempotencyKey(UUID.randomUUID().toString());
        session.setState(BuyerChatState.AWAITING_EXCHANGE_REASON);
        chatSessionRepository.save(session);
        transitionToState(chatId, BuyerChatState.AWAITING_EXCHANGE_REASON);
        sendExchangeReasonPrompt(chatId, track);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞.
     *
     * @param chatId    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param trackLabel –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏
     */
    private void sendReturnReasonPrompt(Long chatId, String trackLabel) {
        if (chatId == null) {
            return;
        }
        String text = buildReturnReasonPromptText(trackLabel);
        InlineKeyboardMarkup markup = buildReturnReasonKeyboard();
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_RETURN_REASON);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_RETURN_REASON, navigationPath);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ –æ–±–º–µ–Ω–∞.
     *
     * @param chatId    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param trackLabel –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏
     */
    private void sendExchangeReasonPrompt(Long chatId, String trackLabel) {
        if (chatId == null) {
            return;
        }
        String text = buildExchangeReasonPromptText(trackLabel);
        InlineKeyboardMarkup markup = buildReturnReasonKeyboard();
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_EXCHANGE_REASON);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_EXCHANGE_REASON, navigationPath);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º MarkdownV2.
     *
     * @param trackLabel –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏
     * @return –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–ª—è MarkdownV2 —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
     */
    private String buildReturnReasonPromptText(String trackLabel) {
        String safeTrack = escapeMarkdown(trackLabel == null ? "" : trackLabel);
        return escapeMarkdown("üì© –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ –ø–æ—Å—ã–ª–∫–µ ")
                + safeTrack
                + escapeMarkdown(". –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—á–∏–Ω—É –Ω–∏–∂–µ.");
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã –æ–±–º–µ–Ω–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º MarkdownV2.
     *
     * @param trackLabel –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏
     * @return –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–ª—è MarkdownV2 —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
     */
    private String buildExchangeReasonPromptText(String trackLabel) {
        String safeTrack = escapeMarkdown(trackLabel == null ? "" : trackLabel);
        return escapeMarkdown("üì© –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –ø–æ –ø–æ—Å—ã–ª–∫–µ ")
                + safeTrack
                + escapeMarkdown(". –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—á–∏–Ω—É –Ω–∏–∂–µ.");
    }

    /**
     * –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞.
     * <p>
     * –ú–µ—Ç–æ–¥ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ callback, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * —É–≤–∏–¥–µ–ª –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void resendReturnReasonPrompt(Long chatId) {
        if (chatId == null) {
            return;
        }

        ChatSession session = ensureChatSession(chatId);
        Integer anchorMessageId = session.getAnchorMessageId();
        if (anchorMessageId != null) {
            removeInlineKeyboard(chatId, anchorMessageId);
        }
        String trackLabel = session.getReturnParcelTrackNumber();
        if (trackLabel == null || trackLabel.isBlank()) {
            sendMainMenu(chatId);
            return;
        }

        sendReturnReasonPrompt(chatId, trackLabel);
    }

    /**
     * –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –æ–±–º–µ–Ω–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —è–∫–æ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void resendExchangeReasonPrompt(Long chatId) {
        if (chatId == null) {
            return;
        }

        ChatSession session = ensureChatSession(chatId);
        Integer anchorMessageId = session.getAnchorMessageId();
        if (anchorMessageId != null) {
            removeInlineKeyboard(chatId, anchorMessageId);
        }
        String trackLabel = session.getReturnParcelTrackNumber();
        if (trackLabel == null || trackLabel.isBlank()) {
            sendMainMenu(chatId);
            return;
        }

        sendExchangeReasonPrompt(chatId, trackLabel);
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å—ã–ª–∫—É –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
     *
     * @param chatId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param parcelId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—ã–ª–∫–∏
     * @return DTO –ø–æ—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–≤–æ–¥–∫–µ
     */
    private Optional<TelegramParcelInfoDTO> findParcelById(Long chatId, Long parcelId) {
        if (chatId == null || parcelId == null) {
            return Optional.empty();
        }

        return telegramService.getParcelsOverview(chatId)
                .map(overview -> Stream.of(
                                overview.getDelivered(),
                                overview.getWaitingForPickup(),
                                overview.getInTransit())
                        .filter(Objects::nonNull)
                        .flatMap(List::stream)
                        .filter(parcel -> parcelId.equals(parcel.getParcelId()))
                        .findFirst()
                        .orElse(null))
                .filter(Objects::nonNull);
    }
    /**
     * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é, –∑–∞–º–µ–Ω—è—è –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≥–ª—É—à–∫–æ–π.
     *
     * @param trackNumber –∏—Å—Ö–æ–¥–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä
     * @return —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏–ª–∏ ¬´–ë–µ–∑ –Ω–æ–º–µ—Ä–∞¬ª –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    private String formatTrackNumber(String trackNumber) {
        if (trackNumber == null || trackNumber.isBlank()) {
            return "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞";
        }
        return trackNumber;
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendSettingsScreen(Long chatId) {
        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            sendSimpleMessage(chatId,
                    "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.");
            return;
        }

        Customer customer = optional.get();
        if (!ensureValidStoredNameOrRequestUpdate(chatId, customer)) {
            return;
        }

        boolean awaitingName = getState(chatId) == BuyerChatState.AWAITING_NAME_INPUT;
        String text = buildSettingsText(customer, awaitingName);
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.SETTINGS);
        InlineKeyboardMarkup markup = buildSettingsKeyboard(customer, navigationPath);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.SETTINGS, navigationPath);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendHelpScreen(Long chatId) {
        String rawHelpText = """
                ‚ùì –ü–æ–º–æ—â—å

                ‚Ä¢ /start ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
                ‚Ä¢ /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
                ‚Ä¢ /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –§–ò–û —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏".
                """.stripIndent();
        String helpText = escapeMarkdown(rawHelpText);
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.HELP);
        InlineKeyboardMarkup markup = buildNavigationKeyboard(navigationPath);
        sendInlineMessage(chatId, helpText, markup, BuyerBotScreen.HELP, navigationPath);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleSettingsToggleNotifications(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            answerCallbackQuery(callbackQuery, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —á–∞—Ç —á–µ—Ä–µ–∑ /start");
            sendSimpleMessage(chatId,
                    "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.");
            return;
        }

        Customer customer = optional.get();
        boolean notificationsEnabled = customer.isNotificationsEnabled();
        boolean changed = notificationsEnabled
                ? telegramService.disableNotifications(chatId)
                : telegramService.enableNotifications(chatId);
        if (changed) {
            customer.setNotificationsEnabled(!notificationsEnabled);
            answerCallbackQuery(callbackQuery, notificationsEnabled
                    ? "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
                    : "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã");
        } else {
            answerCallbackQuery(callbackQuery, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å");
        }

        renderSettingsScreen(chatId, customer);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleSettingsConfirmName(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            answerCallbackQuery(callbackQuery, "–ò–º—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
            sendSimpleMessage(chatId,
                    "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–µ–Ω–µ–º.");
            return;
        }

        Customer customer = optional.get();
        String fullName = customer.getFullName();
        if (fullName == null || fullName.isBlank()) {
            answerCallbackQuery(callbackQuery, "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∏–º—è");
            return;
        }

        if (customer.getNameSource() == NameSource.USER_CONFIRMED) {
            answerCallbackQuery(callbackQuery, "–ò–º—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
            renderSettingsScreen(chatId, customer);
            return;
        }

        boolean confirmed = telegramService.confirmName(chatId);
        if (confirmed) {
            customer.setNameSource(NameSource.USER_CONFIRMED);
            sendSimpleMessage(chatId, "‚úÖ –°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã");
            answerCallbackQuery(callbackQuery, "–ò–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
        } else {
            answerCallbackQuery(callbackQuery, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è");
        }

        renderSettingsScreen(chatId, customer);
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleSettingsEditName(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            answerCallbackQuery(callbackQuery, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —á–∞—Ç");
            sendSimpleMessage(chatId,
                    "‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–µ–º –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ /start.");
            return;
        }

        Customer customer = optional.get();
        String prompt = (customer.getFullName() == null || customer.getFullName().isBlank())
                ? "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –§–ò–û —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
                : "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —Å–æ–æ–±—â–µ–Ω–∏–µ–º.";
        answerCallbackQuery(callbackQuery, "–û–∂–∏–¥–∞—é –≤–≤–æ–¥ –§–ò–û");
        transitionToState(chatId, BuyerChatState.AWAITING_NAME_INPUT);
        sendSimpleMessage(chatId, prompt);
        renderSettingsScreen(chatId, customer);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleCallbackBackToMenu(Long chatId, CallbackQuery callbackQuery) {
        handleCallbackBackToMenu(chatId, callbackQuery, false);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     * @param useRender     —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω —á–µ—Ä–µ–∑ {@link #renderScreen(Long, BuyerBotScreen)}
     */
    private void handleCallbackBackToMenu(Long chatId,
                                          CallbackQuery callbackQuery,
                                          boolean useRender) {
        ChatSession session = chatSessionRepository.find(chatId).orElse(null);
        if (session != null) {
            resetReturnScenario(chatId, session);
        } else {
            transitionToState(chatId, BuyerChatState.IDLE);
        }
        answerCallbackQuery(callbackQuery, "–û—Ç–∫—Ä—ã–ª –º–µ–Ω—é");
        if (useRender) {
            renderScreen(chatId, BuyerBotScreen.MENU);
        } else {
            sendMainMenu(chatId);
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleNavigateBack(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        ChatSession session = chatSessionRepository.find(chatId).orElse(null);
        if (session == null) {
            answerCallbackQuery(callbackQuery, "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é");
            sendMainMenu(chatId);
            return;
        }

        BuyerBotScreen targetScreen = session.navigateBack();
        synchronizeStateAfterBackwardNavigation(chatId, session, targetScreen);
        answerCallbackQuery(callbackQuery, "–ù–∞–∑–∞–¥");
        renderScreen(chatId, targetScreen);
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ù–∞–∑–∞–¥¬ª.
     *
     * @param chatId       –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param session      —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö—Ä–∞–Ω—è—â–∞—è –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
     * @param targetScreen —ç–∫—Ä–∞–Ω, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è
     */
    private void synchronizeStateAfterBackwardNavigation(Long chatId,
                                                         ChatSession session,
                                                         BuyerBotScreen targetScreen) {
        if (session == null) {
            transitionToState(chatId, BuyerChatState.IDLE);
            return;
        }

        if (targetScreen == BuyerBotScreen.RETURNS_CREATE_TYPE) {
            session.setReturnStoreName(null);
            session.setReturnParcelId(null);
            session.setReturnParcelTrackNumber(null);
        } else if (targetScreen == BuyerBotScreen.RETURNS_CREATE_STORE) {
            session.setReturnParcelId(null);
            session.setReturnParcelTrackNumber(null);
        }

        BuyerChatState targetState = resolveStateForScreen(targetScreen);
        session.setState(targetState);
        chatSessionRepository.save(session);
        transitionToState(chatId, targetState);
    }

    /**
     * –ü–æ–¥–±–∏—Ä–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —ç–∫—Ä–∞–Ω—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
     *
     * @param targetScreen —ç–∫—Ä–∞–Ω, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥
     * @return —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
     */
    private BuyerChatState resolveStateForScreen(BuyerBotScreen targetScreen) {
        if (targetScreen == null) {
            return BuyerChatState.IDLE;
        }
        return switch (targetScreen) {
            case RETURNS_CREATE_TYPE -> BuyerChatState.AWAITING_REQUEST_TYPE;
            case RETURNS_CREATE_STORE -> BuyerChatState.AWAITING_STORE_SELECTION;
            case RETURNS_CREATE_REQUEST -> BuyerChatState.AWAITING_PARCEL_SELECTION;
            case RETURNS_ACTIVE_REQUESTS -> BuyerChatState.AWAITING_ACTIVE_REQUEST_SELECTION;
            case RETURNS_RETURN_REASON -> BuyerChatState.AWAITING_RETURN_REASON;
            case RETURNS_EXCHANGE_REASON -> BuyerChatState.AWAITING_EXCHANGE_REASON;
            default -> BuyerChatState.IDLE;
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
     *
     * @param chatId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param messageId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å
     * @param customer —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private void renderSettingsScreen(Long chatId, Customer customer) {
        if (chatId == null || customer == null) {
            return;
        }

        boolean awaitingName = getState(chatId) == BuyerChatState.AWAITING_NAME_INPUT;
        String settingsText = buildSettingsText(customer, awaitingName);
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.SETTINGS);
        InlineKeyboardMarkup settingsKeyboard = buildSettingsKeyboard(customer, navigationPath);
        sendInlineMessage(chatId, settingsText, settingsKeyboard, BuyerBotScreen.SETTINGS, navigationPath);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param customer         —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     * @param awaitingNameInput –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –§–ò–û
     * @return —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
     */
    private String buildSettingsText(Customer customer, boolean awaitingNameInput) {
        String notificationsStatus = customer.isNotificationsEnabled()
                ? "–≤–∫–ª—é—á–µ–Ω—ã"
                : "–æ—Ç–∫–ª—é—á–µ–Ω—ã";

        String nameStatus;
        String fullName = customer.getFullName();
        if (fullName == null || fullName.isBlank()) {
            nameStatus = escapeMarkdown("–Ω–µ —É–∫–∞–∑–∞–Ω–æ");
        } else if (customer.getNameSource() == NameSource.USER_CONFIRMED) {
            nameStatus = escapeMarkdown(fullName) + ' ' + escapeMarkdown("(–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)");
        } else {
            nameStatus = escapeMarkdown(fullName) + ' ' + escapeMarkdown("(–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)");
        }

        StringBuilder builder = new StringBuilder();
        builder.append(escapeMarkdown("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")).append('\n').append('\n');
        builder.append(escapeMarkdown("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: "))
                .append(escapeMarkdown(notificationsStatus))
                .append('\n');
        builder.append(escapeMarkdown("–ò–º—è: ")).append(nameStatus);
        if (awaitingNameInput) {
            builder.append("\n\n").append(escapeMarkdown("‚úçÔ∏è –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –§–ò–û."));
        }
        return builder.toString();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
     * @return –≥–æ—Ç–æ–≤–∞—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    private InlineKeyboardMarkup buildSettingsKeyboard(Customer customer,
                                                       List<BuyerBotScreen> navigationPath) {
        List<InlineKeyboardRow> rows = new ArrayList<>();

        InlineKeyboardButton notifyButton = InlineKeyboardButton.builder()
                .text(customer.isNotificationsEnabled()
                        ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                        : "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                .callbackData(CALLBACK_SETTINGS_TOGGLE_NOTIFICATIONS)
                .build();
        rows.add(new InlineKeyboardRow(notifyButton));

        String fullName = customer.getFullName();
        boolean hasName = fullName != null && !fullName.isBlank();
        if (!hasName) {
            InlineKeyboardButton setNameButton = InlineKeyboardButton.builder()
                    .text("‚úçÔ∏è –£–∫–∞–∑–∞—Ç—å –∏–º—è")
                    .callbackData(CALLBACK_SETTINGS_EDIT_NAME)
                    .build();
            rows.add(new InlineKeyboardRow(setNameButton));
        } else if (customer.getNameSource() == NameSource.USER_CONFIRMED) {
            InlineKeyboardButton editNameButton = InlineKeyboardButton.builder()
                    .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
                    .callbackData(CALLBACK_SETTINGS_EDIT_NAME)
                    .build();
            rows.add(new InlineKeyboardRow(editNameButton));
        } else {
            InlineKeyboardButton confirmButton = InlineKeyboardButton.builder()
                    .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è")
                    .callbackData(CALLBACK_SETTINGS_CONFIRM_NAME)
                    .build();

            InlineKeyboardButton editNameButton = InlineKeyboardButton.builder()
                    .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
                    .callbackData(CALLBACK_SETTINGS_EDIT_NAME)
                    .build();
            rows.add(new InlineKeyboardRow(confirmButton, editNameButton));
        }

        appendNavigationRow(rows, navigationPath);

        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞.
     *
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞–∑–∞–¥¬ª
     */
    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.
     *
     * @return –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
     */
    private InlineKeyboardButton buildBackButton() {
        return InlineKeyboardButton.builder()
                .text(BUTTON_BACK)
                .callbackData(CALLBACK_NAVIGATE_BACK)
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
     *
     * @return –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ ¬´–ú–µ–Ω—é¬ª
     */
    private InlineKeyboardButton buildMenuButton() {
        return InlineKeyboardButton.builder()
                .text(BUTTON_MENU)
                .callbackData(CALLBACK_BACK_TO_MENU)
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ù–∞–∑–∞–¥¬ª –∏ ¬´–ú–µ–Ω—é¬ª –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     *
     * @return —Å—Ç—Ä–æ–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
     */
    private InlineKeyboardRow buildBackAndMenuRow() {
        return new InlineKeyboardRow(buildBackButton(), buildMenuButton());
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ¬´–ù–∞–∑–∞–¥¬ª –∏ ¬´–ú–µ–Ω—é¬ª.
     *
     * @return –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    private InlineKeyboardMarkup buildBackAndMenuKeyboard() {
        InlineKeyboardRow navigationRow = buildBackAndMenuRow();
        return InlineKeyboardMarkup.builder()
                .keyboard(List.of(navigationRow))
                .build();
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ù–∞–∑–∞–¥¬ª –∏ ¬´–ú–µ–Ω—é¬ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
     *
     * @param navigationPath –ø—É—Ç—å —ç–∫—Ä–∞–Ω–æ–≤, –≤–µ–¥—É—â–∏–π –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
     * @return —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ {@code null}, –µ—Å–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
     */
    private InlineKeyboardRow buildNavigationRow(List<BuyerBotScreen> navigationPath) {
        if (navigationPath == null || navigationPath.size() <= 1) {
            return null;
        }
        List<InlineKeyboardButton> buttons = new ArrayList<>();
        buttons.add(buildBackButton());
        if (navigationPath.size() > 2) {
            buttons.add(buildMenuButton());
        }
        return new InlineKeyboardRow(buttons);
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞.
     *
     * @param rows           –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     * @param navigationPath –ø—É—Ç—å —ç–∫—Ä–∞–Ω–æ–≤ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    private void appendNavigationRow(List<InlineKeyboardRow> rows, List<BuyerBotScreen> navigationPath) {
        InlineKeyboardRow navigationRow = buildNavigationRow(navigationPath);
        if (navigationRow != null) {
            rows.add(navigationRow);
        }
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.
     *
     * @param navigationPath –ø—É—Ç—å —ç–∫—Ä–∞–Ω–æ–≤, –≤–µ–¥—É—â–∏–π –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
     * @return –≥–æ—Ç–æ–≤–∞—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    private InlineKeyboardMarkup buildNavigationKeyboard(List<BuyerBotScreen> navigationPath) {
        InlineKeyboardRow navigationRow = buildNavigationRow(navigationPath);
        List<InlineKeyboardRow> rows = navigationRow == null
                ? new ArrayList<>()
                : new ArrayList<>(List.of(navigationRow));
        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param screen —ç–∫—Ä–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å
     * @return –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–æ–≤ –æ—Ç –∫–æ—Ä–Ω—è –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    private List<BuyerBotScreen> computeNavigationPath(Long chatId, BuyerBotScreen screen) {
        return computeNavigationPath(chatId, screen, false);
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞.
     *
     * @param chatId         –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param screen         —ç–∫—Ä–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å
     * @param allowDuplicate —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –≤ –ø—É—Ç–∏
     * @return –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–æ–≤ –æ—Ç –∫–æ—Ä–Ω—è –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    private List<BuyerBotScreen> computeNavigationPath(Long chatId,
                                                       BuyerBotScreen screen,
                                                       boolean allowDuplicate) {
        if (chatId == null) {
            return List.of();
        }
        ChatSession session = chatSessionRepository.find(chatId)
                .orElse(new ChatSession(chatId, BuyerChatState.IDLE, null, null));
        return session.projectNavigationPath(screen, allowDuplicate);
    }

    /**
     * –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, –∑–∞–≤–µ—Ä—à–∞—è –∞–Ω–∏–º–∞—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param callbackQuery callback-–∑–∞–ø—Ä–æ—Å Telegram
     * @param text          —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
     */
    private void answerCallbackQuery(CallbackQuery callbackQuery, String text) {
        if (callbackQuery == null) {
            return;
        }

        AnswerCallbackQuery.AnswerCallbackQueryBuilder builder = AnswerCallbackQuery.builder()
                .callbackQueryId(callbackQuery.getId());
        if (text != null && !text.isBlank()) {
            builder.text(text);
        }
        AnswerCallbackQuery answer = builder.build();
        try {
            telegramClient.execute(answer);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback", e);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –§–ò–û, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–µ—Ä–µ–≤–æ–¥—è —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –§–ò–û
     */
    private void handleNameInput(Long chatId, String text) {
        String candidate = text == null ? "" : text.trim();
        if (candidate.isEmpty()) {
            remindNameRequired(chatId);
            return;
        }

        FullNameValidator.FullNameValidationResult validation = fullNameValidator.validate(candidate);

        if (validation.error() == FullNameValidator.FullNameValidationError.CONFIRMATION_PHRASE) {
            boolean confirmed = confirmNameAndNotify(chatId);
            if (confirmed) {
                transitionToState(chatId, BuyerChatState.IDLE);
                refreshMainMenu(chatId);
            } else {
                sendNameConfirmationFailure(chatId);
            }
            return;
        }

        if (!validation.valid()) {
            sendSimpleMessage(chatId, validation.message());
            return;
        }

        boolean saved = telegramService.updateNameFromTelegram(chatId, validation.normalizedFullName());
        if (!saved) {
            sendSimpleMessage(chatId,
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /menu.");
            return;
        }

        sendSimpleMessage(chatId, "‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
        transitionToState(chatId, BuyerChatState.IDLE);
        refreshMainMenu(chatId);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
     *
     * @param chatId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param reasonLabel —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã, –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    private void handleReturnReason(Long chatId, String reasonLabel) {
        if (chatId == null) {
            return;
        }

        String normalized = reasonLabel == null ? "" : reasonLabel.strip();
        if (normalized.isEmpty()) {
            sendSimpleMessage(chatId, PARCEL_RETURN_REASON_REMINDER);
            return;
        }

        ChatSession session = ensureChatSession(chatId);
        if (!ensureReturnContext(chatId, session)) {
            return;
        }

        session.setReturnReason(normalized);
        chatSessionRepository.save(session);
        finalizeReturnFlow(chatId, session);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ–±–º–µ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
     *
     * @param chatId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param reasonLabel —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã, –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    private void handleExchangeReason(Long chatId, String reasonLabel) {
        if (chatId == null) {
            return;
        }

        String normalized = reasonLabel == null ? "" : reasonLabel.strip();
        if (normalized.isEmpty()) {
            sendSimpleMessage(chatId, PARCEL_EXCHANGE_REASON_REMINDER);
            return;
        }

        ChatSession session = ensureChatSession(chatId);
        if (!ensureReturnContext(chatId, session)) {
            return;
        }

        session.setReturnReason(normalized);
        chatSessionRepository.save(session);
        handleExchangeConfirmation(chatId);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –æ–±–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleReturnCompletionAcknowledgement(Long chatId, CallbackQuery callbackQuery) {
        answerCallbackQuery(callbackQuery, "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
        ChatSession session = chatSessionRepository.find(chatId).orElse(null);
        if (session != null) {
            resetReturnScenario(chatId, session);
        } else {
            transitionToState(chatId, BuyerChatState.IDLE);
        }
        renderScreen(chatId, BuyerBotScreen.MENU);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void handleExchangeConfirmation(Long chatId) {
        ChatSession session = ensureChatSession(chatId);
        if (!ensureReturnContext(chatId, session)) {
            return;
        }

        Long parcelId = session.getReturnParcelId();
        String parcelLabel = session.getReturnParcelTrackNumber() != null
                ? session.getReturnParcelTrackNumber()
                : "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞";
        String idempotencyKey = session.getReturnIdempotencyKey();
        if (idempotencyKey == null || idempotencyKey.isBlank()) {
            idempotencyKey = UUID.randomUUID().toString();
            session.setReturnIdempotencyKey(idempotencyKey);
        }

        ZonedDateTime requestedAt = ZonedDateTime.now(ZoneOffset.UTC);

        OrderReturnRequest request;
        try {
            request = telegramService.registerReturnRequestFromTelegram(
                    chatId,
                    parcelId,
                    idempotencyKey,
                    session.getReturnReason()
            );
            if (request == null) {
                log.warn("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –≤–µ—Ä–Ω—É–ª null –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –ø–æ –ø–æ—Å—ã–ª–∫–µ {}", parcelId);
                sendSimpleMessage(chatId, PARCEL_EXCHANGE_FAILED);
                resetReturnScenario(chatId, session);
                return;
            }
            Long requestId = request.getId();
            if (requestId == null) {
                log.warn("‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±–º–µ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞ –∑–∞—è–≤–∫—É –±–µ–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ—Å—ã–ª–∫–∏ {}", parcelId);
                sendSimpleMessage(chatId, PARCEL_EXCHANGE_FAILED);
                resetReturnScenario(chatId, session);
                return;
            }
            telegramService.approveExchangeFromTelegram(chatId, parcelId, requestId);
        } catch (IllegalStateException ex) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–º–µ–Ω –ø–æ –ø–æ—Å—ã–ª–∫–µ {}: {}", parcelId, ex.getMessage());
            String message = ex.getMessage();
            if (message != null && message.contains("–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞")) {
                notifyReturnAlreadyRegistered(chatId, parcelLabel);
            } else if (message != null && message.contains("–í—Ä—É—á–µ–Ω–∞")) {
                sendSimpleMessage(chatId, PARCEL_RETURN_STATUS_INVALID);
            } else {
                sendSimpleMessage(chatId, PARCEL_EXCHANGE_FAILED);
            }
            resetReturnScenario(chatId, session);
            return;
        } catch (IllegalArgumentException ex) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–º–µ–Ω–∞ –ø–æ –ø–æ—Å—ã–ª–∫–µ {}: {}", parcelId, ex.getMessage());
            String message = ex.getMessage();
            if (message != null && message.contains("–¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")) {
                sendSimpleMessage(chatId, PARCEL_RETURN_IDEMPOTENCY_CONFLICT);
            } else {
                sendSimpleMessage(chatId, PARCEL_EXCHANGE_FAILED);
            }
            resetReturnScenario(chatId, session);
            return;
        } catch (AccessDeniedException ex) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–º–µ–Ω–∞ –¥–ª—è —á—É–∂–æ–π –ø–æ—Å—ã–ª–∫–∏ {} –≤ —á–∞—Ç–µ {}", parcelId, chatId);
            sendSimpleMessage(chatId, PARCEL_RETURN_ACCESS_DENIED);
            resetReturnScenario(chatId, session);
            return;
        } catch (Exception ex) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–º–µ–Ω–∞ –ø–æ –ø–æ—Å—ã–ª–∫–µ {}", parcelId, ex);
            sendSimpleMessage(chatId, PARCEL_EXCHANGE_FAILED);
            resetReturnScenario(chatId, session);
            return;
        }

        session.setState(BuyerChatState.IDLE);
        chatSessionRepository.save(session);
        transitionToState(chatId, BuyerChatState.IDLE);

        sendExchangeCompletionScreen(chatId, session, requestedAt);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–≥–æ—Ç–æ–≤–∫—É.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    private ChatSession ensureChatSession(Long chatId) {
        return chatSessionRepository.find(chatId)
                .orElseGet(() -> new ChatSession(chatId, BuyerChatState.IDLE, null, null));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
     *
     * @param chatId  –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param session —Å–µ—Å—Å–∏—è, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     * @return {@code true}, –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–æ–∑–º–æ–∂–Ω–æ
     */
    private boolean ensureReturnContext(Long chatId, ChatSession session) {
        if (session == null || session.getReturnParcelId() == null) {
            if (session != null) {
                session.clearReturnRequestData();
                session.setState(BuyerChatState.IDLE);
                chatSessionRepository.save(session);
            }
            transitionToState(chatId, BuyerChatState.IDLE);
            sendSimpleMessage(chatId, PARCEL_RETURN_CONTEXT_LOST);
            return false;
        }
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–æ–≤–∞–º –ø—Ä–æ–ø—É—Å–∫–∞.
     *
     * @param value –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @return {@code true}, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥
     */
    private boolean isSkipWord(String value) {
        if (value == null) {
            return true;
        }
        String normalized = value.strip().toLowerCase();
        return normalized.isEmpty()
                || normalized.equals("–Ω–µ—Ç")
                || normalized.equals("–Ω–µ")
                || normalized.equals("no")
                || normalized.equals("none")
                || normalized.equals("-");
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–æ–∑–≤—Ä–∞—Ç–∞, —Ñ–æ—Ä–º–∏—Ä—É—è –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
     *
     * @param chatId  –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param session –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–∏–∞–ª–æ–≥–∞
     */
    private void finalizeReturnFlow(Long chatId, ChatSession session) {
        if (session == null) {
            return;
        }

        Long parcelId = session.getReturnParcelId();
        String parcelLabel = session.getReturnParcelTrackNumber();
        ZonedDateTime requestedAt = ZonedDateTime.now(ZoneOffset.UTC);
        String idempotencyKey = session.getReturnIdempotencyKey();
        if (idempotencyKey == null || idempotencyKey.isBlank()) {
            idempotencyKey = UUID.randomUUID().toString();
            session.setReturnIdempotencyKey(idempotencyKey);
        }

        try {
            telegramService.registerReturnRequestFromTelegram(
                    chatId,
                    parcelId,
                    idempotencyKey,
                    session.getReturnReason()
            );
        } catch (IllegalStateException ex) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –ø–æ –ø–æ—Å—ã–ª–∫–µ {}: {}", parcelId, ex.getMessage());
            handleReturnRegistrationIllegalState(chatId, parcelLabel, ex);
            resetReturnScenario(chatId, session);
            return;
        } catch (IllegalArgumentException ex) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ –ø–æ—Å—ã–ª–∫–µ {}: {}", parcelId, ex.getMessage());
            handleReturnRegistrationIllegalArgument(chatId, ex);
            resetReturnScenario(chatId, session);
            return;
        } catch (AccessDeniedException ex) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è —á—É–∂–æ–π –ø–æ—Å—ã–ª–∫–∏ {} –≤ —á–∞—Ç–µ {}", parcelId, chatId);
            sendSimpleMessage(chatId, PARCEL_RETURN_ACCESS_DENIED);
            resetReturnScenario(chatId, session);
            return;
        } catch (Exception ex) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ –ø–æ—Å—ã–ª–∫–µ {}", parcelId, ex);
            sendSimpleMessage(chatId, PARCEL_RETURN_REGISTRATION_FAILED);
            resetReturnScenario(chatId, session);
            return;
        }

        session.setState(BuyerChatState.IDLE);
        chatSessionRepository.save(session);
        transitionToState(chatId, BuyerChatState.IDLE);

        sendReturnCompletionScreen(chatId, session, requestedAt);
    }

    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendReturnCompletionScreen(Long chatId) {
        ChatSession session = ensureChatSession(chatId);
        if (session.getReturnParcelTrackNumber() == null && session.getReturnReason() == null) {
            sendMainMenu(chatId);
            return;
        }
        sendReturnCompletionScreen(chatId, session, null);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–æ–π.
     *
     * @param chatId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param session     –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
     * @param requestedAt –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –∏–ª–∏ {@code null}
     */
    private void sendReturnCompletionScreen(Long chatId, ChatSession session, ZonedDateTime requestedAt) {
        if (chatId == null) {
            return;
        }

        ChatSession activeSession = session != null ? session : ensureChatSession(chatId);
        String parcelLabel = activeSession.getReturnParcelTrackNumber();
        if (parcelLabel == null || parcelLabel.isBlank()) {
            parcelLabel = PARCEL_RETURN_NO_TRACK;
        }
        String reason = activeSession.getReturnReason();
        if (reason == null || reason.isBlank()) {
            reason = PARCEL_RETURN_REASON_UNKNOWN;
        }
        String dateText = requestedAt != null
                ? formatReturnDateForSummary(requestedAt)
                : PARCEL_RETURN_DATE_UNKNOWN;

        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_RETURN_COMPLETION);
        String text = buildReturnCompletionText(parcelLabel, reason, dateText);
        InlineKeyboardMarkup markup = buildReturnCompletionKeyboard();
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_RETURN_COMPLETION, navigationPath);
    }

    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendExchangeCompletionScreen(Long chatId) {
        ChatSession session = ensureChatSession(chatId);
        if (session.getReturnParcelTrackNumber() == null && session.getReturnReason() == null) {
            sendMainMenu(chatId);
            return;
        }
        sendExchangeCompletionScreen(chatId, session, null);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–æ–π.
     *
     * @param chatId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param session     –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
     * @param requestedAt –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –∏–ª–∏ {@code null}
     */
    private void sendExchangeCompletionScreen(Long chatId, ChatSession session, ZonedDateTime requestedAt) {
        if (chatId == null) {
            return;
        }

        ChatSession activeSession = session != null ? session : ensureChatSession(chatId);
        String parcelLabel = activeSession.getReturnParcelTrackNumber();
        if (parcelLabel == null || parcelLabel.isBlank()) {
            parcelLabel = PARCEL_RETURN_NO_TRACK;
        }
        String reason = activeSession.getReturnReason();
        if (reason == null || reason.isBlank()) {
            reason = PARCEL_RETURN_REASON_UNKNOWN;
        }
        String dateText = requestedAt != null
                ? formatReturnDateForSummary(requestedAt)
                : PARCEL_RETURN_DATE_UNKNOWN;

        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.RETURNS_EXCHANGE_COMPLETION);
        String text = buildExchangeCompletionText(parcelLabel, reason, dateText);
        InlineKeyboardMarkup markup = buildExchangeCompletionKeyboard();
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.RETURNS_EXCHANGE_COMPLETION, navigationPath);
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Å—ã–ª–∫–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param parcel –ø–æ—Å—ã–ª–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    private void notifyReturnAlreadyRegistered(Long chatId, TelegramParcelInfoDTO parcel) {
        if (parcel == null) {
            return;
        }
        notifyReturnAlreadyRegistered(chatId, parcel.getTrackNumber());
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ –ø–æ—Å—ã–ª–∫–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.
     */
    private void notifyReturnAlreadyRegistered(Long chatId, String trackLabel) {
        String track = formatTrackNumber(trackLabel);
        sendSimpleMessage(chatId, String.format(PARCEL_RETURN_ALREADY_REGISTERED_TEMPLATE, track));
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞.
     */
    private void handleReturnRegistrationIllegalState(Long chatId,
                                                      String parcelLabel,
                                                      IllegalStateException ex) {
        String message = ex.getMessage();
        if (message != null && message.contains("–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞")) {
            notifyReturnAlreadyRegistered(chatId, parcelLabel);
            return;
        }
        if (message != null && message.contains("–í—Ä—É—á–µ–Ω–∞")) {
            sendSimpleMessage(chatId, PARCEL_RETURN_STATUS_INVALID);
            return;
        }
        sendSimpleMessage(chatId, PARCEL_RETURN_REGISTRATION_FAILED);
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–º –∫–ª—é—á–æ–º –∏–ª–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏.
     */
    private void handleReturnRegistrationIllegalArgument(Long chatId, IllegalArgumentException ex) {
        String message = ex.getMessage();
        if (message != null && message.contains("–¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")) {
            sendSimpleMessage(chatId, PARCEL_RETURN_IDEMPOTENCY_CONFLICT);
            return;
        }
        sendSimpleMessage(chatId, PARCEL_RETURN_REGISTRATION_FAILED);
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏.
     */
    private void resetReturnScenario(Long chatId, ChatSession session) {
        if (session == null) {
            return;
        }
        session.clearReturnRequestData();
        session.setState(BuyerChatState.IDLE);
        chatSessionRepository.save(session);
        transitionToState(chatId, BuyerChatState.IDLE);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è.
     *
     * @param date —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –¥–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
     * @return —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private String formatReturnDateForSummary(ZonedDateTime date) {
        if (date == null) {
            return PARCEL_RETURN_DATE_UNKNOWN;
        }
        return PARCEL_RETURN_DATE_FORMAT.format(date);
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Å—ã–ª–∫–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param parcel –ø–æ—Å—ã–ª–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void resetReturnFlow(Long chatId) {
        ChatSession session = chatSessionRepository.find(chatId).orElse(null);
        if (session == null) {
            return;
        }
        if (session.getReturnParcelId() == null
                && session.getReturnReason() == null
                && session.getReturnIdempotencyKey() == null) {
            return;
        }
        session.clearReturnRequestData();
        chatSessionRepository.save(session);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –§–ò–û –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return {@code true}, –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
     */
    private boolean confirmNameAndNotify(Long chatId) {
        boolean confirmed = telegramService.confirmName(chatId);
        if (confirmed) {
            sendSimpleMessage(chatId, "‚úÖ –°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã");
        }
        return confirmed;
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –§–ò–û –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏ –ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendNameConfirmationFailure(Long chatId) {
        sendSimpleMessage(chatId, NAME_CONFIRMATION_MISSING_MESSAGE);
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void remindContactRequired(Long chatId) {
        transitionToState(chatId, BuyerChatState.AWAITING_CONTACT);
        sendPhoneRequestMessage(chatId,
                "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–º–µ—Ä. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É.");
    }

    /**
     * –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void remindRequestTypeSelection(Long chatId) {
        sendSimpleMessage(chatId, RETURNS_CREATE_REPEAT_HINT);
    }

    /**
     * –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void remindStoreSelection(Long chatId) {
        sendSimpleMessage(chatId, RETURNS_CREATE_REPEAT_HINT);
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø–æ—Å—ã–ª–∫—É —Å–ª–µ–¥—É–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void remindParcelSelection(Long chatId) {
        sendSimpleMessage(chatId, RETURNS_CREATE_REPEAT_HINT);
    }

    /**
     * –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞—è–≤–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void remindRequestAction(Long chatId) {
        sendSimpleMessage(chatId, RETURNS_ACTIVE_SELECT_PROMPT);
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void remindNameRequired(Long chatId) {
        sendSimpleMessage(chatId,
                "‚úçÔ∏è –°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –§–ò–û. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /menu.");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫ –∫–Ω–æ–ø–∫–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–µ–º.
     *
     * @param text —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–π —Ñ—Ä–∞–∑–µ
     */
    private boolean isNameControlCommand(String text) {
        return "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è".equals(text)
                || "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è".equals(text)
                || "–ù–µ–≤–µ—Ä–Ω–æ".equalsIgnoreCase(text)
                || "–ò–∑–º–µ–Ω–∏—Ç—å".equalsIgnoreCase(text);
    }

    /**
     * –§–∏–∫—Å–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
     * <p>
     * –ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–µ—á–∞–µ—Ç, —á—Ç–æ
     * –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param state  —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π
     */
    private void transitionToState(Long chatId, BuyerChatState state) {
        if (chatId == null || state == null) {
            return;
        }

        chatSessionRepository.updateState(chatId, state);

        if (state == BuyerChatState.AWAITING_CONTACT) {
            chatSessionRepository.clearContactRequestSent(chatId);
            chatSessionRepository.markKeyboardHidden(chatId);
            return;
        }

        chatSessionRepository.clearContactRequestSent(chatId);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ {@link BuyerChatState#IDLE}, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
     */
    BuyerChatState getState(Long chatId) {
        return chatSessionRepository.getState(chatId);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∏–ø–æ–º —Å–æ–±—ã—Ç–∏—è, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ –∏ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
     */
    private String formatUpdateMetadata(Update update) {
        if (update == null) {
            return "type=unknown";
        }

        String updateType = resolveUpdateType(update);
        Long chatId = resolveChatId(update);
        String maskedPhone = extractMaskedPhone(update);

        StringBuilder builder = new StringBuilder();
        builder.append("type=").append(updateType);
        builder.append(", chatId=").append(chatId != null ? chatId : "unknown");
        if (maskedPhone != null) {
            builder.append(", phone=").append(maskedPhone);
        }
        return builder.toString();
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞ {@link Update}.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
     * @return —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
     */
    private String resolveUpdateType(Update update) {
        if (update.hasMessage()) {
            return "message";
        }
        if (update.hasEditedMessage()) {
            return "edited_message";
        }
        if (update.hasCallbackQuery()) {
            return "callback_query";
        }
        if (update.hasInlineQuery()) {
            return "inline_query";
        }
        if (update.hasChosenInlineQuery()) {
            return "chosen_inline_query";
        }
        if (update.hasChannelPost()) {
            return "channel_post";
        }
        if (update.hasEditedChannelPost()) {
            return "edited_channel_post";
        }
        if (update.hasShippingQuery()) {
            return "shipping_query";
        }
        if (update.hasPreCheckoutQuery()) {
            return "pre_checkout_query";
        }
        if (update.hasPoll()) {
            return "poll";
        }
        if (update.hasPollAnswer()) {
            return "poll_answer";
        }
        if (update.hasMyChatMember()) {
            return "my_chat_member";
        }
        if (update.hasChatMember()) {
            return "chat_member";
        }
        if (update.hasChatJoinRequest()) {
            return "chat_join_request";
        }
        return "unknown";
    }

    /**
     * –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
     * @return –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –∏–ª–∏ {@code null}, –µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å
     */
    private Long resolveChatId(Update update) {
        if (update.hasMessage() && update.getMessage() != null) {
            return update.getMessage().getChatId();
        }
        if (update.hasEditedMessage() && update.getEditedMessage() != null) {
            return update.getEditedMessage().getChatId();
        }
        if (update.hasCallbackQuery()) {
            var callback = update.getCallbackQuery();
            if (callback != null && callback.getMessage() != null) {
                return callback.getMessage().getChatId();
            }
        }
        if (update.hasChannelPost() && update.getChannelPost() != null) {
            return update.getChannelPost().getChatId();
        }
        if (update.hasEditedChannelPost() && update.getEditedChannelPost() != null) {
            return update.getEditedChannelPost().getChatId();
        }
        if (update.hasMyChatMember()) {
            var myChatMember = update.getMyChatMember();
            if (myChatMember != null && myChatMember.getChat() != null) {
                return myChatMember.getChat().getId();
            }
        }
        if (update.hasChatMember()) {
            var chatMember = update.getChatMember();
            if (chatMember != null && chatMember.getChat() != null) {
                return chatMember.getChat().getId();
            }
        }
        if (update.hasChatJoinRequest()) {
            var joinRequest = update.getChatJoinRequest();
            if (joinRequest != null && joinRequest.getChat() != null) {
                return joinRequest.getChat().getId();
            }
        }
        return null;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
     * @return –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ {@code null}, –µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
     */
    private String extractMaskedPhone(Update update) {
        if (update.hasMessage() && update.getMessage() != null) {
            var message = update.getMessage();
            if (message.hasContact() && message.getContact() != null) {
                String phone = message.getContact().getPhoneNumber();
                if (phone != null && !phone.isBlank()) {
                    return PhoneUtils.maskPhone(phone);
                }
            }
        }
        return null;
    }

    /**
     * –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendSharePhoneKeyboard(Long chatId) {
        sendPhoneRequestMessage(chatId,
                "üëã –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—ã–ª–∫–∞—Ö, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –±–æ—Ç–∞.
     * <p>–ú–µ–Ω—é —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–º–æ—â–∏.</p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendMainMenu(Long chatId) {
        sendMainMenu(chatId, null, false);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –±–æ—Ç–∞.
     * <p>–ú–µ–Ω—é —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–º–æ—â–∏.</p>
     *
     * @param chatId                   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param forceResendOnNotModified —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ ¬´message is not modified¬ª
     */
    private void sendMainMenu(Long chatId, boolean forceResendOnNotModified) {
        sendMainMenu(chatId, null, forceResendOnNotModified);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ.
     *
     * @param chatId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–æ—Ä–æ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
     */
    private void sendMainMenu(Long chatId, Customer customer) {
        sendMainMenu(chatId, customer, false);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—è –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
     *
     * @param chatId                   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param customer                 –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–æ—Ä–æ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
     * @param forceResendOnNotModified —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ ¬´message is not modified¬ª
     */
    private void sendMainMenu(Long chatId, Customer customer, boolean forceResendOnNotModified) {
        if (chatId == null) {
            return;
        }

        Customer resolvedCustomer = customer != null
                ? customer
                : telegramService.findByChatId(chatId).orElse(null);
        String text = buildMainMenuText(resolvedCustomer);
        InlineKeyboardMarkup markup = buildMainMenuKeyboard(resolvedCustomer);
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.MENU);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.MENU, forceResendOnNotModified, navigationPath);

        ensurePersistentKeyboard(chatId);
        if (resolvedCustomer != null && resolvedCustomer.isTelegramConfirmed()) {
            showActiveAnnouncement(chatId);
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram, –≤ –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä
     */
    @Override
    public void showActiveAnnouncement(Long chatId) {
        renderActiveAnnouncement(chatId);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –º–µ–Ω—é
     * @return —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–Ω—é
     */
    private String buildMainMenuText(Customer customer) {
        StringBuilder builder = new StringBuilder();
        builder.append(escapeMarkdown("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")).append('\n').append('\n');

        if (customer == null) {
            builder.append(escapeMarkdown("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."))
                    .append('\n')
                    .append('\n');
        } else {
            String notificationsStatus = customer.isNotificationsEnabled() ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã";
            builder.append(escapeMarkdown("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: "))
                    .append(escapeMarkdown(notificationsStatus))
                    .append('\n');

            String fullName = customer.getFullName();
            if (fullName == null || fullName.isBlank()) {
                builder.append(escapeMarkdown("–ò–º—è: –Ω–µ —É–∫–∞–∑–∞–Ω–æ"));
            } else if (customer.getNameSource() == NameSource.USER_CONFIRMED) {
                builder.append(escapeMarkdown("–ò–º—è: "))
                        .append(escapeMarkdown(fullName))
                        .append(' ')
                        .append(escapeMarkdown("(–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)"));
            } else {
                builder.append(escapeMarkdown("–ò–º—è: "))
                        .append(escapeMarkdown(fullName))
                        .append(' ')
                        .append(escapeMarkdown("(–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"));
            }
            builder.append('\n').append('\n');
        }

        builder.append(escapeMarkdown("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏—à–µ–π ¬´üè† –ú–µ–Ω—é¬ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."));
        return builder.toString();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Ä–µ–∑–µ—Ä–≤ –Ω–∞ –±—É–¥—É—â–∏–µ —É—Å–ª–æ–≤–∏—è)
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
     */
    private InlineKeyboardMarkup buildMainMenuKeyboard(Customer customer) {
        InlineKeyboardButton statsButton = InlineKeyboardButton.builder()
                .text(BUTTON_STATS)
                .callbackData(CALLBACK_MENU_SHOW_STATS)
                .build();
        InlineKeyboardButton parcelsButton = InlineKeyboardButton.builder()
                .text(BUTTON_PARCELS)
                .callbackData(CALLBACK_MENU_SHOW_PARCELS)
                .build();
        InlineKeyboardButton returnsButton = InlineKeyboardButton.builder()
                .text(BUTTON_RETURNS)
                .callbackData(CALLBACK_MENU_RETURNS_EXCHANGES)
                .build();
        InlineKeyboardButton settingsButton = InlineKeyboardButton.builder()
                .text(BUTTON_SETTINGS)
                .callbackData(CALLBACK_MENU_SHOW_SETTINGS)
                .build();
        InlineKeyboardButton helpButton = InlineKeyboardButton.builder()
                .text(BUTTON_HELP)
                .callbackData(CALLBACK_MENU_SHOW_HELP)
                .build();

        List<InlineKeyboardRow> rows = new ArrayList<>();
        rows.add(new InlineKeyboardRow(statsButton, parcelsButton));
        rows.add(new InlineKeyboardRow(returnsButton, settingsButton));
        rows.add(new InlineKeyboardRow(helpButton));

        if (customer != null) {
            String fullName = customer.getFullName();
            boolean hasName = fullName != null && !fullName.isBlank();
            if (hasName && customer.getNameSource() != NameSource.USER_CONFIRMED) {
                InlineKeyboardButton confirmButton = InlineKeyboardButton.builder()
                        .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è")
                        .callbackData(CALLBACK_NAME_CONFIRM)
                        .build();
                InlineKeyboardButton editButton = InlineKeyboardButton.builder()
                        .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
                        .callbackData(CALLBACK_NAME_EDIT)
                        .build();
                rows.add(new InlineKeyboardRow(confirmButton, editButton));
            }
        }

        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     * <p>
     * –ë–∞–Ω–Ω–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤–∏–¥–µ–ª –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
     * –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –º–µ—Ç–æ–¥ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏
     * –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–Ω–Ω–µ—Ä, —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∏–∑–º–µ–Ω—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     */
    private void renderActiveAnnouncement(Long chatId) {
        if (chatId == null) {
            return;
        }

        adminNotificationService.findActiveNotification()
                .ifPresent(notification -> {
                    ChatSession session = chatSessionRepository.find(chatId).orElse(null);
                    Long storedId = session != null ? session.getCurrentNotificationId() : null;
                    boolean seen = session != null && session.isAnnouncementSeen();
                    ZonedDateTime storedUpdatedAt = session != null ? session.getAnnouncementUpdatedAt() : null;

                    boolean matchesActive = storedId != null && notification.getId().equals(storedId);
                    boolean contentRefreshed = isNotificationRefreshed(notification.getUpdatedAt(), storedUpdatedAt);
                    if (!matchesActive || contentRefreshed) {
                        Integer anchorId = session != null ? session.getAnchorMessageId() : null;
                        chatSessionRepository.updateAnnouncement(chatId,
                                notification.getId(),
                                anchorId,
                                notification.getUpdatedAt());
                        matchesActive = true;
                        seen = false;
                    }

                    if (matchesActive && !seen) {
                        renderAnnouncementBanner(chatId, notification);
                    }
                });
    }

    /**
     * –§–∏–∫—Å–∏—Ä—É–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void markActiveAnnouncementSeen(Long chatId) {
        if (chatId == null) {
            return;
        }

        adminNotificationService.findActiveNotification()
                .ifPresent(notification -> {
                    Long notificationId = notification.getId();
                    if (notificationId == null) {
                        return;
                    }
                    chatSessionRepository.setAnnouncementAsSeen(chatId,
                            notificationId,
                            notification.getUpdatedAt());
                });
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —è–∫–æ—Ä–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId       –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param notification –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    private void renderAnnouncementBanner(Long chatId, AdminNotification notification) {
        if (chatId == null || notification == null) {
            return;
        }

        String text = buildAnnouncementText(notification);
        InlineKeyboardMarkup markup = buildAnnouncementKeyboard();
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.MENU);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.MENU, true, navigationPath);

        Integer anchorId = chatSessionRepository.find(chatId)
                .map(ChatSession::getAnchorMessageId)
                .orElse(null);
        chatSessionRepository.updateAnnouncement(chatId,
                notification.getId(),
                anchorId,
                notification.getUpdatedAt());
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –±—ã–ª–æ –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞.
     *
     * @param notificationUpdatedAt —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     * @param storedUpdatedAt       –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    private boolean isNotificationRefreshed(ZonedDateTime notificationUpdatedAt, ZonedDateTime storedUpdatedAt) {
        if (notificationUpdatedAt == null) {
            return false;
        }
        return storedUpdatedAt == null || notificationUpdatedAt.isAfter(storedUpdatedAt);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –±–∞–Ω–Ω–µ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –ø—É–Ω–∫—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞.
     *
     * @param notification –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
     * @return —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–Ω–Ω–µ—Ä–∞
     */
    private String buildAnnouncementText(AdminNotification notification) {
        StringBuilder builder = new StringBuilder();
        builder.append("üì£ ").append(escapeMarkdown(notification.getTitle())).append("\n\n");

        boolean hasBody = false;
        List<String> lines = notification.getBodyLines();
        if (lines != null) {
            for (String line : lines) {
                if (line == null || line.isBlank()) {
                    continue;
                }
                builder.append("‚Ä¢ ").append(escapeMarkdown(line)).append('\n');
                hasBody = true;
            }
        }

        if (hasBody) {
            builder.append('\n');
        }
        builder.append(escapeMarkdown("–ù–∞–∂–º–∏—Ç–µ ¬´–û–∫¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."));
        return builder.toString();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
     *
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–û–∫¬ª
     */
    private InlineKeyboardMarkup buildAnnouncementKeyboard() {
        InlineKeyboardButton okButton = InlineKeyboardButton.builder()
                .text("–û–∫")
                .callbackData(CALLBACK_ANNOUNCEMENT_ACK)
                .build();
        return InlineKeyboardMarkup.builder()
                .keyboard(List.of(new InlineKeyboardRow(okButton)))
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏.
     *
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–º–µ–Ω–µ–º
     */
    private InlineKeyboardMarkup buildNameConfirmationKeyboard(List<BuyerBotScreen> navigationPath) {
        InlineKeyboardButton confirmButton = InlineKeyboardButton.builder()
                .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è")
                .callbackData(CALLBACK_NAME_CONFIRM)
                .build();
        InlineKeyboardButton editButton = InlineKeyboardButton.builder()
                .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
                .callbackData(CALLBACK_NAME_EDIT)
                .build();

        List<InlineKeyboardRow> rows = new ArrayList<>();
        rows.add(new InlineKeyboardRow(confirmButton, editButton));
        appendNavigationRow(rows, navigationPath);

        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.
     *
     * @return —Ä–∞–∑–º–µ—Ç–∫–∞ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    private ReplyKeyboardMarkup createPersistentMenuKeyboard() {
        KeyboardButton menuButton = new KeyboardButton(BUTTON_MENU);
        KeyboardRow row = new KeyboardRow(List.of(menuButton));

        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup(List.of(row));
        markup.setResizeKeyboard(true);
        markup.setOneTimeKeyboard(false);
        return markup;
    }

    /**
     * –§–∏–∫—Å–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç —Å–∫—Ä—ã—Ç–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
     *
     * @param chatId  –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param message –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private boolean detectPersistentKeyboardRemoval(Long chatId, Message message) {
        if (chatId == null || message == null) {
            return false;
        }

        JsonNode messageJson;
        try {
            messageJson = objectMapper.convertValue(message, JsonNode.class);
        } catch (IllegalArgumentException e) {
            return false;
        }

        if (messageJson == null || messageJson.isNull() || messageJson.isMissingNode()) {
            return false;
        }

        JsonNode replyMarkupNode = messageJson.path("reply_markup");
        if (!replyMarkupNode.isMissingNode() && replyMarkupNode.path("remove_keyboard").asBoolean(false)) {
            chatSessionRepository.markKeyboardHidden(chatId);
            return true;
        }

        return false;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞ —Ä–∞–Ω–µ–µ.
     * <p>
     * –í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã
     * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     * </p>
     *
     * @param chatId            –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param skipCurrentUpdate {@code true}, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –µ—ë –Ω–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
     */
    private void restorePersistentKeyboardIfNeeded(Long chatId, boolean skipCurrentUpdate) {
        if (chatId == null || skipCurrentUpdate) {
            return;
        }

        if (!chatSessionRepository.isKeyboardHidden(chatId)) {
            return;
        }

        if (getState(chatId) == BuyerChatState.AWAITING_CONTACT) {
            return;
        }

        ensurePersistentKeyboard(chatId);
    }

    /**
     * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–Ω–∏–∑—É –¥–∏–∞–ª–æ–≥–∞.
     * <p>
     * –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞
     * ¬´üè† –ú–µ–Ω—é¬ª –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ —Ä—É—á–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è,
     * —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void ensurePersistentKeyboard(Long chatId) {
        if (chatId == null) {
            return;
        }

        if (getState(chatId) == BuyerChatState.AWAITING_CONTACT) {
            return;
        }

        if (!chatSessionRepository.isKeyboardHidden(chatId)) {
            return;
        }

        SendMessage message = createPlainMessage(chatId,
                "–ö–ª–∞–≤–∏—à–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ: ¬´üè† –ú–µ–Ω—é¬ª.");
        message.setReplyMarkup(createPersistentMenuKeyboard());
        message.setDisableNotification(true);

        try {
            Message sent = telegramClient.execute(message);
            chatSessionRepository.markKeyboardVisible(chatId);
            if (sent == null) {
                log.debug("‚ÑπÔ∏è Telegram –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {}", chatId);
            }
        } catch (TelegramApiException e) {
            chatSessionRepository.markKeyboardHidden(chatId);
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", e);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —è–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ –≤ —É—Å—Ç–æ–π—á–∏–≤–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
     * @param markup –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param screen —ç–∫—Ä–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    private void sendInlineMessage(Long chatId,
                                   String text,
                                   InlineKeyboardMarkup markup,
                                   BuyerBotScreen screen,
                                   List<BuyerBotScreen> navigationPath) {
        sendInlineMessage(chatId, text, markup, screen, false, navigationPath);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —è–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ –≤ —É—Å—Ç–æ–π—á–∏–≤–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
     *
     * @param chatId                   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text                     —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
     * @param markup                   –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param screen                   —ç–∫—Ä–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param forceResendOnNotModified —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ ¬´message is not modified¬ª
     */
    private void sendInlineMessage(Long chatId,
                                   String text,
                                   InlineKeyboardMarkup markup,
                                   BuyerBotScreen screen,
                                   boolean forceResendOnNotModified,
                                   List<BuyerBotScreen> navigationPath) {
        if (chatId == null) {
            return;
        }

        ChatSession session = chatSessionRepository.find(chatId).orElse(null);
        boolean manualAnchorReset = session != null
                && session.getLastScreen() == screen
                && session.getAnchorMessageId() == null;
        Integer messageId = session != null ? session.getAnchorMessageId() : null;

        boolean shouldSendNewMessage = manualAnchorReset || messageId == null;

        if (messageId != null && !manualAnchorReset) {
            EditMessageText edit = EditMessageText.builder()
                    .chatId(chatId.toString())
                    .messageId(messageId)
                    .text(text)
                    .parseMode(TELEGRAM_PARSE_MODE)
                    .replyMarkup(markup)
                    .build();
            try {
                telegramClient.execute(edit);
                chatSessionRepository.updateAnchorAndScreen(chatId, messageId, screen, navigationPath);
                return;
            } catch (TelegramApiException e) {
                String errorMessage = e.getMessage();
                boolean notModified = errorMessage != null && errorMessage.contains("message is not modified");
                if (notModified) {
                    retainAnchorAfterNotModified(chatId, messageId, screen, navigationPath);
                    if (forceResendOnNotModified) {
                        log.debug("‚ÑπÔ∏è Telegram —Å–æ–æ–±—â–∏–ª –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {}, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É—é —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", chatId);
                    } else {
                        log.debug("‚ÑπÔ∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —è–∫–æ—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏", chatId);
                    }
                    return;
                } else {
                    log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —è–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {}", chatId, e);
                    deactivateAnchorAndRemoveKeyboard(chatId, messageId, false);
                    shouldSendNewMessage = true;
                }
            }
        }

        if (!shouldSendNewMessage) {
            return;
        }

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setReplyMarkup(markup);
        message.setDisableNotification(true);
        message.setParseMode(TELEGRAM_PARSE_MODE);
        try {
            Message sent = telegramClient.execute(message);
            Integer newAnchorId = sent != null ? sent.getMessageId() : null;
            chatSessionRepository.updateAnchorAndScreen(chatId, newAnchorId, screen, navigationPath);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —è–∫–æ—Ä—å –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ Telegram ¬´message is not modified¬ª.
     * <p>
     * –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é
     * –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–º.
     * </p>
     *
     * @param chatId    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param messageId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param screen    —ç–∫—Ä–∞–Ω, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —è–∫–æ—Ä—é
     */
    private void retainAnchorAfterNotModified(Long chatId,
                                              Integer messageId,
                                              BuyerBotScreen screen,
                                              List<BuyerBotScreen> navigationPath) {
        if (chatId == null || messageId == null) {
            return;
        }

        boolean keyboardHiddenBeforeUpdate = chatSessionRepository.isKeyboardHidden(chatId);
        chatSessionRepository.updateAnchorAndScreen(chatId, messageId, screen, navigationPath);
        if (keyboardHiddenBeforeUpdate) {
            ensurePersistentKeyboard(chatId);
        } else {
            chatSessionRepository.markKeyboardVisible(chatId);
        }
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä–æ–µ —è–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–Ω–∏–º–∞–µ—Ç —Å –Ω–µ–≥–æ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π.
     *
     * @param chatId                 –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param messageId              –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param preserveKeyboardStatus —Å–ª–µ–¥—É–µ—Ç –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–∏–∑–Ω–∞–∫ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    private void deactivateAnchorAndRemoveKeyboard(Long chatId,
                                                   Integer messageId,
                                                   boolean preserveKeyboardStatus) {
        if (chatId == null) {
            return;
        }

        if (preserveKeyboardStatus) {
            chatSessionRepository.deactivateAnchor(chatId);
        } else {
            chatSessionRepository.clearAnchor(chatId);
            chatSessionRepository.markKeyboardHidden(chatId);
        }

        if (messageId != null) {
            removeInlineKeyboard(chatId, messageId);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void refreshMainMenu(Long chatId) {
        sendMainMenu(chatId);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     * @param text   —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void sendSimpleMessage(Long chatId, String text) {
        if (chatId == null) {
            return;
        }
        SendMessage msg = createPlainMessage(chatId, text);
        try {
            telegramClient.execute(msg);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç {@link SendMessage} —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º MarkdownV2 –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @return –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç {@link SendMessage}
     */
    private SendMessage createPlainMessage(Long chatId, String text) {
        String safeText = escapeMarkdown(text);
        SendMessage message = new SendMessage(chatId.toString(), safeText);
        message.setParseMode(TELEGRAM_PARSE_MODE);
        return message;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –Ω–æ–º–µ—Ä.
     * <p>
     * –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     * —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä—ã
     * –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    private void handleAwaitedPhoneText(Long chatId, String text) {
        String candidate = text == null ? "" : text.trim();
        if (candidate.isEmpty()) {
            sendPhoneFormatHint(chatId);
            return;
        }

        try {
            String normalized = PhoneUtils.normalizePhone(candidate);
            String masked = PhoneUtils.maskPhone(normalized);
            sendPhoneRecognitionMessage(chatId, masked);
        } catch (IllegalArgumentException ex) {
            log.info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è —á–∞—Ç–∞ {}", chatId);
            sendPhoneFormatHint(chatId);
        }
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
     *
     * @return —Ä–∞–∑–º–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Telegram
     */
    private ReplyKeyboardMarkup createPhoneRequestKeyboard() {
        KeyboardButton button = new KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º");
        button.setRequestContact(true);
        KeyboardRow row = new KeyboardRow(List.of(button));
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup(List.of(row));
        markup.setResizeKeyboard(true);
        markup.setOneTimeKeyboard(true);
        return markup;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     * <p>
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –µ—ë –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     * @param text   —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    private void sendPhoneRequestMessage(Long chatId, String text) {
        if (chatId == null) {
            return;
        }

        chatSessionRepository.markKeyboardHidden(chatId);
        chatSessionRepository.markContactRequestSent(chatId);
        SendMessage message = createPlainMessage(chatId, text);
        message.setReplyMarkup(createPhoneRequestKeyboard());

        try {
            telegramClient.execute(message);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞", e);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º –Ω–æ–º–µ—Ä–µ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ–≥–æ.
     *
     * @param chatId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param maskedPhone –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    private void sendPhoneRecognitionMessage(Long chatId, String maskedPhone) {
        String text = String.format("–ü–æ—Ö–æ–∂–µ, –≤–∞—à –Ω–æ–º–µ—Ä: %s\n" +
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ, –ø–æ–¥–µ–ª–∏–≤—à–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
                maskedPhone);
        sendPhoneRequestMessage(chatId, text);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendPhoneFormatHint(Long chatId) {
        String text = "–ü–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n" +
                "+375291234567\n" +
                "80291234567\n" +
                "8 029 123 45 67";
        sendPhoneRequestMessage(chatId, text);
    }

    /**
     * –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –§–ò–û.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     */
    private void promptForName(Long chatId) {
        transitionToState(chatId, BuyerChatState.AWAITING_NAME_INPUT);
        sendSimpleMessage(chatId, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –§–ò–û");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.
     *
     * @param chatId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param customer —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     * @return {@code true}, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –§–ò–û –≤–∞–ª–∏–¥–Ω–æ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–æ
     */
    private boolean ensureValidStoredNameOrRequestUpdate(Long chatId, Customer customer) {
        if (customer == null) {
            return true;
        }

        String fullName = customer.getFullName();
        if (fullName == null) {
            return true;
        }

        FullNameValidator.FullNameValidationResult validation = fullNameValidator.validate(fullName);
        if (validation.valid()) {
            return true;
        }

        telegramService.markNameUnconfirmed(chatId);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        transitionToState(chatId, BuyerChatState.AWAITING_NAME_INPUT);
        sendSimpleMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –§–ò–û");
        return false;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –§–ò–û –∏–∑ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
     *
     * @param chatId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     * @param fullName –∏–º—è, –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–∏—Å—Ç–µ–º–µ
     */
    private void sendNameConfirmation(Long chatId, String fullName) {
        String text = String.format("–£ –Ω–∞—Å —É–∫–∞–∑–∞–Ω–æ –≤–∞—à–µ –§–ò–û: %s\n–≠—Ç–æ –≤–µ—Ä–Ω–æ?", escapeMarkdown(fullName));
        List<BuyerBotScreen> navigationPath = computeNavigationPath(chatId, BuyerBotScreen.NAME_CONFIRMATION);
        InlineKeyboardMarkup markup = buildNameConfirmationKeyboard(navigationPath);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.NAME_CONFIRMATION, navigationPath);
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown, —á—Ç–æ–±—ã Telegram –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
     *
     * @param value –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–∫–ª—é—á–∞–µ–º–æ–µ –≤ —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     * @return —Å—Ç—Ä–æ–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private String escapeMarkdown(String value) {
        if (value == null) {
            return "";
        }
        if (value.isEmpty()) {
            return value;
        }
        StringBuilder escaped = new StringBuilder(value.length());
        for (int i = 0; i < value.length(); i++) {
            char ch = value.charAt(i);
            if (isMarkdownV2SpecialCharacter(ch)) {
                escaped.append('\\');
            }
            escaped.append(ch);
        }
        return escaped.toString();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –¥–ª—è MarkdownV2 –∏ —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –æ–Ω —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
     *
     * @param ch –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Å–∏–º–≤–æ–ª
     * @return {@code true}, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª —Å–ª–µ–¥—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
     */
    private boolean isMarkdownV2SpecialCharacter(char ch) {
        return switch (ch) {
            case '_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!', '\\' -> true;
            default -> false;
        };
    }

    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –§–ò–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void renderNameConfirmationScreen(Long chatId) {
        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            sendMainMenu(chatId);
            return;
        }

        Customer customer = optional.get();
        if (!ensureValidStoredNameOrRequestUpdate(chatId, customer)) {
            return;
        }

        String fullName = customer.getFullName();
        if (fullName == null || fullName.isBlank()) {
            sendMainMenu(chatId);
            return;
        }

        sendNameConfirmation(chatId, fullName);
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ Telegram –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.
     *
     * @param message –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     * @return –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ {@code null}, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
     */
    private Long extractSenderId(Message message) {
        if (message == null || message.getFrom() == null) {
            return null;
        }
        return message.getFrom().getId();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º Telegram.
     *
     * @param senderId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param contactUserId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ –æ–±–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
     */
    private boolean isContactOwnedBySender(Long senderId, Long contactUserId) {
        if (senderId == null || contactUserId == null) {
            return false;
        }
        return contactUserId.equals(senderId);
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º, –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendContactOwnershipRejectedMessage(Long chatId) {
        sendPhoneRequestMessage(chatId,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.");
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * <p>
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç Telegram –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
     * –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –§–ò–û. –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
     * –ª–∏–±–æ Telegram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è,
     * –±–æ—Ç –æ—Ç–∫–∞–∂–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç –Ω–æ–º–µ—Ä.
     * </p>
     *
     * @param chatId  –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param message –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     * @param contact –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    private void handleContact(Long chatId, Message message, Contact contact) {
        if (chatId == null || contact == null) {
            return;
        }

        Long senderId = extractSenderId(message);
        Long contactUserId = contact.getUserId();

        if (!isContactOwnedBySender(senderId, contactUserId)) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º: chatId={}, contactUserId={}, senderId={}",
                    chatId, contactUserId, senderId);
            transitionToState(chatId, BuyerChatState.AWAITING_CONTACT);
            sendContactOwnershipRejectedMessage(chatId);
            return;
        }

        String rawPhone = contact.getPhoneNumber();
        String phone = PhoneUtils.normalizePhone(rawPhone);

        try {
            Customer customer = telegramService.linkTelegramToCustomer(phone, chatId);

            if (customer.isTelegramConfirmed()) {
                sendKeyboardRemovalMessage(chatId, "‚úÖ –ù–æ–º–µ—Ä —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é...");
            } else {
                sendKeyboardRemovalMessage(chatId, "‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!");
                telegramService.confirmTelegram(customer);
                telegramService.notifyActualStatuses(customer);
            }

            markActiveAnnouncementSeen(chatId);

            transitionToState(chatId, BuyerChatState.IDLE);
            sendMainMenu(chatId);

            if (!ensureValidStoredNameOrRequestUpdate(chatId, customer)) {
                return;
            }

            String fullName = customer.getFullName();
            if (fullName != null && !fullName.isBlank()) {
                if (customer.getNameSource() != NameSource.USER_CONFIRMED) {
                    sendNameConfirmation(chatId, fullName);
                }
            } else {
                promptForName(chatId);
                return;
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} –¥–ª—è —á–∞—Ç–∞ {}",
                    PhoneUtils.maskPhone(phone), chatId, e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–∫—Ä—ã–≤–∞—è –∫–Ω–æ–ø–∫—É ¬´üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª.
     * <p>
     * –ú–µ—Ç–æ–¥ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç —Å–∫—Ä—ã—Ç–∏—è
     * –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ –º–µ–Ω—é —Å–º–æ–≥–ª–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—É—Å—Ç–æ–π, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞)
     */
    private void sendKeyboardRemovalMessage(Long chatId, String text) {
        if (chatId == null) {
            return;
        }

        chatSessionRepository.markKeyboardHidden(chatId);

        String safeText = (text == null || text.isBlank())
                ? "‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –ú–µ–Ω—é –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                : text;

        SendMessage removalMessage = createPlainMessage(chatId, safeText);
        ReplyKeyboardRemove removeMarkup = ReplyKeyboardRemove.builder()
                .removeKeyboard(true)
                .selective(false)
                .build();
        removalMessage.setReplyMarkup(removeMarkup);

        if (text == null || text.isBlank()) {
            removalMessage.setDisableNotification(true);
        }

        try {
            telegramClient.execute(removalMessage);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —á–∞—Ç–µ {}", chatId, e);
        }
    }
}
