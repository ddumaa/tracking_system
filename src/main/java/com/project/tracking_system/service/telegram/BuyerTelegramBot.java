package com.project.tracking_system.service.telegram;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.project.tracking_system.entity.BuyerBotScreen;
import com.project.tracking_system.entity.BuyerChatState;
import com.project.tracking_system.entity.Customer;
import com.project.tracking_system.entity.NameSource;
import com.project.tracking_system.service.customer.CustomerTelegramService;
import com.project.tracking_system.utils.PhoneUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.longpolling.interfaces.LongPollingUpdateConsumer;
import org.telegram.telegrambots.longpolling.starter.SpringLongPollingBot;
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Contact;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.message.MaybeInaccessibleMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMemberUpdated;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Telegram-–±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
 */
@Component
@Slf4j
public class BuyerTelegramBot implements SpringLongPollingBot, LongPollingSingleThreadUpdateConsumer {

    private static final String BUTTON_STATS = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞";
    private static final String BUTTON_SETTINGS = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏";
    private static final String BUTTON_HELP = "‚ùì –ü–æ–º–æ—â—å";
    private static final String BUTTON_MENU = "üè† –ú–µ–Ω—é";
    private static final String BUTTON_BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥";

    private static final String CALLBACK_BACK_TO_MENU = "menu:back";
    private static final String CALLBACK_MENU_SHOW_STATS = "menu:stats";
    private static final String CALLBACK_MENU_SHOW_SETTINGS = "menu:settings";
    private static final String CALLBACK_MENU_SHOW_HELP = "menu:help";
    private static final String CALLBACK_SETTINGS_TOGGLE_NOTIFICATIONS = "settings:toggle_notifications";
    private static final String CALLBACK_SETTINGS_CONFIRM_NAME = "settings:confirm_name";
    private static final String CALLBACK_SETTINGS_EDIT_NAME = "settings:edit_name";
    private static final String CALLBACK_NAME_CONFIRM = "name:confirm";
    private static final String CALLBACK_NAME_EDIT = "name:edit";

    private static final String NAME_CONFIRMATION_MISSING_MESSAGE =
            "‚ö†Ô∏è –ü–æ–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –§–ò–û –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.";
    private static final String NAME_EDIT_ANCHOR_TEXT =
            "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´üè† –ú–µ–Ω—é¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.";

    private final TelegramClient telegramClient;
    private final CustomerTelegramService telegramService;
    private final FullNameValidator fullNameValidator;
    private final ChatSessionRepository chatSessionRepository;
    private final ObjectMapper objectMapper;
    private final String botToken;

    /**
     * –°–æ–∑–¥–∞—ë—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.
     *
     * @param telegramClient       –∫–ª–∏–µ–Ω—Ç Telegram, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–π Spring
     * @param token                —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
     * @param telegramService      —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∫ Telegram
     * @param fullNameValidator    –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –§–ò–û
     * @param chatSessionRepository —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
     * @param objectMapper         –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ä–µ–∫—Ç–æ–≤ Telegram –≤ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
     */
    public BuyerTelegramBot(TelegramClient telegramClient,
                            @Value("${telegram.bot.token:}") String token,
                            CustomerTelegramService telegramService,
                            FullNameValidator fullNameValidator,
                            ChatSessionRepository chatSessionRepository,
                            ObjectMapper objectMapper) {
        this.telegramClient = telegramClient;
        this.botToken = token;
        this.telegramService = telegramService;
        this.fullNameValidator = fullNameValidator;
        this.chatSessionRepository = chatSessionRepository;
        this.objectMapper = objectMapper;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram.
     *
     * @return —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
     */
    @Override
    public String getBotToken() {
        return botToken;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ –∫–∞–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.
     *
     * @return –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram
     */
    @Override
    public LongPollingUpdateConsumer getUpdatesConsumer() {
        return this;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram, —Ä–µ–∞–≥–∏—Ä—É—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ callback-–∑–∞–ø—Ä–æ—Å—ã.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
     */
    @Override
    public void consume(Update update) {
        log.info("üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {}", formatUpdateMetadata(update));

        if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
            return;
        }

        if (update.hasMyChatMember()) {
            handleMyChatMember(update.getMyChatMember());
            return;
        }

        if (!update.hasMessage() || update.getMessage() == null) {
            return;
        }

        var message = update.getMessage();
        Long chatId = message.getChatId();

        boolean keyboardRemoved = detectPersistentKeyboardRemoval(chatId, message);
        restorePersistentKeyboardIfNeeded(chatId, keyboardRemoved);

        if (message.hasText()) {
            handleTextMessage(chatId, message.getText());
        }

        if (message.hasContact()) {
            handleContact(chatId, message, message.getContact());
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞ –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω.
     * <p>
     * –ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram, –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
     * –∏ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–º–µ—Å—Ç–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π. –î–ª—è –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö
     * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç —Å –∫–Ω–æ–ø–∫–æ–π ¬´üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª.
     * </p>
     *
     * @param myChatMember –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è chat_member –æ—Ç Telegram
     */
    private void handleMyChatMember(ChatMemberUpdated myChatMember) {
        if (myChatMember == null || myChatMember.getChat() == null) {
            return;
        }

        Long chatId = myChatMember.getChat().getId();
        if (chatId == null) {
            return;
        }

        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isPresent()) {
            transitionToState(chatId, BuyerChatState.IDLE);
            chatSessionRepository.markKeyboardHidden(chatId);
            sendMainMenu(chatId);
            return;
        }

        transitionToState(chatId, BuyerChatState.AWAITING_CONTACT);
        sendSharePhoneKeyboard(chatId);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void handleTextMessage(Long chatId, String text) {
        if (chatId == null || text == null) {
            return;
        }

        String trimmed = text.trim();
        BuyerChatState state = getState(chatId);

        if (state == BuyerChatState.AWAITING_CONTACT) {
            if (trimmed.isEmpty() || trimmed.startsWith("/")) {
                remindContactRequired(chatId);
                return;
            }

            handleAwaitedPhoneText(chatId, trimmed);
            return;
        }

        if (trimmed.isEmpty()) {
            return;
        }

        if ("/menu".equals(trimmed)) {
            handleMenuCommand(chatId);
            return;
        }

        if ("/start".equals(trimmed)) {
            handleStartCommand(chatId);
            return;
        }

        if (state == BuyerChatState.AWAITING_NAME_INPUT) {
            if (trimmed.startsWith("/") || isNameControlCommand(trimmed)) {
                remindNameRequired(chatId);
            } else {
                handleNameInput(chatId, trimmed);
            }
            return;
        }

        handleIdleText(chatId, trimmed);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
     *
     * @param callbackQuery callback-–∑–∞–ø—Ä–æ—Å –æ—Ç Telegram
     */
    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        if (callbackQuery == null) {
            return;
        }

        String data = callbackQuery.getData();
        MaybeInaccessibleMessage callbackMessage = callbackQuery.getMessage();
        Long chatId = callbackMessage != null ? callbackMessage.getChatId() : null;
        Integer messageId = callbackMessage != null ? callbackMessage.getMessageId() : null;

        if (data == null || chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        ChatSession session = chatSessionRepository.find(chatId).orElse(null);
        if (isCallbackFromOutdatedMessage(messageId, session)) {
            handleOutdatedCallback(chatId, messageId, callbackQuery, session);
            return;
        }

        rememberAnchorMessage(chatId, messageId);

        switch (data) {
            case CALLBACK_MENU_SHOW_STATS -> handleMenuOpenStats(chatId, callbackQuery);
            case CALLBACK_MENU_SHOW_SETTINGS -> handleMenuOpenSettings(chatId, callbackQuery);
            case CALLBACK_MENU_SHOW_HELP -> handleMenuOpenHelp(chatId, callbackQuery);
            case CALLBACK_SETTINGS_TOGGLE_NOTIFICATIONS ->
                    handleSettingsToggleNotifications(chatId, callbackQuery);
            case CALLBACK_SETTINGS_CONFIRM_NAME ->
                    handleSettingsConfirmName(chatId, callbackQuery);
            case CALLBACK_SETTINGS_EDIT_NAME ->
                    handleSettingsEditName(chatId, callbackQuery);
            case CALLBACK_NAME_CONFIRM -> handleNameConfirmationCallback(chatId, callbackQuery);
            case CALLBACK_NAME_EDIT -> handleNameEditCallback(chatId, callbackQuery);
            case CALLBACK_BACK_TO_MENU ->
                    handleCallbackBackToMenu(chatId, callbackQuery);
            default -> answerCallbackQuery(callbackQuery, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        }
    }

    /**
     * –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
     *
     * @param chatId    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param messageId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–æ–º
     */
    private void rememberAnchorMessage(Long chatId, Integer messageId) {
        if (chatId == null || messageId == null) {
            return;
        }
        chatSessionRepository.updateAnchor(chatId, messageId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –æ—Ç–ª–∏—á–Ω–æ–º—É –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —è–∫–æ—Ä—è.
     *
     * @param messageId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à—ë–ª callback
     * @param state     —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ callback –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
     */
    private boolean isCallbackFromOutdatedMessage(Integer messageId, ChatSession session) {
        return session != null
                && session.getAnchorMessageId() != null
                && messageId != null
                && !session.getAnchorMessageId().equals(messageId);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param messageId     –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     * @param state         —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —ç–∫—Ä–∞–Ω–µ
     */
    private void handleOutdatedCallback(Long chatId,
                                        Integer messageId,
                                        CallbackQuery callbackQuery,
                                        ChatSession session) {
        answerCallbackQuery(callbackQuery, "–≠–∫—Ä–∞–Ω –æ–±–Ω–æ–≤–ª—ë–Ω");
        removeInlineKeyboard(chatId, messageId);
        BuyerBotScreen screen = session != null ? session.getLastScreen() : null;
        renderScreen(chatId, screen);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–∫–∏.
     *
     * @param chatId    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param messageId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void removeInlineKeyboard(Long chatId, Integer messageId) {
        if (chatId == null || messageId == null) {
            return;
        }

        EditMessageReplyMarkup editMarkup = EditMessageReplyMarkup.builder()
                .chatId(chatId.toString())
                .messageId(messageId)
                .replyMarkup(null)
                .build();
        try {
            telegramClient.execute(editMarkup);
        } catch (TelegramApiException e) {
            log.debug("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è {} –≤ —á–∞—Ç–µ {}", messageId, chatId, e);
        }
    }

    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –≤ —è–∫–æ—Ä–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param screen –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
     */
    private void renderScreen(Long chatId, BuyerBotScreen screen) {
        if (chatId == null) {
            return;
        }

        if (screen == null) {
            sendMainMenu(chatId);
            return;
        }

        switch (screen) {
            case MENU -> sendMainMenu(chatId);
            case STATISTICS -> sendStatisticsScreen(chatId);
            case SETTINGS -> sendSettingsScreen(chatId);
            case HELP -> sendHelpScreen(chatId);
            case NAME_CONFIRMATION -> renderNameConfirmationScreen(chatId);
            case NAME_EDIT_PROMPT -> sendNameEditPromptScreen(chatId);
            default -> sendMainMenu(chatId);
        }
    }


    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –∏–Ω–∏—Ü–∏–∏—Ä—É—è –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—è –º–µ–Ω—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void handleStartCommand(Long chatId) {
        log.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {}", chatId);
        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            transitionToState(chatId, BuyerChatState.AWAITING_CONTACT);
            sendSharePhoneKeyboard(chatId);
            return;
        }

        Customer customer = optional.get();
        BuyerChatState previousState = getState(chatId);
        transitionToState(chatId, BuyerChatState.IDLE);
        if (previousState != BuyerChatState.AWAITING_CONTACT) {
            chatSessionRepository.markKeyboardHidden(chatId);
        }
        sendMainMenu(chatId);

        if (!ensureValidStoredNameOrRequestUpdate(chatId, customer)) {
            return;
        }

        String fullName = customer.getFullName();
        if (fullName != null
                && !fullName.isBlank()
                && customer.getNameSource() != NameSource.USER_CONFIRMED) {
            sendNameConfirmation(chatId, fullName);
        } else if (fullName == null) {
            promptForName(chatId);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleMenuOpenStats(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }
        answerCallbackQuery(callbackQuery, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        sendStatisticsScreen(chatId);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleMenuOpenSettings(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }
        answerCallbackQuery(callbackQuery, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏");
        sendSettingsScreen(chatId);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleMenuOpenHelp(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }
        answerCallbackQuery(callbackQuery, "–ü–æ–º–æ—â—å");
        sendHelpScreen(chatId);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–º—è –∏–∑ —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleNameConfirmationCallback(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        boolean confirmed = confirmNameAndNotify(chatId);
        if (confirmed) {
            answerCallbackQuery(callbackQuery, "–ò–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
            sendMainMenu(chatId);
        } else {
            answerCallbackQuery(callbackQuery, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è");
            sendNameConfirmationFailure(chatId);
            sendMainMenu(chatId);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∏–∑ —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleNameEditCallback(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        answerCallbackQuery(callbackQuery, "–û–∂–∏–¥–∞—é –≤–≤–æ–¥ –§–ò–û");
        telegramService.markNameUnconfirmed(chatId);
        transitionToState(chatId, BuyerChatState.AWAITING_NAME_INPUT);

        String prompt = "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —Å–æ–æ–±—â–µ–Ω–∏–µ–º.";
        sendSimpleMessage(chatId, prompt);
        sendNameEditPromptScreen(chatId);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ –§–ò–û –≤ —è–∫–æ—Ä–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendNameEditPromptScreen(Long chatId) {
        sendInlineMessage(chatId, NAME_EDIT_ANCHOR_TEXT, createBackInlineKeyboard(), BuyerBotScreen.NAME_EDIT_PROMPT);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ IDLE.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void handleMenuCommand(Long chatId) {
        transitionToState(chatId, BuyerChatState.IDLE);
        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isPresent()) {
            Customer customer = optional.get();
            sendMainMenu(chatId);
            if (customer.getFullName() == null || customer.getFullName().isBlank()) {
                sendSimpleMessage(chatId,
                        "‚úçÔ∏è –ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –§–ò–û, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—É–Ω–∫—Ç \"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ \"‚úçÔ∏è –£–∫–∞–∑–∞—Ç—å –∏–º—è\".");
            } else if (customer.getNameSource() != NameSource.USER_CONFIRMED) {
                sendSimpleMessage(chatId,
                        "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –§–ò–û –≤ —Ä–∞–∑–¥–µ–ª–µ \"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\" –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –∫–Ω–æ–ø–∫–æ–π \"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è\".");
            }
            return;
        }

        sendSimpleMessage(chatId,
                "üì± –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.");
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void handleIdleText(Long chatId, String text) {
        if ("/stop".equals(text) || "/unsubscribe".equals(text)) {
            log.info("üîï –ö–æ–º–∞–Ω–¥–∞ {} –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {}", text, chatId);
            boolean disabled = telegramService.disableNotifications(chatId);
            if (disabled) {
                SendMessage confirm = new SendMessage(chatId.toString(),
                        "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö, —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.");
                try {
                    telegramClient.execute(confirm);
                } catch (TelegramApiException e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", e);
                }
            }
            return;
        }

        if (BUTTON_MENU.equals(text)) {
            sendMainMenu(chatId);
            return;
        }

        if ("/stats".equals(text) || BUTTON_STATS.equals(text) || "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".equals(text)) {
            sendStatisticsScreen(chatId);
            return;
        }

        if (BUTTON_SETTINGS.equals(text)) {
            sendSettingsScreen(chatId);
            return;
        }

        if (BUTTON_HELP.equals(text) || "/help".equals(text)) {
            sendHelpScreen(chatId);
            return;
        }

        if ("üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è".equals(text)) {
            boolean disabled = telegramService.disableNotifications(chatId);
            if (disabled) {
                refreshMainMenu(chatId);
            }
            return;
        }

        if ("üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è".equals(text)) {
            boolean enabled = telegramService.enableNotifications(chatId);
            if (enabled) {
                refreshMainMenu(chatId);
            }
            return;
        }

        if (fullNameValidator.isConfirmationPhrase(text)) {
            boolean confirmed = confirmNameAndNotify(chatId);
            if (confirmed) {
                refreshMainMenu(chatId);
            } else {
                sendNameConfirmationFailure(chatId);
            }
            return;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendStatisticsScreen(Long chatId) {
        InlineKeyboardMarkup backMarkup = createBackInlineKeyboard();
        telegramService.getStatistics(chatId)
                .ifPresentOrElse(stats -> {
                    String stores = stats.getStoreNames().isEmpty()
                            ? "-" : String.join(", ", stats.getStoreNames());
                    String text = String.format(
                            "\uD83D\uDCCA –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" +
                                    "–ó–∞–±—Ä–∞–Ω–æ: %d\n" +
                                    "–ù–µ –∑–∞–±—Ä–∞–Ω–æ: %d\n" +
                                    "–ú–∞–≥–∞–∑–∏–Ω—ã: %s\n" +
                                    "–†–µ–ø—É—Ç–∞—Ü–∏—è: %s",
                            stats.getPickedUpCount(),
                            stats.getReturnedCount(),
                            stores,
                            stats.getReputation().getDisplayName()
                    );
                    sendInlineMessage(chatId, text, backMarkup, BuyerBotScreen.STATISTICS);
                }, () -> sendInlineMessage(chatId,
                        "\uD83D\uDCCA –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã.",
                        backMarkup,
                        BuyerBotScreen.STATISTICS));
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendSettingsScreen(Long chatId) {
        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            sendSimpleMessage(chatId,
                    "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.");
            return;
        }

        Customer customer = optional.get();
        if (!ensureValidStoredNameOrRequestUpdate(chatId, customer)) {
            return;
        }

        boolean awaitingName = getState(chatId) == BuyerChatState.AWAITING_NAME_INPUT;
        String text = buildSettingsText(customer, awaitingName);
        InlineKeyboardMarkup markup = buildSettingsKeyboard(customer);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.SETTINGS);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendHelpScreen(Long chatId) {
        String helpText = """
                ‚ùì –ü–æ–º–æ—â—å

                ‚Ä¢ /start ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
                ‚Ä¢ /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
                ‚Ä¢ /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –§–ò–û —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏".
                """;
        sendInlineMessage(chatId, helpText, createBackInlineKeyboard(), BuyerBotScreen.HELP);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleSettingsToggleNotifications(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            answerCallbackQuery(callbackQuery, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —á–∞—Ç —á–µ—Ä–µ–∑ /start");
            sendSimpleMessage(chatId,
                    "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.");
            return;
        }

        Customer customer = optional.get();
        boolean notificationsEnabled = customer.isNotificationsEnabled();
        boolean changed = notificationsEnabled
                ? telegramService.disableNotifications(chatId)
                : telegramService.enableNotifications(chatId);
        if (changed) {
            customer.setNotificationsEnabled(!notificationsEnabled);
            answerCallbackQuery(callbackQuery, notificationsEnabled
                    ? "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
                    : "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã");
        } else {
            answerCallbackQuery(callbackQuery, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å");
        }

        renderSettingsScreen(chatId, customer);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleSettingsConfirmName(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            answerCallbackQuery(callbackQuery, "–ò–º—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
            sendSimpleMessage(chatId,
                    "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–µ–Ω–µ–º.");
            return;
        }

        Customer customer = optional.get();
        String fullName = customer.getFullName();
        if (fullName == null || fullName.isBlank()) {
            answerCallbackQuery(callbackQuery, "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∏–º—è");
            return;
        }

        if (customer.getNameSource() == NameSource.USER_CONFIRMED) {
            answerCallbackQuery(callbackQuery, "–ò–º—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
            renderSettingsScreen(chatId, customer);
            return;
        }

        boolean confirmed = telegramService.confirmName(chatId);
        if (confirmed) {
            customer.setNameSource(NameSource.USER_CONFIRMED);
            sendSimpleMessage(chatId, "‚úÖ –°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã");
            answerCallbackQuery(callbackQuery, "–ò–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
        } else {
            answerCallbackQuery(callbackQuery, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è");
        }

        renderSettingsScreen(chatId, customer);
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleSettingsEditName(Long chatId, CallbackQuery callbackQuery) {
        if (chatId == null) {
            answerCallbackQuery(callbackQuery, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            answerCallbackQuery(callbackQuery, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —á–∞—Ç");
            sendSimpleMessage(chatId,
                    "‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–µ–º –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ /start.");
            return;
        }

        Customer customer = optional.get();
        String prompt = (customer.getFullName() == null || customer.getFullName().isBlank())
                ? "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –§–ò–û —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
                : "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —Å–æ–æ–±—â–µ–Ω–∏–µ–º.";
        answerCallbackQuery(callbackQuery, "–û–∂–∏–¥–∞—é –≤–≤–æ–¥ –§–ò–û");
        transitionToState(chatId, BuyerChatState.AWAITING_NAME_INPUT);
        sendSimpleMessage(chatId, prompt);
        renderSettingsScreen(chatId, customer);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞.
     *
     * @param chatId        –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param callbackQuery –∏—Å—Ö–æ–¥–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å
     */
    private void handleCallbackBackToMenu(Long chatId, CallbackQuery callbackQuery) {
        transitionToState(chatId, BuyerChatState.IDLE);
        answerCallbackQuery(callbackQuery, "–û—Ç–∫—Ä—ã–ª –º–µ–Ω—é");
        sendMainMenu(chatId);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
     *
     * @param chatId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param messageId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å
     * @param customer —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private void renderSettingsScreen(Long chatId, Customer customer) {
        if (chatId == null || customer == null) {
            return;
        }

        boolean awaitingName = getState(chatId) == BuyerChatState.AWAITING_NAME_INPUT;
        String settingsText = buildSettingsText(customer, awaitingName);
        InlineKeyboardMarkup settingsKeyboard = buildSettingsKeyboard(customer);
        sendInlineMessage(chatId, settingsText, settingsKeyboard, BuyerBotScreen.SETTINGS);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param customer         —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     * @param awaitingNameInput –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –§–ò–û
     * @return —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
     */
    private String buildSettingsText(Customer customer, boolean awaitingNameInput) {
        String notificationsStatus = customer.isNotificationsEnabled()
                ? "–≤–∫–ª—é—á–µ–Ω—ã"
                : "–æ—Ç–∫–ª—é—á–µ–Ω—ã";

        String nameStatus;
        String fullName = customer.getFullName();
        if (fullName == null || fullName.isBlank()) {
            nameStatus = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ";
        } else if (customer.getNameSource() == NameSource.USER_CONFIRMED) {
            nameStatus = String.format("%s (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)", fullName);
        } else {
            nameStatus = String.format("%s (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)", fullName);
        }

        StringBuilder builder = new StringBuilder();
        builder.append("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n");
        builder.append("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ").append(notificationsStatus).append('\n');
        builder.append("–ò–º—è: ").append(nameStatus);
        if (awaitingNameInput) {
            builder.append("\n\n‚úçÔ∏è –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –§–ò–û.");
        }
        return builder.toString();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏
     * @return –≥–æ—Ç–æ–≤–∞—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    private InlineKeyboardMarkup buildSettingsKeyboard(Customer customer) {
        List<InlineKeyboardRow> rows = new ArrayList<>();

        InlineKeyboardButton notifyButton = InlineKeyboardButton.builder()
                .text(customer.isNotificationsEnabled()
                        ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                        : "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                .callbackData(CALLBACK_SETTINGS_TOGGLE_NOTIFICATIONS)
                .build();
        rows.add(new InlineKeyboardRow(notifyButton));

        String fullName = customer.getFullName();
        boolean hasName = fullName != null && !fullName.isBlank();
        if (!hasName) {
            InlineKeyboardButton setNameButton = InlineKeyboardButton.builder()
                    .text("‚úçÔ∏è –£–∫–∞–∑–∞—Ç—å –∏–º—è")
                    .callbackData(CALLBACK_SETTINGS_EDIT_NAME)
                    .build();
            rows.add(new InlineKeyboardRow(setNameButton));
        } else if (customer.getNameSource() == NameSource.USER_CONFIRMED) {
            InlineKeyboardButton editNameButton = InlineKeyboardButton.builder()
                    .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
                    .callbackData(CALLBACK_SETTINGS_EDIT_NAME)
                    .build();
            rows.add(new InlineKeyboardRow(editNameButton));
        } else {
            InlineKeyboardButton confirmButton = InlineKeyboardButton.builder()
                    .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è")
                    .callbackData(CALLBACK_SETTINGS_CONFIRM_NAME)
                    .build();

            InlineKeyboardButton editNameButton = InlineKeyboardButton.builder()
                    .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
                    .callbackData(CALLBACK_SETTINGS_EDIT_NAME)
                    .build();
            rows.add(new InlineKeyboardRow(confirmButton, editNameButton));
        }

        InlineKeyboardButton backButton = InlineKeyboardButton.builder()
                .text(BUTTON_BACK)
                .callbackData(CALLBACK_BACK_TO_MENU)
                .build();
        rows.add(new InlineKeyboardRow(backButton));

        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞.
     *
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞–∑–∞–¥¬ª
     */
    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.
     *
     * @return –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
     */
    private InlineKeyboardButton buildBackButton() {
        return InlineKeyboardButton.builder()
                .text(BUTTON_BACK)
                .callbackData(CALLBACK_BACK_TO_MENU)
                .build();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞.
     *
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞–∑–∞–¥¬ª
     */
    private InlineKeyboardMarkup createBackInlineKeyboard() {
        return InlineKeyboardMarkup.builder()
                .keyboard(List.of(new InlineKeyboardRow(buildBackButton())))
                .build();
    }

    /**
     * –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, –∑–∞–≤–µ—Ä—à–∞—è –∞–Ω–∏–º–∞—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param callbackQuery callback-–∑–∞–ø—Ä–æ—Å Telegram
     * @param text          —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
     */
    private void answerCallbackQuery(CallbackQuery callbackQuery, String text) {
        if (callbackQuery == null) {
            return;
        }

        AnswerCallbackQuery.AnswerCallbackQueryBuilder builder = AnswerCallbackQuery.builder()
                .callbackQueryId(callbackQuery.getId());
        if (text != null && !text.isBlank()) {
            builder.text(text);
        }
        AnswerCallbackQuery answer = builder.build();
        try {
            telegramClient.execute(answer);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback", e);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –§–ò–û, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–µ—Ä–µ–≤–æ–¥—è —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –§–ò–û
     */
    private void handleNameInput(Long chatId, String text) {
        String candidate = text == null ? "" : text.trim();
        if (candidate.isEmpty()) {
            remindNameRequired(chatId);
            return;
        }

        FullNameValidator.FullNameValidationResult validation = fullNameValidator.validate(candidate);

        if (validation.error() == FullNameValidator.FullNameValidationError.CONFIRMATION_PHRASE) {
            boolean confirmed = confirmNameAndNotify(chatId);
            if (confirmed) {
                transitionToState(chatId, BuyerChatState.IDLE);
                refreshMainMenu(chatId);
            } else {
                sendNameConfirmationFailure(chatId);
            }
            return;
        }

        if (!validation.valid()) {
            sendSimpleMessage(chatId, validation.message());
            return;
        }

        boolean saved = telegramService.updateNameFromTelegram(chatId, validation.normalizedFullName());
        if (!saved) {
            sendSimpleMessage(chatId,
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /menu.");
            return;
        }

        sendSimpleMessage(chatId, "‚úÖ –§–ò–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
        transitionToState(chatId, BuyerChatState.IDLE);
        refreshMainMenu(chatId);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –§–ò–û –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return {@code true}, –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
     */
    private boolean confirmNameAndNotify(Long chatId) {
        boolean confirmed = telegramService.confirmName(chatId);
        if (confirmed) {
            sendSimpleMessage(chatId, "‚úÖ –°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã");
        }
        return confirmed;
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –§–ò–û –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏ –ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendNameConfirmationFailure(Long chatId) {
        sendSimpleMessage(chatId, NAME_CONFIRMATION_MISSING_MESSAGE);
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void remindContactRequired(Long chatId) {
        transitionToState(chatId, BuyerChatState.AWAITING_CONTACT);
        sendPhoneRequestMessage(chatId,
                "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–º–µ—Ä. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É.");
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void remindNameRequired(Long chatId) {
        sendSimpleMessage(chatId,
                "‚úçÔ∏è –°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –§–ò–û. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /menu.");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫ –∫–Ω–æ–ø–∫–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–µ–º.
     *
     * @param text —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–π —Ñ—Ä–∞–∑–µ
     */
    private boolean isNameControlCommand(String text) {
        return "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è".equals(text)
                || "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è".equals(text)
                || "–ù–µ–≤–µ—Ä–Ω–æ".equalsIgnoreCase(text)
                || "–ò–∑–º–µ–Ω–∏—Ç—å".equalsIgnoreCase(text);
    }

    /**
     * –§–∏–∫—Å–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
     * <p>
     * –ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–º–µ—á–∞–µ—Ç, —á—Ç–æ
     * –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param state  —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π
     */
    private void transitionToState(Long chatId, BuyerChatState state) {
        if (chatId == null || state == null) {
            return;
        }

        chatSessionRepository.updateState(chatId, state);

        if (state == BuyerChatState.AWAITING_CONTACT) {
            chatSessionRepository.markKeyboardHidden(chatId);
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @return —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ {@link BuyerChatState#IDLE}, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
     */
    BuyerChatState getState(Long chatId) {
        return chatSessionRepository.getState(chatId);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
     * @return —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∏–ø–æ–º —Å–æ–±—ã—Ç–∏—è, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ –∏ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
     */
    private String formatUpdateMetadata(Update update) {
        if (update == null) {
            return "type=unknown";
        }

        String updateType = resolveUpdateType(update);
        Long chatId = resolveChatId(update);
        String maskedPhone = extractMaskedPhone(update);

        StringBuilder builder = new StringBuilder();
        builder.append("type=").append(updateType);
        builder.append(", chatId=").append(chatId != null ? chatId : "unknown");
        if (maskedPhone != null) {
            builder.append(", phone=").append(maskedPhone);
        }
        return builder.toString();
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞ {@link Update}.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
     * @return —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
     */
    private String resolveUpdateType(Update update) {
        if (update.hasMessage()) {
            return "message";
        }
        if (update.hasEditedMessage()) {
            return "edited_message";
        }
        if (update.hasCallbackQuery()) {
            return "callback_query";
        }
        if (update.hasInlineQuery()) {
            return "inline_query";
        }
        if (update.hasChosenInlineQuery()) {
            return "chosen_inline_query";
        }
        if (update.hasChannelPost()) {
            return "channel_post";
        }
        if (update.hasEditedChannelPost()) {
            return "edited_channel_post";
        }
        if (update.hasShippingQuery()) {
            return "shipping_query";
        }
        if (update.hasPreCheckoutQuery()) {
            return "pre_checkout_query";
        }
        if (update.hasPoll()) {
            return "poll";
        }
        if (update.hasPollAnswer()) {
            return "poll_answer";
        }
        if (update.hasMyChatMember()) {
            return "my_chat_member";
        }
        if (update.hasChatMember()) {
            return "chat_member";
        }
        if (update.hasChatJoinRequest()) {
            return "chat_join_request";
        }
        return "unknown";
    }

    /**
     * –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
     * @return –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –∏–ª–∏ {@code null}, –µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å
     */
    private Long resolveChatId(Update update) {
        if (update.hasMessage() && update.getMessage() != null) {
            return update.getMessage().getChatId();
        }
        if (update.hasEditedMessage() && update.getEditedMessage() != null) {
            return update.getEditedMessage().getChatId();
        }
        if (update.hasCallbackQuery()) {
            var callback = update.getCallbackQuery();
            if (callback != null && callback.getMessage() != null) {
                return callback.getMessage().getChatId();
            }
        }
        if (update.hasChannelPost() && update.getChannelPost() != null) {
            return update.getChannelPost().getChatId();
        }
        if (update.hasEditedChannelPost() && update.getEditedChannelPost() != null) {
            return update.getEditedChannelPost().getChatId();
        }
        if (update.hasMyChatMember()) {
            var myChatMember = update.getMyChatMember();
            if (myChatMember != null && myChatMember.getChat() != null) {
                return myChatMember.getChat().getId();
            }
        }
        if (update.hasChatMember()) {
            var chatMember = update.getChatMember();
            if (chatMember != null && chatMember.getChat() != null) {
                return chatMember.getChat().getId();
            }
        }
        if (update.hasChatJoinRequest()) {
            var joinRequest = update.getChatJoinRequest();
            if (joinRequest != null && joinRequest.getChat() != null) {
                return joinRequest.getChat().getId();
            }
        }
        return null;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
     *
     * @param update –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
     * @return –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ {@code null}, –µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
     */
    private String extractMaskedPhone(Update update) {
        if (update.hasMessage() && update.getMessage() != null) {
            var message = update.getMessage();
            if (message.hasContact() && message.getContact() != null) {
                String phone = message.getContact().getPhoneNumber();
                if (phone != null && !phone.isBlank()) {
                    return PhoneUtils.maskPhone(phone);
                }
            }
        }
        return null;
    }

    /**
     * –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendSharePhoneKeyboard(Long chatId) {
        sendPhoneRequestMessage(chatId,
                "üëã –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—ã–ª–∫–∞—Ö, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –±–æ—Ç–∞.
     * <p>–ú–µ–Ω—é —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ–º–æ—â–∏.</p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendMainMenu(Long chatId) {
        if (chatId == null) {
            return;
        }

        Optional<Customer> optional = telegramService.findByChatId(chatId);
        Customer customer = optional.orElse(null);
        String text = buildMainMenuText(customer);
        InlineKeyboardMarkup markup = buildMainMenuKeyboard(customer);
        sendInlineMessage(chatId, text, markup, BuyerBotScreen.MENU);

        ensurePersistentKeyboard(chatId);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –º–µ–Ω—é
     * @return —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–Ω—é
     */
    private String buildMainMenuText(Customer customer) {
        StringBuilder builder = new StringBuilder();
        builder.append("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n");

        if (customer == null) {
            builder.append("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n");
        } else {
            builder.append("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ")
                    .append(customer.isNotificationsEnabled() ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã")
                    .append('\n');

            String fullName = customer.getFullName();
            if (fullName == null || fullName.isBlank()) {
                builder.append("–ò–º—è: –Ω–µ —É–∫–∞–∑–∞–Ω–æ");
            } else if (customer.getNameSource() == NameSource.USER_CONFIRMED) {
                builder.append("–ò–º—è: ").append(fullName).append(" (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)");
            } else {
                builder.append("–ò–º—è: ").append(fullName).append(" (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)");
            }
            builder.append("\n\n");
        }

        builder.append("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏—à–∞–º–∏ ¬´üè† –ú–µ–Ω—é¬ª –∏ ¬´‚ùì –ü–æ–º–æ—â—å¬ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.");
        return builder.toString();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @param customer –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (—Ä–µ–∑–µ—Ä–≤ –Ω–∞ –±—É–¥—É—â–∏–µ —É—Å–ª–æ–≤–∏—è)
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
     */
    private InlineKeyboardMarkup buildMainMenuKeyboard(Customer customer) {
        InlineKeyboardButton statsButton = InlineKeyboardButton.builder()
                .text(BUTTON_STATS)
                .callbackData(CALLBACK_MENU_SHOW_STATS)
                .build();
        InlineKeyboardButton settingsButton = InlineKeyboardButton.builder()
                .text(BUTTON_SETTINGS)
                .callbackData(CALLBACK_MENU_SHOW_SETTINGS)
                .build();
        InlineKeyboardButton helpButton = InlineKeyboardButton.builder()
                .text(BUTTON_HELP)
                .callbackData(CALLBACK_MENU_SHOW_HELP)
                .build();

        List<InlineKeyboardRow> rows = new ArrayList<>();
        rows.add(new InlineKeyboardRow(statsButton, settingsButton));
        rows.add(new InlineKeyboardRow(helpButton));

        if (customer != null) {
            String fullName = customer.getFullName();
            boolean hasName = fullName != null && !fullName.isBlank();
            if (hasName && customer.getNameSource() != NameSource.USER_CONFIRMED) {
                InlineKeyboardButton confirmButton = InlineKeyboardButton.builder()
                        .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è")
                        .callbackData(CALLBACK_NAME_CONFIRM)
                        .build();
                InlineKeyboardButton editButton = InlineKeyboardButton.builder()
                        .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
                        .callbackData(CALLBACK_NAME_EDIT)
                        .build();
                rows.add(new InlineKeyboardRow(confirmButton, editButton));
            }
        }

        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏.
     *
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–º–µ–Ω–µ–º
     */
    private InlineKeyboardMarkup buildNameConfirmationKeyboard() {
        InlineKeyboardButton confirmButton = InlineKeyboardButton.builder()
                .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è")
                .callbackData(CALLBACK_NAME_CONFIRM)
                .build();
        InlineKeyboardButton editButton = InlineKeyboardButton.builder()
                .text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
                .callbackData(CALLBACK_NAME_EDIT)
                .build();

        List<InlineKeyboardRow> rows = new ArrayList<>();
        rows.add(new InlineKeyboardRow(confirmButton, editButton));
        rows.add(new InlineKeyboardRow(buildBackButton()));

        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –º–µ–Ω—é.
     *
     * @return —Ä–∞–∑–º–µ—Ç–∫–∞ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    private ReplyKeyboardMarkup createPersistentMenuKeyboard() {
        KeyboardButton menuButton = new KeyboardButton(BUTTON_MENU);
        KeyboardButton helpButton = new KeyboardButton(BUTTON_HELP);
        KeyboardRow row = new KeyboardRow(List.of(menuButton, helpButton));

        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup(List.of(row));
        markup.setResizeKeyboard(true);
        markup.setOneTimeKeyboard(false);
        return markup;
    }

    /**
     * –§–∏–∫—Å–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç —Å–∫—Ä—ã—Ç–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
     *
     * @param chatId  –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param message –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return {@code true}, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private boolean detectPersistentKeyboardRemoval(Long chatId, Message message) {
        if (chatId == null || message == null) {
            return false;
        }

        JsonNode messageJson;
        try {
            messageJson = objectMapper.convertValue(message, JsonNode.class);
        } catch (IllegalArgumentException e) {
            return false;
        }

        if (messageJson == null || messageJson.isNull() || messageJson.isMissingNode()) {
            return false;
        }

        JsonNode replyMarkupNode = messageJson.path("reply_markup");
        if (!replyMarkupNode.isMissingNode() && replyMarkupNode.path("remove_keyboard").asBoolean(false)) {
            chatSessionRepository.markKeyboardHidden(chatId);
            return true;
        }

        return false;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞ —Ä–∞–Ω–µ–µ.
     * <p>
     * –í —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã
     * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     * </p>
     *
     * @param chatId            –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param skipCurrentUpdate {@code true}, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –µ—ë –Ω–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
     */
    private void restorePersistentKeyboardIfNeeded(Long chatId, boolean skipCurrentUpdate) {
        if (chatId == null || skipCurrentUpdate) {
            return;
        }

        if (!chatSessionRepository.isKeyboardHidden(chatId)) {
            return;
        }

        if (getState(chatId) == BuyerChatState.AWAITING_CONTACT) {
            return;
        }

        ensurePersistentKeyboard(chatId);
    }

    /**
     * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–Ω–∏–∑—É –¥–∏–∞–ª–æ–≥–∞.
     * <p>
     * –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏
     * ¬´üè† –ú–µ–Ω—é¬ª –∏ ¬´‚ùì –ü–æ–º–æ—â—å¬ª –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ —Ä—É—á–Ω–æ–≥–æ
     * —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ
     * –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void ensurePersistentKeyboard(Long chatId) {
        if (chatId == null) {
            return;
        }

        if (getState(chatId) == BuyerChatState.AWAITING_CONTACT) {
            return;
        }

        if (!chatSessionRepository.isKeyboardHidden(chatId)) {
            return;
        }

        SendMessage message = new SendMessage(chatId.toString(),
                "–ö–ª–∞–≤–∏—à–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∏–∂–µ: ¬´üè† –ú–µ–Ω—é¬ª –∏ ¬´‚ùì –ü–æ–º–æ—â—å¬ª.");
        message.setReplyMarkup(createPersistentMenuKeyboard());
        message.setDisableNotification(true);

        try {
            Message sent = telegramClient.execute(message);
            chatSessionRepository.markKeyboardVisible(chatId);
            if (sent == null) {
                log.debug("‚ÑπÔ∏è Telegram –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {}", chatId);
            }
        } catch (TelegramApiException e) {
            chatSessionRepository.markKeyboardHidden(chatId);
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", e);
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —è–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ –≤ —É—Å—Ç–æ–π—á–∏–≤–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
     * @param markup –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param screen —ç–∫—Ä–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    private void sendInlineMessage(Long chatId,
                                   String text,
                                   InlineKeyboardMarkup markup,
                                   BuyerBotScreen screen) {
        if (chatId == null) {
            return;
        }

        Integer messageId = chatSessionRepository.find(chatId)
                .map(ChatSession::getAnchorMessageId)
                .orElse(null);

        if (messageId != null) {
            EditMessageText edit = EditMessageText.builder()
                    .chatId(chatId.toString())
                    .messageId(messageId)
                    .text(text)
                    .replyMarkup(markup)
                    .build();
            try {
                telegramClient.execute(edit);
                chatSessionRepository.updateAnchorAndScreen(chatId, messageId, screen);
                return;
            } catch (TelegramApiException e) {
                String errorMessage = e.getMessage();
                if (errorMessage != null && errorMessage.contains("message is not modified")) {
                    chatSessionRepository.updateAnchorAndScreen(chatId, messageId, screen);
                    log.debug("‚ÑπÔ∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å", chatId);
                    return;
                }
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —è–∫–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {}", chatId, e);
                chatSessionRepository.clearAnchor(chatId);
                chatSessionRepository.markKeyboardHidden(chatId);
            }
        }

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setReplyMarkup(markup);
        message.setDisableNotification(true);
        try {
            Message sent = telegramClient.execute(message);
            if (sent != null) {
                chatSessionRepository.updateAnchorAndScreen(chatId, sent.getMessageId(), screen);
            }
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —è–∫–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    /**
     * –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void refreshMainMenu(Long chatId) {
        sendMainMenu(chatId);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     * @param text   —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private void sendSimpleMessage(Long chatId, String text) {
        SendMessage msg = new SendMessage(chatId.toString(), text);
        try {
            telegramClient.execute(msg);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –Ω–æ–º–µ—Ä.
     * <p>
     * –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     * —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä—ã
     * –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    private void handleAwaitedPhoneText(Long chatId, String text) {
        String candidate = text == null ? "" : text.trim();
        if (candidate.isEmpty()) {
            sendPhoneFormatHint(chatId);
            return;
        }

        try {
            String normalized = PhoneUtils.normalizePhone(candidate);
            String masked = PhoneUtils.maskPhone(normalized);
            sendPhoneRecognitionMessage(chatId, masked);
        } catch (IllegalArgumentException ex) {
            log.info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –¥–ª—è —á–∞—Ç–∞ {}", chatId);
            sendPhoneFormatHint(chatId);
        }
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞.
     *
     * @return —Ä–∞–∑–º–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Telegram
     */
    private ReplyKeyboardMarkup createPhoneRequestKeyboard() {
        KeyboardButton button = new KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º");
        button.setRequestContact(true);
        KeyboardRow row = new KeyboardRow(List.of(button));
        ReplyKeyboardMarkup markup = new ReplyKeyboardMarkup(List.of(row));
        markup.setResizeKeyboard(true);
        markup.setOneTimeKeyboard(true);
        return markup;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     * <p>
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –µ—ë –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     * @param text   —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    private void sendPhoneRequestMessage(Long chatId, String text) {
        if (chatId == null) {
            return;
        }

        chatSessionRepository.markKeyboardHidden(chatId);
        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setReplyMarkup(createPhoneRequestKeyboard());

        try {
            telegramClient.execute(message);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞", e);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º –Ω–æ–º–µ—Ä–µ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ–≥–æ.
     *
     * @param chatId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param maskedPhone –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    private void sendPhoneRecognitionMessage(Long chatId, String maskedPhone) {
        String text = String.format("–ü–æ—Ö–æ–∂–µ, –≤–∞—à –Ω–æ–º–µ—Ä: %s\n" +
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ, –ø–æ–¥–µ–ª–∏–≤—à–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
                maskedPhone);
        sendPhoneRequestMessage(chatId, text);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendPhoneFormatHint(Long chatId) {
        String text = "–ü–æ–∫–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n" +
                "+375291234567\n" +
                "80291234567\n" +
                "8 029 123 45 67";
        sendPhoneRequestMessage(chatId, text);
    }

    /**
     * –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –§–ò–û.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     */
    private void promptForName(Long chatId) {
        transitionToState(chatId, BuyerChatState.AWAITING_NAME_INPUT);
        sendSimpleMessage(chatId, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –§–ò–û");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.
     *
     * @param chatId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param customer —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     * @return {@code true}, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –§–ò–û –≤–∞–ª–∏–¥–Ω–æ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–æ
     */
    private boolean ensureValidStoredNameOrRequestUpdate(Long chatId, Customer customer) {
        if (customer == null) {
            return true;
        }

        String fullName = customer.getFullName();
        if (fullName == null) {
            return true;
        }

        FullNameValidator.FullNameValidationResult validation = fullNameValidator.validate(fullName);
        if (validation.valid()) {
            return true;
        }

        telegramService.markNameUnconfirmed(chatId);
        customer.setNameSource(NameSource.MERCHANT_PROVIDED);
        transitionToState(chatId, BuyerChatState.AWAITING_NAME_INPUT);
        sendSimpleMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –§–ò–û");
        return false;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –§–ò–û –∏–∑ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
     *
     * @param chatId   –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
     * @param fullName –∏–º—è, –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–∏—Å—Ç–µ–º–µ
     */
    private void sendNameConfirmation(Long chatId, String fullName) {
        String text = String.format("–£ –Ω–∞—Å —É–∫–∞–∑–∞–Ω–æ –≤–∞—à–µ –§–ò–û: %s\n–≠—Ç–æ –≤–µ—Ä–Ω–æ?", fullName);
        sendInlineMessage(chatId, text, buildNameConfirmationKeyboard(), BuyerBotScreen.NAME_CONFIRMATION);
    }

    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –§–ò–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void renderNameConfirmationScreen(Long chatId) {
        Optional<Customer> optional = telegramService.findByChatId(chatId);
        if (optional.isEmpty()) {
            sendMainMenu(chatId);
            return;
        }

        Customer customer = optional.get();
        if (!ensureValidStoredNameOrRequestUpdate(chatId, customer)) {
            return;
        }

        String fullName = customer.getFullName();
        if (fullName == null || fullName.isBlank()) {
            sendMainMenu(chatId);
            return;
        }

        sendNameConfirmation(chatId, fullName);
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ Telegram –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.
     *
     * @param message –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     * @return –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ {@code null}, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
     */
    private Long extractSenderId(Message message) {
        if (message == null || message.getFrom() == null) {
            return null;
        }
        return message.getFrom().getId();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º Telegram.
     *
     * @param senderId      –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param contactUserId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
     * @return {@code true}, –µ—Å–ª–∏ –æ–±–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
     */
    private boolean isContactOwnedBySender(Long senderId, Long contactUserId) {
        if (senderId == null || contactUserId == null) {
            return false;
        }
        return contactUserId.equals(senderId);
    }

    /**
     * –°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º, –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç.
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     */
    private void sendContactOwnershipRejectedMessage(Long chatId) {
        sendPhoneRequestMessage(chatId,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –Ω–æ–º–µ—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.");
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * <p>
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç Telegram –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
     * –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –§–ò–û. –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
     * –ª–∏–±–æ Telegram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è,
     * –±–æ—Ç –æ—Ç–∫–∞–∂–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç –Ω–æ–º–µ—Ä.
     * </p>
     *
     * @param chatId  –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param message –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     * @param contact –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    private void handleContact(Long chatId, Message message, Contact contact) {
        if (chatId == null || contact == null) {
            return;
        }

        Long senderId = extractSenderId(message);
        Long contactUserId = contact.getUserId();

        if (!isContactOwnedBySender(senderId, contactUserId)) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º: chatId={}, contactUserId={}, senderId={}",
                    chatId, contactUserId, senderId);
            transitionToState(chatId, BuyerChatState.AWAITING_CONTACT);
            sendContactOwnershipRejectedMessage(chatId);
            return;
        }

        String rawPhone = contact.getPhoneNumber();
        String phone = PhoneUtils.normalizePhone(rawPhone);

        try {
            Customer customer = telegramService.linkTelegramToCustomer(phone, chatId);

            if (customer.isTelegramConfirmed()) {
                sendKeyboardRemovalMessage(chatId, "‚úÖ –ù–æ–º–µ—Ä —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é...");
            } else {
                sendKeyboardRemovalMessage(chatId, "‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!");
                telegramService.confirmTelegram(customer);
                telegramService.notifyActualStatuses(customer);
            }

            transitionToState(chatId, BuyerChatState.IDLE);
            sendMainMenu(chatId);

            if (!ensureValidStoredNameOrRequestUpdate(chatId, customer)) {
                return;
            }

            String fullName = customer.getFullName();
            if (fullName != null && !fullName.isBlank()) {
                if (customer.getNameSource() != NameSource.USER_CONFIRMED) {
                    sendNameConfirmation(chatId, fullName);
                }
            } else {
                promptForName(chatId);
                return;
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {} –¥–ª—è —á–∞—Ç–∞ {}",
                    PhoneUtils.maskPhone(phone), chatId, e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–∫—Ä—ã–≤–∞—è –∫–Ω–æ–ø–∫—É ¬´üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª.
     * <p>
     * –ú–µ—Ç–æ–¥ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç —Å–∫—Ä—ã—Ç–∏—è
     * –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ –º–µ–Ω—é —Å–º–æ–≥–ª–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.
     * </p>
     *
     * @param chatId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram
     * @param text   —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—É—Å—Ç–æ–π, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞)
     */
    private void sendKeyboardRemovalMessage(Long chatId, String text) {
        if (chatId == null) {
            return;
        }

        chatSessionRepository.markKeyboardHidden(chatId);

        String safeText = (text == null || text.isBlank())
                ? "‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –ú–µ–Ω—é –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                : text;

        SendMessage removalMessage = new SendMessage(chatId.toString(), safeText);
        ReplyKeyboardRemove removeMarkup = ReplyKeyboardRemove.builder()
                .removeKeyboard(true)
                .selective(false)
                .build();
        removalMessage.setReplyMarkup(removeMarkup);

        if (text == null || text.isBlank()) {
            removalMessage.setDisableNotification(true);
        }

        try {
            telegramClient.execute(removalMessage);
        } catch (TelegramApiException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —á–∞—Ç–µ {}", chatId, e);
        }
    }
}