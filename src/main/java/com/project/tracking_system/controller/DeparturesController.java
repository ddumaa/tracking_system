package com.project.tracking_system.controller;

import com.project.tracking_system.dto.TrackInfoListDTO;
import com.project.tracking_system.dto.TrackParcelDTO;
import com.project.tracking_system.entity.UpdateResult;
import com.project.tracking_system.entity.User;
import com.project.tracking_system.model.GlobalStatus;
import com.project.tracking_system.service.StatusTrackService;
import com.project.tracking_system.service.TypeDefinitionTrackPostService;
import com.project.tracking_system.service.TrackParcelService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * <p>
 * –≠—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—ã–ª–∫–µ,
 * –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å—ã–ª–æ–∫, –∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫.
 * </p>
 *
 * @author Dmitriy Anisimov
 * @date 07.01.2025
 */
@Slf4j
@RequiredArgsConstructor
@Controller
@RequestMapping("/departures")
public class DeparturesController {

    private final TrackParcelService trackParcelService;
    private final StatusTrackService statusTrackService;
    private final TypeDefinitionTrackPostService typeDefinitionTrackPostService;
    private final WebSocketController webSocketController;

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É.
     * <p>
     * –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å—Ç–∞—Ç—É—Å—É.
     * </p>
     *
     * @param statusString —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
     * @param page –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
     * @param size —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
     * @param model –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
     * @return –∏–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.
     */
    @GetMapping()
    public String departures(
            @RequestParam(value = "status", required = false) String statusString,
            @RequestParam(value = "page", defaultValue = "0") int page,
            @RequestParam(value = "size", defaultValue = "20") int size,
            Model model,
            Authentication authentication) {

        if (!(authentication instanceof UsernamePasswordAuthenticationToken auth) || !(auth.getPrincipal() instanceof User user)) {
            log.debug("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è' –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.");
            return "redirect:/login";
        }

        Long userId = user.getId();
        log.debug("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", userId);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
        GlobalStatus status = null;
        if (statusString != null && !statusString.isEmpty()) {
            try {
                status = GlobalStatus.valueOf(statusString);
            } catch (IllegalArgumentException e) {
                log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏: {}", statusString);
                model.addAttribute("trackParcelNotification", "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏");
                return "departures";
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—ã–ª–∫–∏ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞
        page = Math.max(page, 0);
        Page<TrackParcelDTO> trackParcelPage = (status != null)
                ? trackParcelService.findByUserTracksAndStatus(userId, status, page, size)
                : trackParcelService.findByUserTracks(userId, page, size);

        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (page >= trackParcelPage.getTotalPages() && trackParcelPage.getTotalPages() > 0) {
            log.warn("–í—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å—Ç—Ä–∞–Ω–∏—Ü, —Å–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ 0 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", userId);
            page = 0;
            trackParcelPage = (status != null)
                    ? trackParcelService.findByUserTracksAndStatus(userId, status, page, size)
                    : trackParcelService.findByUserTracks(userId, page, size);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –º–æ–¥–µ–ª—å
        model.addAttribute("size", size);
        model.addAttribute("trackParcelDTO", trackParcelPage.getContent());
        model.addAttribute("statusString", statusString);
        model.addAttribute("currentPage", trackParcelPage.getNumber());
        model.addAttribute("totalPages", trackParcelPage.getTotalPages());
        model.addAttribute("trackParcelNotification", trackParcelPage.isEmpty() ? "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –Ω–µ—Ç" : null);
        model.addAttribute("statusTrackService", statusTrackService);

        return "departures";
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—ã–ª–∫–µ.
     *
     * @param model –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
     * @param itemNumber –Ω–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –ø–æ—Å—ã–ª–∫–∏.
     * @return –∏–º—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—ã–ª–∫–µ.
     */
    @GetMapping("/{itemNumber}")
    public String departures(Model model, @PathVariable("itemNumber") String itemNumber, Authentication authentication) {
        if (!(authentication instanceof UsernamePasswordAuthenticationToken auth) || !(auth.getPrincipal() instanceof User user)) {
            throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.");
        }

        Long userId = user.getId();
        TrackInfoListDTO trackInfo = typeDefinitionTrackPostService.getTypeDefinitionTrackPostService(userId, itemNumber);
        log.info("üéØ –ü–µ—Ä–µ–¥–∞—á–∞ –≤ —à–∞–±–ª–æ–Ω: {} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç—Ä–µ–∫–∞ {}", trackInfo.getList().size(), itemNumber);

        model.addAttribute("trackInfo", trackInfo);
        model.addAttribute("itemNumber", itemNumber);

        return "partials/track-info-departures";
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @return –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏.
     */
    @PostMapping("/track-update")
    public ResponseEntity<UpdateResult> updateDepartures(
            @RequestParam(required = false) List<String> selectedNumbers,
            Authentication authentication
    ) {
        if (!(authentication instanceof UsernamePasswordAuthenticationToken auth)
                || !(auth.getPrincipal() instanceof User user)) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

        Long userId = user.getId();
        log.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", userId);

        UpdateResult result;
        try {
            if (selectedNumbers != null && !selectedNumbers.isEmpty()) {
                result = trackParcelService.updateSelectedParcels(userId, selectedNumbers);
            } else {
                result = trackParcelService.updateAllParcels(userId);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            webSocketController.sendDetailUpdateStatus(userId, result);

            return ResponseEntity.ok().build();

        } catch (Exception e) {
            log.error(" –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            webSocketController.sendUpdateStatus(userId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", false);

            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }


//    @GetMapping("/update-status")
//    @ResponseBody
//    public ResponseEntity<Map<String, Object>> checkUpdateStatus(Authentication authentication) {
//        if (!(authentication instanceof UsernamePasswordAuthenticationToken auth) || !(auth.getPrincipal() instanceof User user)) {
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of(
//                    "completed", true,
//                    "errorMessage", "–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É."
//            ));
//        }
//
//        Long userId = user.getId();
//        boolean isCompleted = trackParcelService.isUpdateCompleted(userId);
//        log.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: completed={}, errorMessage={}", userId, isCompleted);
//
//        Map<String, Object> response = new HashMap<>();
//        response.put("completed", isCompleted);
//
//        String errorMessage = trackParcelService.getLastErrorMessage(userId);
//        if (errorMessage == null) {
//            errorMessage = "";
//        }
//        return ResponseEntity.ok(Map.of(
//                "completed", isCompleted,
//                "errorMessage", errorMessage
//        ));
//    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫.
     * <p>
     * –£–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å—ã–ª–∫–∏, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ. –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
     * </p>
     *
     * @param selectedNumbers —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
     * @param redirectAttributes –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
     * @return –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏.
     */
    @PostMapping("/delete-selected")
    public ResponseEntity<String> deleteSelected(
            @RequestParam List<String> selectedNumbers,
            Authentication authentication) {

        if (!(authentication instanceof UsernamePasswordAuthenticationToken auth) || !(auth.getPrincipal() instanceof User user)) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
        }

        Long userId = user.getId();
        log.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", selectedNumbers, userId);

        if (selectedNumbers == null || selectedNumbers.isEmpty()) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: {}", userId);
            return ResponseEntity.badRequest().body("–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
        }

        try {
            trackParcelService.deleteByNumbersAndUserId(selectedNumbers, userId);
            log.info("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ {} —É–¥–∞–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: {}", selectedNumbers, userId);
            webSocketController.sendUpdateStatus(userId, "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", true);
            return ResponseEntity.ok("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: {}: {}", selectedNumbers, userId, e.getMessage(), e);
            webSocketController.sendUpdateStatus(userId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫.", false);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫.");
        }
    }

}