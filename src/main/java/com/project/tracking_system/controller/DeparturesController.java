package com.project.tracking_system.controller;

import com.project.tracking_system.dto.BulkUpdateButtonDTO;
import com.project.tracking_system.dto.TrackParcelDTO;
import com.project.tracking_system.dto.ActionRequiredReturnRequestDto;
import com.project.tracking_system.entity.Store;
import com.project.tracking_system.dto.TrackUpdateResponse;
import com.project.tracking_system.entity.User;
import com.project.tracking_system.entity.GlobalStatus;
import com.project.tracking_system.entity.OrderReturnRequest;
import com.project.tracking_system.entity.OrderReturnRequestStatus;
import com.project.tracking_system.entity.TrackParcel;
import com.project.tracking_system.service.track.StatusTrackService;
import com.project.tracking_system.service.track.TrackParcelService;
import com.project.tracking_system.service.track.TrackFacade;

import com.project.tracking_system.service.store.StoreService;
import com.project.tracking_system.service.user.UserService;
import com.project.tracking_system.service.order.OrderReturnRequestService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import com.project.tracking_system.utils.ResponseBuilder;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import com.project.tracking_system.exception.TrackNumberAlreadyExistsException;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Set;
import java.util.Objects;
import java.util.stream.Collectors;

import com.project.tracking_system.utils.PaginationItem;
import com.project.tracking_system.utils.PaginationUtils;
import com.project.tracking_system.utils.PaginationWindow;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * <p>
 * –≠—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—ã–ª–∫–µ,
 * –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å—ã–ª–æ–∫, –∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫.
 * </p>
 *
 * @author Dmitriy Anisimov
 * @date 07.01.2025
 */
@Slf4j
@RequiredArgsConstructor
@Controller
@RequestMapping("/app/departures")
public class DeparturesController {

    private final TrackParcelService trackParcelService;
    private final TrackFacade trackFacade;
    private final StatusTrackService statusTrackService;
    private final StoreService storeService;
    private final WebSocketController webSocketController;
    private final UserService userService;
    private final OrderReturnRequestService orderReturnRequestService;

    /**
     * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
     * –ü–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
     */
    private static final int PAGE_WINDOW = 5;

    /**
     * –§–æ—Ä–º–∞—Ç–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ ¬´–¢—Ä–µ–±—É—é—Ç –¥–µ–π—Å—Ç–≤–∏—è¬ª.
     */
    private static final DateTimeFormatter REQUEST_DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å
     * –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, —Å—Ç–∞—Ç—É—Å—É –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ.
     *
     * @param storeId      (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ID –º–∞–≥–∞–∑–∏–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.
     * @param statusString —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
     * @param query        —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ—Å—ã–ª–∫–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
     * @param page         –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
     * @param size         —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
     * @param sortOrder    –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ (asc/desc).
     * @param model        –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
     * @param user         —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
     * @return –∏–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.
     */
    @GetMapping()
    public String departures(
            @RequestParam(required = false) Long storeId,  // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
            @RequestParam(value = "status", required = false) String statusString, // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            @RequestParam(value = "query", required = false) String query, // –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            @RequestParam(value = "page", defaultValue = "0") int page,
            @RequestParam(value = "size", defaultValue = "20") int size,
            @RequestParam(value = "sortOrder", defaultValue = "desc") String sortOrder,
            Model model,
            @AuthenticationPrincipal User user) {

        Long userId = user.getId();
        List<Store> stores = storeService.getUserStores(userId); // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã —Å –∏–º–µ–Ω–∞–º–∏
        List<Long> storeIds = storeService.getUserStoreIds(userId); // –í—Å–µ id –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **—Ç–æ–ª—å–∫–æ 1 –º–∞–≥–∞–∑–∏–Ω**, –Ω–æ –æ–Ω —è–≤–Ω–æ –≤—ã–±—Ä–∞–ª "–í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã", –Ω–µ –∑–∞–º–µ–Ω—è–µ–º storeId
        if (storeIds.size() == 1 && storeId == null) {
            storeId = storeIds.get(0);
        }

        // –ï—Å–ª–∏ **—Ñ–∏–ª—å—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        List<Long> filteredStoreIds = (storeId != null) ? List.of(storeId) : storeIds;

        log.debug("üì¶ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π: userId={}, storeId={}, storeIds={}", userId, storeId, filteredStoreIds);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
        GlobalStatus status = null;
        if (statusString != null && !statusString.isEmpty()) {
            try {
                status = GlobalStatus.valueOf(statusString);
            } catch (IllegalArgumentException e) {
                log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏: {}", statusString);
                model.addAttribute("trackParcelNotification", "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏");
                return "app/departures";
            }
        }

        int requestedPage = Math.max(page, 0);
        String normalizedQuery = query != null ? query.trim() : null;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—ã–ª–∫–∏ —Å —É—á—ë—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞, –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ–∏—Å–∫–∞
        Page<TrackParcelDTO> trackParcelPage = loadTrackParcelPage(
                filteredStoreIds, status, normalizedQuery, requestedPage, size, userId, sortOrder);

        int totalPages = trackParcelPage.getTotalPages();
        PaginationWindow paginationWindow = PaginationUtils.calculateWindow(requestedPage, totalPages, PAGE_WINDOW);

        if (totalPages > 0 && paginationWindow.currentPage() != trackParcelPage.getNumber()) {
            log.warn("‚ö† –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ {} –¥–ª—è userId={} –∏ storeId={}",
                    requestedPage, paginationWindow.currentPage(), userId, storeId);

            trackParcelPage = loadTrackParcelPage(
                    filteredStoreIds, status, normalizedQuery, paginationWindow.currentPage(), size, userId, sortOrder);
            totalPages = trackParcelPage.getTotalPages();
            paginationWindow = PaginationUtils.calculateWindow(paginationWindow.currentPage(), totalPages, PAGE_WINDOW);
        }

        ZoneId userZone = userService.getUserZone(userId);
        List<OrderReturnRequest> activeReturnRequests = orderReturnRequestService.findActiveRequestsWithDetails(userId);
        List<ActionRequiredReturnRequestDto> actionRequiredRequests = activeReturnRequests.stream()
                .map(request -> mapActionRequiredRequest(request, userZone))
                .toList();

        // –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å—ã–ª–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –≤–æ–∑–≤—Ä–∞—Ç–∞–º/–æ–±–º–µ–Ω–∞–º
        Set<Long> actionRequired = activeReturnRequests.stream()
                .map(OrderReturnRequest::getParcel)
                .filter(Objects::nonNull)
                .map(TrackParcel::getId)
                .filter(Objects::nonNull)
                .collect(Collectors.toSet());

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –≤ DTO –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ —à–∞–±–ª–æ–Ω
        trackParcelPage.forEach(dto -> {
            GlobalStatus statusEnum = GlobalStatus.fromDescription(dto.getStatus()); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ Enum
            dto.setIconHtml(statusTrackService.getIcon(statusEnum)); // –ü–µ—Ä–µ–¥–∞–µ–º Enum –≤ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
            dto.setRequiresAction(actionRequired.contains(dto.getId()));
        });

        log.debug("–ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ –º–æ–¥–µ–ª—å: stores={}, storeId={}, trackParcelDTO={}, currentPage={}, totalPages={}, size={}",
                stores, storeId, trackParcelPage.getContent(), paginationWindow.currentPage(), totalPages, size);

        List<PaginationItem> paginationItems = paginationWindow.paginationItems();

        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –º–æ–¥–µ–ª—å
        model.addAttribute("stores", stores);
        model.addAttribute("storeId", storeId != null ? storeId : ""); // –ï—Å–ª–∏ null, –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        model.addAttribute("size", size);
        model.addAttribute("trackParcelDTO", trackParcelPage.getContent());
        model.addAttribute("statusString", statusString);
        model.addAttribute("query", query);
        model.addAttribute("currentPage", paginationWindow.currentPage());
        model.addAttribute("totalPages", totalPages);
        model.addAttribute("startPage", paginationWindow.startPage());
        model.addAttribute("endPage", paginationWindow.endPage());
        model.addAttribute("paginationItems", paginationItems);
        model.addAttribute("trackParcelNotification", trackParcelPage.isEmpty() ? "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –Ω–µ—Ç" : null);
        model.addAttribute("bulkUpdateButtonDTO",
                new BulkUpdateButtonDTO(userService.isShowBulkUpdateButton(user.getId())));
        // –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–æ –≤—å—é, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–µ–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
        model.addAttribute("sortOrder", sortOrder);
        model.addAttribute("actionRequiredCount", actionRequiredRequests.size());
        model.addAttribute("actionRequiredRequests", actionRequiredRequests);

        return "app/departures";
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @return –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏.
     */
    @PostMapping("/track-update")
    public ResponseEntity<?> updateDepartures(
            @RequestParam(required = false) List<String> selectedNumbers,
            @AuthenticationPrincipal User user
    ) {
        Long userId = user.getId();
        log.info("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫: userId={}", userId);

        TrackUpdateResponse result;
        try {
            if (selectedNumbers != null && !selectedNumbers.isEmpty()) {
                result = trackFacade.updateSelectedParcels(userId, selectedNumbers);
            } else {
                result = trackFacade.updateAllParcels(userId);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            webSocketController.sendUpdateStatus(userId, result.message(), result.readyToUpdate() > 0);
            return ResponseBuilder.ok(result);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫: userId={}, –æ—à–∏–±–∫–∞={}", userId, e.getMessage(), e);
            webSocketController.sendUpdateStatus(userId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", false);
            return ResponseBuilder.error(HttpStatus.INTERNAL_SERVER_ERROR, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫");
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ—Å—ã–ª–∫–∏.
     *
     * @param id     –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—ã–ª–∫–∏
     * @param number –Ω–æ–≤—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä
     * @param user   —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    @PostMapping("/set-number")
    public ResponseEntity<?> setNumber(
            @RequestParam Long id,
            @RequestParam String number,
            @AuthenticationPrincipal User user) {
        try {
            trackParcelService.assignTrackNumber(id, number, user.getId());
            return ResponseBuilder.ok("–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω");
        } catch (TrackNumberAlreadyExistsException e) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", number, user.getId());
            return ResponseBuilder.error(HttpStatus.CONFLICT, e.getMessage());
        } catch (IllegalArgumentException e) {
            log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", number, user.getId());
            return ResponseBuilder.error(HttpStatus.BAD_REQUEST, e.getMessage());
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫.
     * <p>
     * –£–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å—ã–ª–∫–∏, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ. –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
     * </p>
     *
     * @param selectedNumbers —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
     * @param user            —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @return –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏.
     */
    /**
     * –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Å—ã–ª–∫–∏.
     * <p>
     * –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∫–∞–∫ –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞–º, —Ç–∞–∫ –∏ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
     * (–¥–ª—è –ø—Ä–µ–¥—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –±–µ–∑ –Ω–æ–º–µ—Ä–∞).
     * </p>
     *
     * @param selectedNumbers —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤
     * @param selectedIds     —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ—Å—ã–ª–æ–∫
     * @param user            —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
     */
    @PostMapping("/delete-selected")
    public ResponseEntity<?> deleteSelected(
            @RequestParam(value = "selectedNumbers", required = false) List<String> selectedNumbers,
            @RequestParam(value = "selectedIds", required = false) List<Long> selectedIds,
            @AuthenticationPrincipal User user) {
        Long userId = user.getId();
        log.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫ {} –∏ ID {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {}", selectedNumbers, selectedIds, userId);

        boolean hasNumbers = selectedNumbers != null && selectedNumbers.stream().anyMatch(num -> num != null && !num.isBlank());
        boolean hasIds = selectedIds != null && !selectedIds.isEmpty();

        if (!hasNumbers && !hasIds) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: {}", userId);
            return ResponseBuilder.error(HttpStatus.BAD_REQUEST, "–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
        }

        try {
            if (hasNumbers) {
                List<String> filteredNumbers = selectedNumbers.stream()
                        .filter(num -> num != null && !num.isBlank())
                        .toList();
                if (!filteredNumbers.isEmpty()) {
                    trackFacade.deleteByNumbersAndUserId(filteredNumbers, userId);
                }
            }
            if (hasIds) {
                trackFacade.deleteByIdsAndUserId(selectedIds, userId);
            }
            log.info("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: {}", userId);
            webSocketController.sendUpdateStatus(userId, "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", true);
            return ResponseBuilder.ok("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.");
        } catch (EntityNotFoundException ex) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", userId);
            webSocketController.sendUpdateStatus(userId, ex.getMessage(), false);
            return ResponseBuilder.error(HttpStatus.NOT_FOUND, ex.getMessage());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID: {}: {}", userId, e.getMessage(), e);
            webSocketController.sendUpdateStatus(userId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫.", false);
            return ResponseBuilder.error(HttpStatus.INTERNAL_SERVER_ERROR, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–æ–∫.");
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∏—Å–∫–∞.
     *
     * @param storeIds  –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     * @param status    –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏
     * @param query     –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å {@code null})
     * @param pageIndex –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å
     * @param size      —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @param userId    –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param sortOrder –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (asc/desc)
     * @return —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∫–∏
     */
    private Page<TrackParcelDTO> loadTrackParcelPage(List<Long> storeIds,
                                                     GlobalStatus status,
                                                     String query,
                                                     int pageIndex,
                                                     int size,
                                                     Long userId,
                                                     String sortOrder) {
        if (query != null && !query.isBlank()) {
            return trackParcelService.searchByNumberPhoneOrName(storeIds, status, query, pageIndex, size, userId, sortOrder);
        }

        if (status != null) {
            if (status == GlobalStatus.PRE_REGISTERED) {
                return trackParcelService.findByStoreTracksWithPreRegistered(storeIds, pageIndex, size, userId, sortOrder);
            }
            return trackParcelService.findByStoreTracksAndStatus(storeIds, status, pageIndex, size, userId, sortOrder);
        }

        return trackParcelService.findByStoreTracks(storeIds, pageIndex, size, userId, sortOrder);
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –≤ DTO –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ ¬´–¢—Ä–µ–±—É—é—Ç –¥–µ–π—Å—Ç–≤–∏—è¬ª.
     *
     * @param request –∏—Å—Ö–æ–¥–Ω–∞—è –∑–∞—è–≤–∫–∞
     * @param userZone —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
     * @return DTO —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private ActionRequiredReturnRequestDto mapActionRequiredRequest(OrderReturnRequest request, ZoneId userZone) {
        TrackParcel parcel = request.getParcel();
        Long parcelId = parcel != null ? parcel.getId() : null;
        String trackNumber = parcel != null ? parcel.getNumber() : null;
        String storeName = parcel != null && parcel.getStore() != null ? parcel.getStore().getName() : null;
        GlobalStatus parcelStatus = parcel != null ? parcel.getStatus() : null;
        OrderReturnRequestStatus status = request.getStatus();

        String requestedAt = formatRequestMoment(request.getRequestedAt(), userZone);
        String createdAt = formatRequestMoment(request.getCreatedAt(), userZone);

        boolean canStartExchange = orderReturnRequestService.canStartExchange(request);
        boolean canCloseWithoutExchange = status == OrderReturnRequestStatus.REGISTERED;
        String cancelExchangeReason = orderReturnRequestService
                .getExchangeCancellationBlockReason(request)
                .orElse(null);
        boolean exchangeShipmentDispatched = orderReturnRequestService.isExchangeShipmentDispatched(request);

        return new ActionRequiredReturnRequestDto(
                request.getId(),
                parcelId,
                trackNumber,
                storeName,
                parcelStatus != null ? parcelStatus.getDescription() : null,
                status,
                status != null ? status.getDisplayName() : null,
                requestedAt,
                createdAt,
                request.getReason(),
                request.getComment(),
                request.getReverseTrackNumber(),
                request.isExchangeRequested(),
                canStartExchange,
                canCloseWithoutExchange,
                exchangeShipmentDispatched,
                cancelExchangeReason
        );
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—è–≤–∫–∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ.
     *
     * @param moment –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ UTC
     * @param userZone —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ {@code null}, –µ—Å–ª–∏ –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
     */
    private String formatRequestMoment(ZonedDateTime moment, ZoneId userZone) {
        if (moment == null || userZone == null) {
            return null;
        }
        return REQUEST_DATE_FORMATTER.format(moment.withZoneSameInstant(userZone));
    }
}
