-- Базовая схема после миграций V1..V35

-- Пользователи
CREATE TABLE tb_users (
                          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          email VARCHAR(255) NOT NULL UNIQUE,
                          password VARCHAR(255) NOT NULL,
                          time_zone VARCHAR(100) NOT NULL DEFAULT 'Europe/Minsk',
                          role VARCHAR(50)
);

-- Попытки входа
CREATE TABLE login_attempt (
                               id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                               attempts INTEGER NOT NULL,
                               last_modified TIMESTAMP(6),
                               user_id BIGINT UNIQUE REFERENCES tb_users(id) ON DELETE CASCADE
);

-- Учётные данные Evropost
CREATE TABLE tb_evropost_service_credentials (
                                                 id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                 user_id BIGINT NOT NULL UNIQUE REFERENCES tb_users(id) ON DELETE CASCADE,
                                                 username VARCHAR(255),
                                                 password TEXT,
                                                 jwt_token TEXT,
                                                 token_created_at TIMESTAMP,
                                                 service_number VARCHAR(255),
                                                 use_custom_credentials BOOLEAN NOT NULL DEFAULT FALSE
);

-- Тарифные планы
CREATE TABLE subscription_plans (
                                    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                    code VARCHAR(20) NOT NULL UNIQUE,
                                    name VARCHAR(255) NOT NULL,
                                    price DECIMAL(10,2) NOT NULL DEFAULT 0,
                                    active BOOLEAN NOT NULL DEFAULT TRUE,
                                    monthly_price DECIMAL(10,2) NOT NULL DEFAULT 0,
                                    annual_price DECIMAL(10,2) NOT NULL DEFAULT 0,
                                    position INT NOT NULL DEFAULT 0
);

-- Лимиты тарифных планов
CREATE TABLE subscription_limits (
                                     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     subscription_plan_id BIGINT NOT NULL UNIQUE REFERENCES subscription_plans(id) ON DELETE CASCADE,
                                     max_tracks_per_file INT,
                                     max_saved_tracks INT,
                                     max_track_updates INT,
                                     max_stores INT NOT NULL DEFAULT 1
);

-- Дополнительные функции тарифов
CREATE TABLE subscription_features (
                                       id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       subscription_plan_id BIGINT NOT NULL REFERENCES subscription_plans(id) ON DELETE CASCADE,
                                       feature_key VARCHAR(50) NOT NULL,
                                       enabled BOOLEAN NOT NULL DEFAULT FALSE,
                                       CONSTRAINT uk_plan_feature UNIQUE (subscription_plan_id, feature_key)
);

-- Подписки пользователей
CREATE TABLE tb_user_subscriptions (
                                       id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                       user_id BIGINT NOT NULL UNIQUE REFERENCES tb_users(id) ON DELETE CASCADE,
                                       subscription_plan_id BIGINT REFERENCES subscription_plans(id) ON DELETE CASCADE,
                                       subscription_end_date TIMESTAMPTZ,
                                       auto_update_enabled BOOLEAN NOT NULL DEFAULT TRUE,
                                       update_count INTEGER DEFAULT 0,
                                       reset_date DATE
);

-- Магазины
CREATE TABLE tb_stores (
                           id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           name VARCHAR(255) NOT NULL,
                           is_default BOOLEAN NOT NULL DEFAULT FALSE,
                           user_id BIGINT NOT NULL REFERENCES tb_users(id) ON DELETE CASCADE
);
CREATE INDEX idx_stores_user_id ON tb_stores(user_id);

-- Покупатели
CREATE TABLE tb_customers (
                              id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                              phone VARCHAR(255) NOT NULL UNIQUE,
                              sent_count INT NOT NULL DEFAULT 0,
                              picked_up_count INT NOT NULL DEFAULT 0,
                              returned_count INT NOT NULL DEFAULT 0,
                              telegram_chat_id BIGINT,
                              telegram_confirmed BOOLEAN NOT NULL DEFAULT FALSE,
                              notifications_enabled BOOLEAN NOT NULL DEFAULT TRUE,
                              reputation VARCHAR(50) NOT NULL
);

-- Посылки
CREATE TABLE tb_track_parcels (
                                  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                  tracking_number VARCHAR(255) NOT NULL,
                                  status VARCHAR(50) NOT NULL,
                                  timestamp TIMESTAMPTZ NOT NULL,
                                  store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                  user_id BIGINT NOT NULL REFERENCES tb_users(id) ON DELETE CASCADE,
                                  customer_id BIGINT REFERENCES tb_customers(id) ON DELETE SET NULL,
                                  included_in_statistics BOOLEAN NOT NULL DEFAULT FALSE,
                                  version BIGINT NOT NULL DEFAULT 0
);
CREATE UNIQUE INDEX uq_track_user ON tb_track_parcels(tracking_number, user_id);
CREATE INDEX idx_parcels_store_id ON tb_track_parcels(store_id);
CREATE INDEX idx_parcels_status ON tb_track_parcels(status);

-- Ежедневная статистика магазинов
CREATE TABLE tb_store_statistics_daily (
                                           id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                           store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                           date DATE NOT NULL,
                                           sent INT NOT NULL DEFAULT 0,
                                           delivered INT NOT NULL DEFAULT 0,
                                           returned INT NOT NULL DEFAULT 0,
                                           sum_delivery_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                           sum_pickup_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                           updated_at TIMESTAMP
);
CREATE INDEX idx_store_stats_daily_store_date ON tb_store_statistics_daily(store_id, date);

-- Накопительная статистика магазинов
CREATE TABLE tb_store_statistics (
                                     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                     total_sent INT NOT NULL DEFAULT 0,
                                     total_delivered INT NOT NULL DEFAULT 0,
                                     total_returned INT NOT NULL DEFAULT 0,
                                     sum_delivery_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                     sum_pickup_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                     updated_at TIMESTAMP
);
CREATE INDEX idx_store_statistics_store_id ON tb_store_statistics(store_id);

-- Еженедельная статистика магазинов
CREATE TABLE tb_store_statistics_weekly (
                                            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                            period_year INT NOT NULL,
                                            period_number INT NOT NULL,
                                            sent INT NOT NULL DEFAULT 0,
                                            delivered INT NOT NULL DEFAULT 0,
                                            returned INT NOT NULL DEFAULT 0,
                                            sum_delivery_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                            sum_pickup_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                            updated_at TIMESTAMP,
                                            CONSTRAINT uk_store_stats_weekly UNIQUE (store_id, period_year, period_number)
);
CREATE INDEX idx_store_stats_weekly ON tb_store_statistics_weekly(store_id, period_year, period_number);

-- Ежемесячная статистика магазинов
CREATE TABLE tb_store_statistics_monthly (
                                             id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                             store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                             period_year INT NOT NULL,
                                             period_number INT NOT NULL,
                                             sent INT NOT NULL DEFAULT 0,
                                             delivered INT NOT NULL DEFAULT 0,
                                             returned INT NOT NULL DEFAULT 0,
                                             sum_delivery_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                             sum_pickup_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                             updated_at TIMESTAMP,
                                             CONSTRAINT uk_store_stats_monthly UNIQUE (store_id, period_year, period_number)
);
CREATE INDEX idx_store_stats_monthly ON tb_store_statistics_monthly(store_id, period_year, period_number);

-- Ежегодная статистика магазинов
CREATE TABLE tb_store_statistics_yearly (
                                            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                            period_year INT NOT NULL,
                                            period_number INT NOT NULL,
                                            sent INT NOT NULL DEFAULT 0,
                                            delivered INT NOT NULL DEFAULT 0,
                                            returned INT NOT NULL DEFAULT 0,
                                            sum_delivery_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                            sum_pickup_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                            updated_at TIMESTAMP,
                                            CONSTRAINT uk_store_stats_yearly UNIQUE (store_id, period_year, period_number)
);
CREATE INDEX idx_store_stats_yearly ON tb_store_statistics_yearly(store_id, period_year, period_number);

-- Статистика почтовых служб
CREATE TABLE tb_postal_service_statistics (
                                              id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                              store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                              postal_service_type VARCHAR(50) NOT NULL,
                                              total_sent INT NOT NULL DEFAULT 0,
                                              total_delivered INT NOT NULL DEFAULT 0,
                                              total_returned INT NOT NULL DEFAULT 0,
                                              sum_delivery_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                              sum_pickup_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                              updated_at TIMESTAMP
);
CREATE INDEX idx_postal_stats_store ON tb_postal_service_statistics(store_id);

CREATE TABLE tb_postal_service_statistics_daily (
                                                    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                    store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                                    postal_service_type VARCHAR(50) NOT NULL,
                                                    date DATE NOT NULL,
                                                    sent INT NOT NULL DEFAULT 0,
                                                    delivered INT NOT NULL DEFAULT 0,
                                                    returned INT NOT NULL DEFAULT 0,
                                                    sum_delivery_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                                    sum_pickup_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                                    updated_at TIMESTAMP
);
CREATE INDEX idx_postal_service_stats_daily_store_service_date ON tb_postal_service_statistics_daily(store_id, postal_service_type, date);

CREATE TABLE tb_postal_service_statistics_weekly (
                                                     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                     store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                                     postal_service_type VARCHAR(50) NOT NULL,
                                                     period_year INT NOT NULL,
                                                     period_number INT NOT NULL,
                                                     sent INT NOT NULL DEFAULT 0,
                                                     delivered INT NOT NULL DEFAULT 0,
                                                     returned INT NOT NULL DEFAULT 0,
                                                     sum_delivery_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                                     sum_pickup_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                                     updated_at TIMESTAMP,
                                                     CONSTRAINT uk_postal_stats_weekly UNIQUE (store_id, postal_service_type, period_year, period_number)
);
CREATE INDEX idx_postal_stats_weekly ON tb_postal_service_statistics_weekly(store_id, postal_service_type, period_year, period_number);

CREATE TABLE tb_postal_service_statistics_monthly (
                                                      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                      store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                                      postal_service_type VARCHAR(50) NOT NULL,
                                                      period_year INT NOT NULL,
                                                      period_number INT NOT NULL,
                                                      sent INT NOT NULL DEFAULT 0,
                                                      delivered INT NOT NULL DEFAULT 0,
                                                      returned INT NOT NULL DEFAULT 0,
                                                      sum_delivery_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                                      sum_pickup_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                                      updated_at TIMESTAMP,
                                                      CONSTRAINT uk_postal_stats_monthly UNIQUE (store_id, postal_service_type, period_year, period_number)
);
CREATE INDEX idx_postal_stats_monthly ON tb_postal_service_statistics_monthly(store_id, postal_service_type, period_year, period_number);

CREATE TABLE tb_postal_service_statistics_yearly (
                                                     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                     store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                                     postal_service_type VARCHAR(50) NOT NULL,
                                                     period_year INT NOT NULL,
                                                     period_number INT NOT NULL,
                                                     sent INT NOT NULL DEFAULT 0,
                                                     delivered INT NOT NULL DEFAULT 0,
                                                     returned INT NOT NULL DEFAULT 0,
                                                     sum_delivery_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                                     sum_pickup_days NUMERIC(12,2) NOT NULL DEFAULT 0.0,
                                                     updated_at TIMESTAMP,
                                                     CONSTRAINT uk_postal_stats_yearly UNIQUE (store_id, postal_service_type, period_year, period_number)
);
CREATE INDEX idx_postal_stats_yearly ON tb_postal_service_statistics_yearly(store_id, postal_service_type, period_year, period_number);


-- Журнал уведомлений покупателей
CREATE TABLE tb_customer_notifications (
                                           id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                           customer_id BIGINT NOT NULL REFERENCES tb_customers(id) ON DELETE CASCADE,
                                           parcel_id BIGINT NOT NULL REFERENCES tb_track_parcels(id) ON DELETE CASCADE,
                                           status VARCHAR(50) NOT NULL,
                                           notification_type VARCHAR(50) NOT NULL,
                                           sent_at TIMESTAMPTZ NOT NULL
);

-- История доставки
CREATE TABLE tb_delivery_history (
                                     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     track_parcel_id BIGINT REFERENCES tb_track_parcels(id) ON DELETE SET NULL,
                                     store_id BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                     postal_service VARCHAR(50) NOT NULL,
                                     send_date TIMESTAMPTZ,
                                     arrived_date TIMESTAMPTZ,
                                     received_date TIMESTAMPTZ,
                                     returned_date TIMESTAMPTZ
);
CREATE INDEX idx_delivery_history_store ON tb_delivery_history(store_id);
CREATE INDEX idx_delivery_history_track ON tb_delivery_history(track_parcel_id);

-- Настройки Telegram магазина
CREATE TABLE tb_store_telegram_settings (
                                            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            store_id BIGINT NOT NULL UNIQUE REFERENCES tb_stores(id) ON DELETE CASCADE,
                                            enabled BOOLEAN NOT NULL DEFAULT TRUE,
                                            reminder_start_after_days INT NOT NULL DEFAULT 3,
                                            reminder_repeat_interval_days INT NOT NULL DEFAULT 2,
                                            custom_signature VARCHAR(200),
                                            reminders_enabled BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE tb_store_telegram_templates (
                                             id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                             settings_id BIGINT NOT NULL REFERENCES tb_store_telegram_settings(id) ON DELETE CASCADE,
                                             status VARCHAR(30) NOT NULL,
                                             template TEXT NOT NULL,
                                             CONSTRAINT chk_template_status CHECK (status IN ('REGISTERED','IN_TRANSIT','WAITING','DELIVERED','RETURNED')),
                                             CONSTRAINT uq_settings_status UNIQUE (settings_id, status)
);
CREATE INDEX idx_telegram_templates_settings ON tb_store_telegram_templates(settings_id);

-- Токены подтверждения и сброса пароля
CREATE TABLE confirmation_token (
                                    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                    email VARCHAR(255) NOT NULL UNIQUE,
                                    confirmation_code VARCHAR(255),
                                    created_at TIMESTAMP NOT NULL
);

CREATE TABLE password_reset_token (
                                      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      email VARCHAR(255) NOT NULL UNIQUE,
                                      token VARCHAR(255) NOT NULL UNIQUE,
                                      expiration_date TIMESTAMP NOT NULL
);

-- Настройки пользователя
CREATE TABLE tb_user_settings (
                                  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                  user_id BIGINT NOT NULL UNIQUE REFERENCES tb_users(id) ON DELETE CASCADE,
                                  show_bulk_update_button BOOLEAN NOT NULL DEFAULT FALSE,
                                  telegram_notifications_enabled BOOLEAN NOT NULL DEFAULT TRUE
);
CREATE INDEX idx_user_settings_user ON tb_user_settings(user_id);

-- Планировщик
CREATE TABLE tb_scheduled_task_config (
                                          id BIGINT PRIMARY KEY,
                                          description VARCHAR(255) NOT NULL,
                                          cron VARCHAR(100) NOT NULL,
                                          zone VARCHAR(50) DEFAULT 'UTC'
);

-- Стартовые задачи
INSERT INTO tb_scheduled_task_config(id, description, cron, zone) VALUES
                                                                      (1, 'Агрегация статистики', '0 0 2 * * *', 'UTC'),
                                                                      (2, 'Напоминания Telegram', '0 0 8 * * *', 'UTC'),
                                                                      (3, 'Обновление JWT токенов', '0 0 0 * * ?', 'UTC'),
                                                                      (4, 'Проверка подписок', '0 0 3 * * *', 'UTC'),
                                                                      (5, 'Очистка токенов', '0 0 * * * *', 'UTC'),
                                                                      (6, 'Автообновление треков', '0 0 6 * * *', 'UTC');


-- Вставка тарифов
INSERT INTO subscription_plans (code, name, price, monthly_price, annual_price, position)
VALUES
    ('FREE',       'Базовый',       0.00,  0.00,   0.00,   1),
    ('TEAM',       'Команда',      15.00, 15.00, 150.00,   2),
    ('BUSINESS',   'Бизнес',       25.00, 25.00, 250.00,   3),
    ('ENTERPRISE', 'Ентерпрайз',   45.00, 45.00, 450.00,   4);

-- Вставка лимитов
INSERT INTO subscription_limits (
    subscription_plan_id, max_tracks_per_file, max_saved_tracks, max_track_updates, max_stores
)
SELECT id,
       CASE code
           WHEN 'FREE'       THEN 10
           WHEN 'TEAM'       THEN 50
           WHEN 'BUSINESS'   THEN 100
           WHEN 'ENTERPRISE' THEN 200
           END,
       CASE code
           WHEN 'FREE'       THEN 10
           WHEN 'TEAM'       THEN 500
           WHEN 'BUSINESS'   THEN 1000
           WHEN 'ENTERPRISE' THEN 5000
           END,
       CASE code
           WHEN 'FREE'       THEN 10
           WHEN 'TEAM'       THEN 50
           WHEN 'BUSINESS'   THEN 100
           WHEN 'ENTERPRISE' THEN 300
           END,
       CASE code
           WHEN 'FREE'       THEN 1
           WHEN 'TEAM'       THEN 1
           WHEN 'BUSINESS'   THEN 5
           WHEN 'ENTERPRISE' THEN 10
           END
FROM subscription_plans;

-- Вставка функций тарифов (feature_key: BULK_UPDATE, TELEGRAM_NOTIFICATIONS, AUTO_UPDATE)
INSERT INTO subscription_features (subscription_plan_id, feature_key, enabled)
SELECT id, 'BULK_UPDATE', CASE WHEN code IN ('BUSINESS', 'ENTERPRISE') THEN true ELSE false END
FROM subscription_plans;

INSERT INTO subscription_features (subscription_plan_id, feature_key, enabled)
SELECT id, 'TELEGRAM_NOTIFICATIONS', CASE WHEN code != 'FREE' THEN true ELSE false END
FROM subscription_plans;

INSERT INTO subscription_features (subscription_plan_id, feature_key, enabled)
SELECT id, 'AUTO_UPDATE', CASE WHEN code IN ('BUSINESS', 'ENTERPRISE') THEN true ELSE false END
FROM subscription_plans;
