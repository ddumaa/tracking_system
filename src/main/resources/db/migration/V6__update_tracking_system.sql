-- 1. Добавляем таблицу магазинов, если её ещё нет
CREATE TABLE IF NOT EXISTS tb_stores (
                                         id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                         name     VARCHAR(255) NOT NULL,
                                         user_id  BIGINT NOT NULL REFERENCES tb_users(id) ON DELETE CASCADE
);

-- 2. Добавляем колонку store_id в tb_track_parcels, если её нет
ALTER TABLE tb_track_parcels
    ADD COLUMN IF NOT EXISTS store_id BIGINT NULL REFERENCES tb_stores(id) ON DELETE SET NULL;

-- 3. Добавляем новые поля для дат отправки и получения, если их нет
ALTER TABLE tb_track_parcels
    ADD COLUMN IF NOT EXISTS send_date TIMESTAMP WITH TIME ZONE NULL,
    ADD COLUMN IF NOT EXISTS received_date TIMESTAMP WITH TIME ZONE NULL,
    ADD COLUMN IF NOT EXISTS returned_date TIMESTAMP WITH TIME ZONE NULL,
    ADD COLUMN IF NOT EXISTS received_by VARCHAR(50) NULL CHECK (received_by IN ('CUSTOMER', 'STORE'));

-- 4. Обновляем старые значения статусов
UPDATE tb_track_parcels SET status = 'DELIVERED' WHERE status = 'Вручена';
UPDATE tb_track_parcels SET status = 'WAITING_FOR_CUSTOMER' WHERE status = 'Ожидает клиента';
UPDATE tb_track_parcels SET status = 'IN_TRANSIT' WHERE status = 'В пути';
UPDATE tb_track_parcels SET status = 'CUSTOMER_NOT_PICKING_UP' WHERE status = 'Клиент не забирает';
UPDATE tb_track_parcels SET status = 'RETURN_IN_PROGRESS' WHERE status = 'Возврат в пути';
UPDATE tb_track_parcels SET status = 'RETURN_PENDING_PICKUP' WHERE status = 'Возврат ожидает забора';
UPDATE tb_track_parcels SET status = 'RETURNED' WHERE status = 'Возврат забран';
UPDATE tb_track_parcels SET status = 'REGISTERED' WHERE status = 'Заявка зарегистрирована';

-- 5. Обновляем статус, ограничивая его значениями GlobalStatus
ALTER TABLE tb_track_parcels
    ALTER COLUMN status TYPE VARCHAR(50) USING status::VARCHAR,
    ADD CONSTRAINT chk_status CHECK (status IN (
                                                'DELIVERED', 'WAITING_FOR_CUSTOMER', 'IN_TRANSIT', 'CUSTOMER_NOT_PICKING_UP',
                                                'RETURN_IN_PROGRESS', 'RETURN_PENDING_PICKUP', 'RETURNED', 'REGISTERED'
        ));

-- 6. Создаём таблицу статистики магазинов, если её ещё нет
CREATE TABLE IF NOT EXISTS tb_store_statistics (
                                                   id                   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                   store_id             BIGINT NOT NULL REFERENCES tb_stores(id) ON DELETE CASCADE,
                                                   total_sent           INT NOT NULL DEFAULT 0,
                                                   total_delivered      INT NOT NULL DEFAULT 0,
                                                   total_returned       INT NOT NULL DEFAULT 0,
                                                   average_delivery_days DECIMAL(5,2) NULL,
                                                   updated_at           TIMESTAMP DEFAULT now()
);

-- 7. Индексы для ускорения работы с БД
CREATE INDEX IF NOT EXISTS idx_users_email ON tb_users(email);
CREATE INDEX IF NOT EXISTS idx_stores_user_id ON tb_stores(user_id);
CREATE INDEX IF NOT EXISTS idx_parcels_store_id ON tb_track_parcels(store_id);
CREATE INDEX IF NOT EXISTS idx_parcels_status ON tb_track_parcels(status);
CREATE INDEX IF NOT EXISTS idx_store_statistics_store_id ON tb_store_statistics(store_id);

-- 8. Создаём дефолтный магазин для всех пользователей, у которых его нет
INSERT INTO tb_stores (name, user_id)
SELECT 'Мой магазин', id FROM tb_users
WHERE NOT EXISTS (SELECT 1 FROM tb_stores WHERE tb_stores.user_id = tb_users.id);

-- 9. Обновляем старые посылки, если у них нет привязки к магазину
UPDATE tb_track_parcels AS p
SET store_id = (SELECT s.id FROM tb_stores s WHERE s.user_id = p.user_id LIMIT 1)
WHERE p.store_id IS NULL;
