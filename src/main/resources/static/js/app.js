/** =====================
 *  –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
 * ===================== */

function updateDeleteButtonState() {
    const hasChecked = document.querySelectorAll(".selectCheckbox:checked").length > 0;
    document.getElementById("applyActionBtn").disabled = !hasChecked;
}

function updateApplyButtonState() {
    $("#applyActionBtn").prop("disabled", $(".selectCheckbox:checked").length === 0);
}

function toggleAllCheckboxes(checked) {
    $(".selectCheckbox").prop("checked", checked);
    updateApplyButtonState();
}

function loadModal(itemNumber) {
    if (!itemNumber) return;
    $.ajax({
        type: 'GET',
        url: `/departures/${itemNumber}`,
        success: (data) => {
            $('#infoModal .modal-body').html(data);
            $('#infoModal').modal('show');
        },
        error: () => showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', "danger")
    });
}

// –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ñ–æ—Ä–º—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
function attachPasswordFormHandler() {
    $("#password-settings-form").off("submit").on("submit", function (event) {
        event.preventDefault();

        $.ajax({
            url: $(this).attr("action"),
            method: $(this).attr("method"),
            data: $(this).serialize(),
            success: function (response) {
                $("#v-pills-profile").replaceWith(response).addClass("show active");
                attachPasswordFormHandler();
            },
            error: function () {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è.');
            }
        });
    });
}

// –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ñ–æ—Ä–º—ã –ï–≤—Ä–æ–ø–æ—á—Ç—ã
function attachEvropostFormHandler() {
    $("#evropost-settings-form").off("submit").on("submit", function (event) {
        event.preventDefault();

        $.ajax({
            url: $(this).attr("action"),
            method: $(this).attr("method"),
            data: $(this).serialize(),
            success: function (response) {
                $("#v-pills-evropost").replaceWith(response).addClass("show active");
                attachEvropostFormHandler();
                initializeCustomCredentialsCheckbox();
            },
            error: function () {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ï–≤—Ä–æ–ø–æ—á—Ç—ã.');
            }
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫—Ä–µ–¥—ã"
function initializeCustomCredentialsCheckbox() {
    const checkbox = $("#useCustomCredentials");
    const fieldsContainer = $("#custom-credentials-fields");

    if (checkbox.length && fieldsContainer.length) {
        toggleFieldsVisibility(checkbox, fieldsContainer);

        let debounceTimer;
        checkbox.off("change").on("change", function () {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                $.ajax({
                    url: '/profile/settings/use-custom-credentials',
                    type: 'POST',
                    data: { useCustomCredentials: checkbox.is(":checked") },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader(
                            $('meta[name="_csrf_header"]').attr('content'),
                            $('meta[name="_csrf"]').attr('content')
                        );
                    },
                    success: function () {
                        toggleFieldsVisibility(checkbox, fieldsContainer);
                    },
                    error: function () {
                        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ–∫–±–æ–∫—Å–∞.");
                    }
                });
            }, 300);
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø–æ–ª–µ–π
function toggleFieldsVisibility(checkbox, fieldsContainer) {
    fieldsContainer.toggle(checkbox.is(":checked"));
}

$(document).ready(function () {

    // === –î–æ–±–∞–≤–ª—è–µ–º CSRF-—Ç–æ–∫–µ–Ω ===
    const csrfToken = $('meta[name="_csrf"]').attr('content');
    const csrfHeader = $('meta[name="_csrf_header"]').attr('content');

    let stompClient = null;
    let userId = $("#userId").val(); // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è

    function connectWebSocket() {
        console.log("üöÄ connectWebSocket() –≤—ã–∑–≤–∞–Ω!");

        stompClient = new StompJs.Client({
            brokerURL: 'ws://belivery.by/ws',
            reconnectDelay: 1000,
            heartbeatIncoming: 2000,
            heartbeatOutgoing: 2000,
            debug: function (str) {
                console.log('STOMP Debug: ', str);
            }
        });

        stompClient.onConnect = function (frame) {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: ' + frame);

            let destination = '/topic/status/' + userId;
            console.log("üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ " + destination);

            if (stompClient.connected) {
                stompClient.subscribe(destination, function (message) {
                    let response = JSON.parse(message.body);
                    console.log("üì° WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: ", response);

                    console.log("‚ö†Ô∏è DEBUG: success=", response.success, "message=", response.message);

                    showAlert(response.message, response.success ? "success" : "warning");

                    $("#applyActionBtn").prop("disabled", false).html("–ü—Ä–∏–º–µ–Ω–∏—Ç—å");

                    $("#refreshAllBtn").prop("disabled", false).html('<i class="bi bi-arrow-repeat"></i>');

                    // üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                    if (response.success && response.message.startsWith("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")) {
                        reloadParcelTable();
                    }
                });
            } else {
                console.error("‚ùå STOMP –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫...");
                setTimeout(() => {
                    connectWebSocket();
                }, 2000);
            }
        };

        stompClient.onStompError = function (frame) {
            console.error('‚ùå STOMP –æ—à–∏–±–∫–∞: ', frame);
            showAlert("–û—à–∏–±–∫–∞ WebSocket: " + frame.headers['message'], "danger");
        };

        console.log("üîÑ WebSocket –∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞...");
        stompClient.activate();
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    function showAlert(message, type) {
        let existingAlert = $(".notification");

        // ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...", —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ
        if (message.includes("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")) {
            console.log("‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", message);
            return;
        }

        if (existingAlert.length > 0) {
            let currentMessage = existingAlert.find("span.alert-text").text();
            if (currentMessage === message) {
                console.log("‚ö† –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ:", message);
                return;
            }
            existingAlert.remove(); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ
        }

        const alertHtml = `
    <div class="alert alert-${type} alert-dismissible fade show notification" role="alert">
        <i class="bi ${type === 'success' ? 'bi-check-circle-fill' : 'bi-exclamation-triangle-fill'} me-2"></i>
        <span class="alert-text">${message}</span>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
    </div>`;

        $(".history-header").before(alertHtml);

        setTimeout(() => {
            $(".notification").fadeOut("slow", function () {
                $(this).remove();
            });
        }, 5000);
    }


    $(document).ready(function () {
        connectWebSocket();
    });

    function reloadParcelTable() {
        console.log("üîÑ AJAX-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã...");
        $.ajax({
            url: "/departures",
            type: "GET",
            cache: false,
            success: function (html) {
                let newTableBody = $(html).find("tbody").html();
                console.log("üìä –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:", newTableBody);
                $("tbody").html(newTableBody);
                console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
            },
            error: function () {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!");
            }
        });
    }

    $("#updateAllForm").on("submit", function (event) {
        event.preventDefault();
        sendUpdateRequest(null);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    $("body").tooltip({ selector: '[data-bs-toggle="tooltip"]' });

    /// –ê–≤—Ç–æ-—Å–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    setTimeout(() => { $(".alert").fadeOut("slow"); }, 5000);

    // –º–æ–±–∏–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä
    const burgerMenu = document.getElementById('burgerMenu');
    const mobileNav = document.getElementById('mobileNav');

    if (burgerMenu && mobileNav) {
        burgerMenu.addEventListener('click', function () {
            mobileNav.classList.toggle('active');
        });
    }

    const cookieModal = document.getElementById("cookieConsentModal");
    const acceptButton = document.getElementById("acceptCookies");

    if (!localStorage.getItem("cookiesAccepted")) {
        cookieModal.classList.add("show");
    }

    acceptButton.addEventListener("click", function () {
        localStorage.setItem("cookiesAccepted", "true");
        setCookie("cookie_consent", "accepted", 365);
        cookieModal.classList.remove("show");
    });

    function setCookie(name, value, days) {
        let expires = "";
        if (days) {
            let date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + value + "; Path=/; Secure; SameSite=None" + expires;
    }

    function getCookie(name) {
        let nameEQ = name + "=";
        let ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i].trim();
            if (c.startsWith(nameEQ)) {
                return c.substring(nameEQ.length);
            }
        }
        return null;
    }

    // –ï—Å–ª–∏ –∫—É–∫–∞ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
    if (!getCookie("cookie_consent")) {
        cookieModal.classList.add("show");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ —Ñ–æ—Ä–º
    attachPasswordFormHandler();
    attachEvropostFormHandler();
    initializeCustomCredentialsCheckbox();

    document.getElementById("selectAllCheckbox")?.addEventListener("click", function () {
        toggleAllCheckboxes(this);
    });

    document.querySelectorAll(".open-modal").forEach(button => {
        button.addEventListener("click", function () {
            const itemNumber = this.getAttribute("data-itemnumber");
            loadModal(itemNumber);
        });
    });

    document.querySelectorAll(".selectCheckbox").forEach(checkbox => {
        checkbox.addEventListener("change", updateDeleteButtonState);
    });

    //—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –≤ —Ö–µ–¥–µ—Ä–µ
    const currentPath = window.location.pathname;
    document.querySelectorAll(".nav-link").forEach(link => {
        if (link.getAttribute("data-path") === currentPath) {
            link.classList.add("active");
        }
    });

    // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è
    $(document).on("click", ".toggle-password", function () {
        const targetId = $(this).data("target");
        const input = $("#" + targetId);
        const icon = $(this).find("i");

        if (!input.length || !icon.length) return;

        const isPassword = input.attr("type") === "password";
        input.attr("type", isPassword ? "text" : "password");
        icon.toggleClass("bi-eye bi-eye-slash");
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ Offcanvas –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    $(document).on("click", "#settingsSidebar .nav-link", function () {
        const sidebar = $("#settingsSidebar");
        const offcanvasInstance = bootstrap.Offcanvas.getInstance(sidebar[0]);
        if (offcanvasInstance) {
            offcanvasInstance.hide();
            setTimeout(() => $(".offcanvas-backdrop").remove(), 300);
        }
    });

    $(".size-btn").on("click", function () {
        $(".size-btn").removeClass("active");
        $(this).addClass("active");

        const size = $(this).data("size");
        const currentUrl = new URL(window.location.href);
        currentUrl.searchParams.set("size", size);
        window.location.href = currentUrl.toString();
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ —á–µ–∫–±–æ–∫—Å–∞
    $(document).on("change", "#selectAllCheckbox", function () {
        toggleAllCheckboxes(this.checked);
    });

    $(document).on("change", ".selectCheckbox", function () {
        const allChecked = $(".selectCheckbox:checked").length === $(".selectCheckbox").length;
        $("#selectAllCheckbox").prop("checked", allChecked);
        updateApplyButtonState();
    });

    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" ===
    $("#applyActionBtn").on("click", function () {
        const selectedNumbers = $(".selectCheckbox:checked").map(function () { return this.value; }).get();
        const selectedAction = $("#actionSelect").val();

        if (selectedNumbers.length === 0) {
            showAlert("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ—Å—ã–ª–∫—É.", "warning");
            return;
        }

        if (!selectedAction) {
            showAlert("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏.", "warning");
            return;
        }

        const applyBtn = $("#applyActionBtn");
        applyBtn.prop("disabled", true).html('<i class="bi bi-arrow-repeat spin"></i> –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');

        if (selectedAction === "delete") {
            sendDeleteRequest(selectedNumbers, applyBtn);
        } else if (selectedAction === "update") {
            sendUpdateRequest(selectedNumbers, applyBtn);
        }
    });

    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë" ===
    $("#refreshAllBtn").on("click", function () {
        const refreshBtn = $(this);
        refreshBtn.prop("disabled", true).html('<i class="bi bi-arrow-repeat spin"></i>');

        $.ajax({
            url: "/departures/track-update",
            type: "POST",
            data: {},
            beforeSend: function (xhr) {
                xhr.setRequestHeader(csrfHeader, csrfToken);
            },
            success: function () {
                console.log("‚úÖ AJAX-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º WebSocket...");
            },
            error: function (xhr) {
                showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: " + xhr.responseText, "danger");
                refreshBtn.prop("disabled", false).html('<i class="bi bi-arrow-repeat"></i>');
            }
        });
    });

    // === –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É ===
    $("#filterActionBtn").on("click", function () {
        const selectedStatus = $("#status").val();
        const currentUrl = new URL(window.location.href);

        if (selectedStatus) {
            currentUrl.searchParams.set("status", selectedStatus);
        } else {
            currentUrl.searchParams.delete("status");
        }

        window.location.href = currentUrl.toString();
    });

    $(document).on("click", ".btn-link", function () {
        const itemNumber = $(this).data("itemnumber");
        loadModal(itemNumber);
    });

    $(document).on("change", ".selectCheckbox", updateDeleteButtonState);

    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ===
    $(".size-btn").on("click", function () {
        const size = $(this).data("size");
        const currentUrl = new URL(window.location.href);
        currentUrl.searchParams.set("size", size);
        window.location.href = currentUrl.toString();
    });

    // === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ ===
    function sendDeleteRequest(selectedNumbers, applyBtn) {
        $.ajax({
            url: "/departures/delete-selected",
            type: "POST",
            data: { selectedNumbers: selectedNumbers },
            beforeSend: (xhr) => xhr.setRequestHeader(csrfHeader, csrfToken),
            success: function () {
                showAlert("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", "success");
                $(".selectCheckbox:checked").closest("tr").fadeOut(500, function () { $(this).remove(); });

                // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                applyBtn.prop("disabled", false).html("–ü—Ä–∏–º–µ–Ω–∏—Ç—å");
            },
            error: (xhr) => {
                showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + xhr.responseText, "danger");
                applyBtn.prop("disabled", false).html("–ü—Ä–∏–º–µ–Ω–∏—Ç—å");
            }
        });
    }

    function sendUpdateRequest(selectedNumbers, applyBtn) {
        applyBtn.prop("disabled", true).html('<i class="bi bi-arrow-repeat spin"></i> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');

        $.ajax({
            url: "/departures/track-update",
            type: "POST",
            data: { selectedNumbers: selectedNumbers },
            beforeSend: function (xhr) {
                xhr.setRequestHeader(csrfHeader, csrfToken);
            },
            success: function () {
                console.log("‚úÖ AJAX-–∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket...");
                // –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—ë—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
            },
            error: function (xhr) {
                showAlert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: " + xhr.responseText, "danger");
                applyBtn.prop("disabled", false).html("–ü—Ä–∏–º–µ–Ω–∏—Ç—å");
            }
        });
    }

});