// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏. –ï—Å–ª–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
// –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
window.DEBUG_MODE = window.DEBUG_MODE || false;
function debugLog(...args) { if (window.DEBUG_MODE) console.log(...args); }

/** =====================
 *  –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
 * ===================== */

function updateDeleteButtonState() {
    const hasChecked = document.querySelectorAll(".selectCheckbox:checked").length > 0;
    document.getElementById("applyActionBtn").disabled = !hasChecked;
}

function updateApplyButtonState() {
    const applyBtn = document.getElementById("applyActionBtn");
    if (!applyBtn) return; // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º

    const selectedCheckboxes = document.querySelectorAll(".selectCheckbox:checked").length;
    const selectedAction = document.getElementById("actionSelect")?.value || ""; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ actionSelect

    // –ö–Ω–æ–ø–∫–∞ `disabled`, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã —á–µ–∫–±–æ–∫—Å—ã –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ
    applyBtn.disabled = !(selectedCheckboxes > 0 && selectedAction);
}

function toggleAllCheckboxes(checked) {
    document.querySelectorAll(".selectCheckbox").forEach(checkbox => {
        checkbox.checked = checked;
    });
    updateApplyButtonState();
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–µ–∫–±–æ–∫—Å–æ–≤
document.body.addEventListener("change", function (event) {
    if (event.target.classList.contains("selectCheckbox")) {
        updateApplyButtonState();
    }
});

document.getElementById("actionSelect")?.addEventListener("change", updateApplyButtonState);

function loadModal(itemNumber) {
    if (!itemNumber) return;

    fetch(`/departures/${itemNumber}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
            }
            return response.text();
        })
        .then(data => {
            document.querySelector('#infoModal .modal-body').innerHTML = data;
            let modal = new bootstrap.Modal(document.getElementById('infoModal'));
            modal.show();
        })
        .catch(() => notifyUser('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', "danger"));
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ AJAX
function ajaxSubmitForm(formId, containerId, afterLoadCallbacks = []) {
    const form = document.getElementById(formId);
    if (!form) return;

    form.addEventListener('submit', function (event) {
        event.preventDefault();

        fetch(form.action, {
            method: form.method,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                [document.querySelector('meta[name="_csrf_header"]').content]: document.querySelector('meta[name="_csrf"]').content
            },
            body: new URLSearchParams(new FormData(form))
        })
            .then(response => response.text())
            .then(html => {
                const container = document.getElementById(containerId);
                container.innerHTML = html;

                // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã HTML-–∫–æ–¥–∞ –≤–∫–ª–∞–¥–∫–∏
                afterLoadCallbacks.forEach(callback => callback());
            })
            .catch(() => alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏."));
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
function initPasswordFormHandler() {
    ajaxSubmitForm('password-settings-form', 'password-content', [initPasswordFormHandler]);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ï–≤—Ä–æ–ø–æ—á—Ç—ã
function initEvropostFormHandler() {
    ajaxSubmitForm('evropost-settings-form', 'evropost-content', [
        initEvropostFormHandler,
        initializeCustomCredentialsCheckbox
    ]);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫—Ä–µ–¥—ã"
function initializeCustomCredentialsCheckbox() {
    const checkbox = document.getElementById("useCustomCredentials");
    const fieldsContainer = document.getElementById("custom-credentials-fields");

    if (checkbox && fieldsContainer) {
        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
        toggleFieldsVisibility(checkbox, fieldsContainer);

        let debounceTimer;

        checkbox.addEventListener('change', function () {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                fetch('/profile/settings/use-custom-credentials', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        [document.querySelector('meta[name="_csrf_header"]').content]: document.querySelector('meta[name="_csrf"]').content
                    },
                    body: new URLSearchParams({ useCustomCredentials: checkbox.checked })
                })
                    .then(response => {
                        if (response.ok) {
                            toggleFieldsVisibility(checkbox, fieldsContainer);
                        } else {
                            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ–∫–±–æ–∫—Å–∞.");
                        }
                    })
                    .catch(() => {
                        alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ–∫–±–æ–∫—Å–∞.");
                    });
            }, 300);
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å –ø–æ–ª—è
function toggleFieldsVisibility(checkbox, fieldsContainer) {
    if (checkbox.checked) {
        fieldsContainer.classList.remove('hidden');
    } else {
        fieldsContainer.classList.add('hidden');
    }
}

let lastPage = window.location.pathname; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
let isInitialLoad = true;

document.addEventListener("visibilitychange", function () {
    if (isInitialLoad) {
        isInitialLoad = false;
        debugLog("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: " + document.visibilityState);
        return;
    }

    if (document.hidden) {
        debugLog("üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à—ë–ª —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
        lastPage = window.location.pathname;
    } else {
        debugLog("üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É");
        lastPage = window.location.pathname;
    }
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function isModalOpen() {
    return document.querySelector(".modal.show") !== null;
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function notifyUser(message, type = "info") {
    setTimeout(() => { // ‚è≥ –î–∞–µ–º 100–º—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
        if (document.hidden || window.location.pathname !== lastPage || isModalOpen()) {
            debugLog("üì¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —É–∂–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ");
            showToast(message, type);
        } else {
            debugLog("‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ");
            showAlert(message, type);
        }
    }, 100); // üî• 100–º—Å - –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showAlert(message, type) {
    let existingAlert = document.querySelector(".notification"); // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π alert

    // ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...", —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ
    if (message.includes("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")) {
        debugLog("‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", message);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º
    if (existingAlert) {
        let currentMessage = existingAlert.querySelector("span.alert-text")?.textContent || "";
        if (currentMessage === message) {
            debugLog("‚ö† –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ:", message);
            return;
        }
        existingAlert.remove(); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    }

    // –°–æ–∑–¥–∞—ë–º HTML —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const alertHtml = `
    <div class="alert alert-${type} alert-dismissible fade show notification" role="alert">
        <i class="bi ${type === 'success' ? 'bi-check-circle-fill' : 'bi-exclamation-triangle-fill'} me-2"></i>
        <span class="alert-text">${message}</span>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="–ó–∞–∫—Ä—ã—Ç—å"></button>
    </div>`;

    notificationContainer.insertAdjacentHTML("afterbegin", alertHtml);

    // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        let notification = document.querySelector(".notification");
        if (notification) {
            notification.style.transition = "opacity 0.5s";
            notification.style.opacity = "0";
            setTimeout(() => notification.remove(), 500);
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ Toast (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à—ë–ª –∏–ª–∏ —É–∂–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ)
function showToast(message, type = "info") {
    let toastContainer = document.getElementById("globalToastContainer");
    if (!toastContainer) {
        console.warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ—Å—Ç–æ–≤!");
        return;
    }

    let toastId = "toast-" + new Date().getTime();
    let toastHtml = `
        <div id="${toastId}" class="toast align-items-center text-bg-${type} border-0 mb-2" role="alert" aria-live="assertive" aria-atomic="true">
          <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
          </div>
        </div>
    `;

    toastContainer.insertAdjacentHTML("beforeend", toastHtml);
    let toastElement = document.getElementById(toastId);
    let toast = new bootstrap.Toast(toastElement, { delay: 5000 });
    toast.show();

    toastElement.addEventListener("hidden.bs.toast", () => {
        toastElement.remove();
    });
}

let stompClient = null;
let userId = document.getElementById("userId")?.value || ""; // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–æ–ª—è

function connectWebSocket() {
    debugLog("üöÄ connectWebSocket() –≤—ã–∑–≤–∞–Ω!");

    stompClient = new StompJs.Client({
        //'wss://belivery.by/ws', 'ws://localhost:8080/ws',
        brokerURL: 'ws://localhost:8080/ws',
        reconnectDelay: 1000,
        heartbeatIncoming: 0,
        heartbeatOutgoing: 0,
        debug: function (str) {
            debugLog('STOMP Debug: ', str);
        }
    });

    stompClient.onConnect = function (frame) {
        debugLog('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: ' + frame);

        let destination = '/topic/status/' + userId;
        debugLog("üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ " + destination);

        if (stompClient.connected) {
            stompClient.subscribe(destination, function (message) {
                let response = JSON.parse(message.body);
                debugLog("üì° WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: ", response);

                debugLog("‚ö†Ô∏è DEBUG: success=", response.success, "message=", response.message);

                notifyUser(response.message, response.success ? "success" : "warning");

                let applyActionBtn = document.getElementById("applyActionBtn");
                if (applyActionBtn) {
                    applyActionBtn.disabled = false;
                    applyActionBtn.innerHTML = "–ü—Ä–∏–º–µ–Ω–∏—Ç—å";
                }

                let refreshAllBtn = document.getElementById("refreshAllBtn");
                if (refreshAllBtn) {
                    refreshAllBtn.disabled = false;
                    refreshAllBtn.innerHTML = '<i class="bi bi-arrow-repeat"></i>';
                }

                // üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                if (response.success && response.message.startsWith("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")) {
                    reloadParcelTable();
                }
            });
        } else {
            console.error("‚ùå STOMP –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫...");
            setTimeout(() => {
                connectWebSocket();
            }, 2000);
        }
    };

    stompClient.onStompError = function (frame) {
        console.error('‚ùå STOMP –æ—à–∏–±–∫–∞: ', frame);
        notifyUser("–û—à–∏–±–∫–∞ WebSocket: " + frame.headers['message'], "danger");
    };

    debugLog("üîÑ WebSocket –∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞...");
    stompClient.activate();
}

function reloadParcelTable() {
    debugLog("üîÑ AJAX-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã...");

    fetch("/departures", { method: "GET", cache: "no-store" })
        .then(response => {
            if (!response.ok) {
                throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
            }
            return response.text();
        })
        .then(html => {
            let parser = new DOMParser();
            let doc = parser.parseFromString(html, "text/html");
            let newTableBody = doc.querySelector("tbody")?.innerHTML || "";

            if (newTableBody) {
                let currentTbody = document.querySelector("tbody");
                if (currentTbody) {
                    currentTbody.innerHTML = newTableBody;
                    debugLog("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
                }
            }
        })
        .catch(error => {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!", error);
        });
}

let activeTooltip = null; // –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π tooltip

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è tooltips
 */
function enableTooltips(root = document) {
    root.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(tooltipTriggerEl => {
        // –ï—Å–ª–∏ tooltip —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if (bootstrap.Tooltip.getInstance(tooltipTriggerEl)) return;

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π tooltip
        const newTooltip = new bootstrap.Tooltip(tooltipTriggerEl, {
            trigger: 'manual', // –£–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é
            placement: 'top',
        });

        // === –ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ (–ü–ö) ===
        tooltipTriggerEl.addEventListener("mouseenter", function () {
            if (activeTooltip && activeTooltip !== newTooltip) {
                activeTooltip.hide();
            }
            newTooltip.show();
            activeTooltip = newTooltip;
        });

        // === –£—Ö–æ–¥ –∫—É—Ä—Å–æ—Ä–∞ (–ü–ö) ===
        tooltipTriggerEl.addEventListener("mouseleave", function () {
            newTooltip.hide();
            if (activeTooltip === newTooltip) {
                activeTooltip = null;
            }
        });

        // === –ö–ª–∏–∫ (–º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞) ===
        tooltipTriggerEl.addEventListener("click", function (e) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ, —á—Ç–æ–±—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª —Å—Ä–∞–∑—É
            e.stopPropagation();
            if (activeTooltip === newTooltip) {
                newTooltip.hide();
                activeTooltip = null;
            } else {
                if (activeTooltip) {
                    activeTooltip.hide();
                }
                newTooltip.show();
                activeTooltip = newTooltip;
            }
        });
    });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ –≤–Ω–µ tooltip (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
document.addEventListener("click", function (event) {
    if (activeTooltip) {
        // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø—Ä–æ–∏–∑–æ—à—ë–ª –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å tooltip
        const tooltipEl = activeTooltip._element;
        if (tooltipEl && !tooltipEl.contains(event.target)) {
            activeTooltip.hide();
            activeTooltip = null;
        }
    }
}, true);

let storeToDelete = null;
let analyticsActionUrl = null;

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É
 */
async function loadStores() {
    const response = await fetch('/profile/stores');
    if (!response.ok) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤:", await response.text());
        return;
    }

    const stores = await response.json();
    const tableBody = document.getElementById('storeTableBody');

    if (!tableBody) {
        console.warn("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'storeTableBody' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM!");
        return;
    }

    tableBody.innerHTML = "";

    stores.forEach(store => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td class="d-flex align-items-center">
                <input type="radio" name="defaultStore"
                       class="default-store-radio me-2"
                       data-store-id="${store.id}"
                       ${store.default ? "checked" : ""}
                       data-bs-toggle="tooltip"
                       title="–ú–∞–≥–∞–∑–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é">
                <input type="text" class="form-control store-name-input" value="${store.name}" id="store-name-${store.id}" disabled>
            </td>
            <td>
                <button class="btn btn-sm btn-outline-primary edit-store-btn" data-store-id="${store.id}">
                    <i class="bi bi-pencil"></i>
                </button>
                <button class="btn btn-sm btn-outline-success save-store-btn d-none" data-store-id="${store.id}">
                    <i class="bi bi-check"></i>
                </button>
                <button class="btn btn-sm btn-outline-danger delete-store-btn" data-store-id="${store.id}">
                    <i class="bi bi-trash"></i>
                </button>
            </td>
        `;
        tableBody.appendChild(row);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º tooltips –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
    enableTooltips();

    console.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã.");
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
 */
async function loadAnalyticsButtons() {
    const response = await fetch('/profile/stores');
    if (!response.ok) return;

    const stores = await response.json();
    const container = document.getElementById('storeAnalyticsButtons');
    if (!container) return;

    container.innerHTML = '';

    stores.forEach(store => {
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'btn btn-outline-secondary w-100 reset-store-analytics-btn mb-2 d-flex align-items-center';
        btn.dataset.storeId = store.id;
        btn.dataset.storeName = store.name;
        btn.setAttribute('data-bs-toggle', 'tooltip');
        btn.title = `–û—á–∏—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ ¬´${store.name}¬ª`;
        btn.innerHTML = `<i class="bi bi-brush me-2"></i> –û—á–∏—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É ‚Äî ${store.name}`;

        // ‚úÖ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
        btn.addEventListener('click', () => {
            analyticsActionUrl = `/analytics/reset/store/${store.id}`;
            showResetModal(`–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ ¬´${store.name}¬ª?`);
        });

        container.appendChild(btn);
    });

    // –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bootstrap tooltip (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    enableTooltips(container);
}

/**
 * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
 */
function toggleEditStore(storeId) {
    const inputField = document.getElementById(`store-name-${storeId}`);
    const editBtn = document.querySelector(`.edit-store-btn[data-store-id="${storeId}"]`);
    const saveBtn = document.querySelector(`.save-store-btn[data-store-id="${storeId}"]`);
    const deleteBtn = document.querySelector(`.delete-store-btn[data-store-id="${storeId}"], .cancel-edit-store-btn[data-store-id="${storeId}"]`);

    if (inputField.disabled) {
        // –í–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        inputField.disabled = false;
        inputField.focus();

        editBtn.classList.add('d-none');
        saveBtn.classList.remove('d-none');

        // –ú–µ–Ω—è–µ–º "–£–¥–∞–ª–∏—Ç—å" –Ω–∞ "–û—Ç–º–µ–Ω–∏—Ç—å"
        deleteBtn.classList.remove("delete-store-btn");
        deleteBtn.classList.add("cancel-edit-store-btn");
        deleteBtn.innerHTML = `<i class="bi bi-x"></i>`;
    } else {
        // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        inputField.disabled = true;

        editBtn.classList.remove('d-none');
        saveBtn.classList.add('d-none');

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
        deleteBtn.classList.remove("cancel-edit-store-btn");
        deleteBtn.classList.add("delete-store-btn");
        deleteBtn.innerHTML = `<i class="bi bi-trash"></i>`;
    }
}

const baseUrl = "/profile/stores"; // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
 */
async function saveStore(storeId) {
    const inputField = document.getElementById(`store-name-${storeId}`);
    const newName = inputField.value.trim();

    if (!newName) {
        alert("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
        return;
    }

    const response = await fetch(`${baseUrl}/${storeId}`, { // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
            [document.querySelector('meta[name="_csrf_header"]').content]: document.querySelector('meta[name="_csrf"]').content
        },
        body: JSON.stringify({ name: newName })
    });

    if (response.ok) {
        loadStores();
        loadAnalyticsButtons();
    } else {
        alert("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + await response.text());
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
 */
function addNewStore() {
    const tableBody = document.getElementById("storeTableBody");
    const tempId = `new-${Date.now()}`; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞

    const row = document.createElement("tr");
    row.innerHTML = `
        <td>
            <input type="text" class="form-control store-name-input" id="store-name-${tempId}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ">
        </td>
        <td>
            <button type="button" class="btn btn-sm btn-outline-success save-new-store-btn" data-store-id="${tempId}">
                <i class="bi bi-check"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-danger remove-new-store-btn" data-store-id="${tempId}">
                <i class="bi bi-x"></i>
            </button>
        </td>
    `;

    tableBody.appendChild(row);

    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    document.getElementById(`store-name-${tempId}`).focus();
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –¥–æ–±–∞–≤–ª—è—Ç—å –º–∞–≥–∞–∑–∏–Ω
 */
function removeNewStoreRow(button) {
    button.closest("tr").remove();
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
 */
async function saveNewStore(event) {
    event.preventDefault(); // ‚ùó –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

    const button = event.target.closest(".save-new-store-btn");
    if (!button) return;

    const storeId = button.dataset.storeId;
    const inputField = document.getElementById(`store-name-${storeId}`);
    const newStoreName = inputField?.value.trim();

    if (!newStoreName) {
        alert("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
        return;
    }

    const response = await fetch("/profile/stores", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            [document.querySelector('meta[name="_csrf_header"]').content]: document.querySelector('meta[name="_csrf"]').content
        },
        body: JSON.stringify({ name: newStoreName })
    });

    if (response.ok) {
        loadStores(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        updateStoreLimit();
        loadAnalyticsButtons();
    } else {
        console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: ", await response.text());
        return;
    }
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
 */
function confirmDeleteStore(storeId) {
    storeToDelete = storeId;
    new bootstrap.Modal(document.getElementById('deleteStoreModal')).show();
}

/**
 * –£–¥–∞–ª—è–µ—Ç –º–∞–≥–∞–∑–∏–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 */
async function deleteStore() {
    if (!storeToDelete) return;

    const response = await fetch(`${baseUrl}/${storeToDelete}`, { // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
        method: "DELETE",
        headers: {
            [document.querySelector('meta[name="_csrf_header"]').content]: document.querySelector('meta[name="_csrf"]').content
        }
    });

    if (response.ok) {
        loadStores();
        updateStoreLimit();
        loadAnalyticsButtons();
    } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + await response.text());
    }

    storeToDelete = null;
    bootstrap.Modal.getInstance(document.getElementById('deleteStoreModal')).hide();
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
 */
async function updateStoreLimit() {
    try {
        const response = await fetch('/profile/stores/limit');
        if (!response.ok) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤:", response.status);
            return;
        }

        const newLimit = await response.text();
        const storeLimitElement = document.getElementById("store-limit");

        if (storeLimitElement) {
            storeLimitElement.textContent = newLimit;
        } else {
            console.warn("–≠–ª–µ–º–µ–Ω—Ç #store-limit –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤:", error);
    }
}

function showResetModal(message) {
    const modalEl = document.getElementById('resetAnalyticsModal');
    const msgEl = document.getElementById('resetAnalyticsMessage');
    const confirmBtn = document.getElementById('confirmResetAnalytics');
    if (!modalEl || !msgEl || !confirmBtn) return;
    msgEl.textContent = message;
    const modal = new bootstrap.Modal(modalEl);
    confirmBtn.onclick = async function () {
        if (!analyticsActionUrl) return;
        try {
            const response = await fetch(analyticsActionUrl, { method: 'POST', headers: { [window.csrfHeader]: window.csrfToken } });
            if (response.ok) {
                notifyUser('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.', 'success');
                loadAnalyticsButtons();
            } else {
                notifyUser('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', 'danger');
            }
        } catch (e) {
            notifyUser('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'danger');
        }
        analyticsActionUrl = null;
        modal.hide();
    };
    modal.show();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞)
 */
const storeTableBody = document.getElementById("storeTableBody");
if (storeTableBody) {
    storeTableBody.addEventListener("change", async function (event) {
        const radio = event.target.closest(".default-store-radio");
        if (!radio) return;

        const storeId = radio.dataset.storeId;

        try {
            const response = await fetch(`/profile/stores/default/${storeId}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    [document.querySelector('meta[name="_csrf_header"]').content]: document.querySelector('meta[name="_csrf"]').content
                }
            });

            if (!response.ok) {
                const errorText = await response.text();
                notifyUser(`‚ùå –û—à–∏–±–∫–∞: ${errorText}`, "danger");
                return;
            }

            //notifyUser(`–ú–∞–≥–∞–∑–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–Ω–æ–≤–ª—ë–Ω!`, "success");

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            loadStores();
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", error);
            notifyUser("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º", "danger");
        }
    });
}

document.addEventListener("DOMContentLoaded", function () {
    debugLog("DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω");

    // === –î–æ–±–∞–≤–ª—è–µ–º CSRF-—Ç–æ–∫–µ–Ω ===
    const csrfToken = document.querySelector('meta[name="_csrf"]')?.content || "";
    const csrfHeader = document.querySelector('meta[name="_csrf_header"]')?.content || "";
    window.csrfToken = csrfToken;
    window.csrfHeader = csrfHeader;

    // === WebSocket ===
    connectWebSocket();

    document.getElementById("updateAllForm")?.addEventListener("submit", function (event) {
        event.preventDefault();
        sendUpdateRequest(null);
    });

    // === –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (tooltips) ===
    enableTooltips();

    /// –ê–≤—Ç–æ-—Å–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    setTimeout(() => {
        document.querySelectorAll(".alert").forEach(alert => {
            alert.style.transition = "opacity 0.5s";
            alert.style.opacity = "0";
            setTimeout(() => alert.remove(), 500); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        });
    }, 10000);

    // –º–æ–±–∏–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä
    const burgerMenu = document.getElementById('burgerMenu');
    const mobileNav = document.getElementById('mobileNav');

    if (burgerMenu && mobileNav) {
        burgerMenu.addEventListener('click', function () {
            mobileNav.classList.toggle('active');
        });
    }

    /**
     * –ö–£–ö–ò
     */
    const cookieModal = document.getElementById("cookieConsentModal");
    const acceptButton = document.getElementById("acceptCookies");

    if (!localStorage.getItem("cookiesAccepted")) {
        cookieModal.classList.add("show");
    }

    acceptButton.addEventListener("click", function () {
        localStorage.setItem("cookiesAccepted", "true");
        setCookie("cookie_consent", "accepted", 365);
        cookieModal.classList.remove("show");
    });

    function setCookie(name, value, days) {
        let expires = "";
        if (days) {
            let date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + value + "; Path=/; Secure; SameSite=None" + expires;
    }

    function getCookie(name) {
        let nameEQ = name + "=";
        let ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i].trim();
            if (c.startsWith(nameEQ)) {
                return c.substring(nameEQ.length);
            }
        }
        return null;
    }

    // –ï—Å–ª–∏ –∫—É–∫–∞ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
    if (!getCookie("cookie_consent")) {
        cookieModal.classList.add("show");
    }

    /**
     * –¢—Ä–µ–∫–∏–Ω–≥ - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ - –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ç—Ä–µ–∫–∞
     */
    // –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞
    const storeSelectDropdown = document.getElementById("storeSelect");
    if (storeSelectDropdown) {
        debugLog('–ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ü–∏–π:', storeSelectDropdown.options.length);
        if (storeSelectDropdown.options.length > 1) {
            storeSelectDropdown.classList.remove("d-none");
        }
    } else {
        console.warn('–≠–ª–µ–º–µ–Ω—Ç storeSelect –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    /**
     * –ü—Ä–æ—Ñ–∏–ª—å - —Ä–∞–±–æ—Ç–∞ —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ) –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
     */
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ —Ñ–æ—Ä–º
    initPasswordFormHandler();
    initEvropostFormHandler();
    initializeCustomCredentialsCheckbox();

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω" - —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ
    const addStoreBtn = document.getElementById("addStoreBtn");
    if (addStoreBtn) {
        addStoreBtn.addEventListener("click", addNewStore);
    }
    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã
    const storeTableBody = document.getElementById("storeTableBody");
    if (storeTableBody) {

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤
        updateStoreLimit();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        loadStores();
        loadAnalyticsButtons();

        storeTableBody.addEventListener("click", function (event) {
            event.preventDefault(); // ‚ùó –û–¢–ú–ï–ù–Ø–ï–ú –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–£ –°–¢–†–ê–ù–ò–¶–´

            const button = event.target.closest("button");
            if (!button) return;

            const storeId = button.dataset.storeId;

            if (button.classList.contains("edit-store-btn")) {
                toggleEditStore(storeId);
            }
            if (button.classList.contains("save-store-btn")) {
                saveStore(storeId);
            }
            if (button.classList.contains("delete-store-btn")) {
                confirmDeleteStore(storeId);
            }
            if (button.classList.contains("cancel-edit-store-btn")) {
                toggleEditStore(storeId);
            }
            if (button.classList.contains("save-new-store-btn")) {
                saveNewStore(event);
            }
            if (button.classList.contains("remove-new-store-btn")) {
                removeNewStoreRow(button);
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ - —É–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    const confirmDeleteBtn = document.getElementById("confirmDeleteStore");
    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener("click", deleteStore);
    }

    // === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π ===
    document.getElementById("resetAllAnalyticsBtn")?.addEventListener("click", () => {
        analyticsActionUrl = "/analytics/reset/all";
        showResetModal("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É?");
    });

    document.body.addEventListener("click", function (event) {
        const btn = event.target.closest(".reset-store-analytics-btn");
        if (!btn) return;
        analyticsActionUrl = `/analytics/reset/store/${btn.dataset.storeId}`;
        showResetModal(`–û—á–∏—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ \u00AB${btn.dataset.storeName}\u00BB?`);
    });

    /**
     * –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    document.body.addEventListener("click", function (event) {
        if (event.target.closest(".open-modal")) {
            const button = event.target.closest(".open-modal");
            const itemNumber = button.getAttribute("data-itemnumber");
            loadModal(itemNumber);
        }
    });

    document.body.addEventListener("click", function (event) {
        if (event.target.closest(".btn-link")) {
            const button = event.target.closest(".btn-link");
            const itemNumber = button.getAttribute("data-itemnumber");
            loadModal(itemNumber);
        }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    let modalElement = document.getElementById('infoModal');
    if (modalElement) {
        modalElement.addEventListener('hidden.bs.modal', function () {
            let backdrop = document.querySelector('.modal-backdrop');
            if (backdrop) {
                backdrop.remove(); // –£–¥–∞–ª—è–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
            }
            document.body.classList.remove('modal-open'); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è
            document.body.style.overflow = ''; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        });
    }

    //—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –≤ —Ö–µ–¥–µ—Ä–µ
    const currentPath = window.location.pathname;
    document.querySelectorAll(".nav-link").forEach(link => {
        if (link.getAttribute("data-path") === currentPath) {
            link.classList.add("active");
        }
    });

    // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è
    document.querySelectorAll(".toggle-password").forEach(button => {
        button.addEventListener("click", function () {
            const targetId = this.getAttribute("data-target");
            const input = document.getElementById(targetId);
            const icon = this.querySelector("i");

            if (!input || !icon) return;

            const isPassword = input.type === "password";
            input.type = isPassword ? "text" : "password";
            icon.classList.toggle("bi-eye");
            icon.classList.toggle("bi-eye-slash");
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ Offcanvas –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    const sidebar = document.getElementById("settingsSidebar");

    if (sidebar) {
        sidebar.querySelectorAll(".nav-link").forEach(link => {
            link.addEventListener("click", function () {
                const offcanvasInstance = bootstrap.Offcanvas.getInstance(sidebar);
                if (offcanvasInstance) {
                    offcanvasInstance.hide();
                    setTimeout(() => {
                        const backdrop = document.querySelector(".offcanvas-backdrop");
                        if (backdrop) backdrop.remove();
                    }, 300);
                }
            });
        });
    }

    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ===
    document.querySelectorAll(".size-btn").forEach(button => {
        button.addEventListener("click", function () {
            // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å "active" —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            document.querySelectorAll(".size-btn").forEach(btn => btn.classList.remove("active"));

            // –î–æ–±–∞–≤–ª—è–µ–º "active" —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É
            this.classList.add("active");

            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-size
            const size = this.getAttribute("data-size");

            // –û–±–Ω–æ–≤–ª—è–µ–º URL, –º–µ–Ω—è—è –ø–∞—Ä–∞–º–µ—Ç—Ä "size"
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.set("size", size);

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL
            window.location.href = currentUrl.toString();
        });
    });

    const selectAllCheckbox = document.getElementById("selectAllCheckbox");

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞: –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã
    selectAllCheckbox?.addEventListener("click", function () {
        toggleAllCheckboxes(this.checked);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å—ã –≤—ã–±—Ä–∞–Ω—ã/—Å–Ω—è—Ç—ã –≤—Ä—É—á–Ω—É—é
    document.body.addEventListener("change", function (event) {
        if (event.target.id === "selectAllCheckbox") {
            toggleAllCheckboxes(event.target.checked);
        }
    });

    document.body.addEventListener("change", function (event) {
        if (event.target.classList.contains("selectCheckbox")) {
            const allCheckboxes = document.querySelectorAll(".selectCheckbox");
            const checkedCheckboxes = document.querySelectorAll(".selectCheckbox:checked");
            const selectAllCheckbox = document.getElementById("selectAllCheckbox");

            selectAllCheckbox.checked = allCheckboxes.length > 0 && checkedCheckboxes.length === allCheckboxes.length;
            updateApplyButtonState();
        }
    });

    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" ===
    document.getElementById("applyActionBtn")?.addEventListener("click", function () {
        const selectedNumbers = Array.from(document.querySelectorAll(".selectCheckbox:checked"))
            .map(checkbox => checkbox.value);

        const selectedAction = document.getElementById("actionSelect").value;
        const applyBtn = document.getElementById("applyActionBtn");

        if (selectedNumbers.length === 0) {
            notifyUser("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ—Å—ã–ª–∫—É.", "warning");
            return;
        }

        if (!selectedAction) {
            notifyUser("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏.", "warning");
            return;
        }

        applyBtn.disabled = true;
        applyBtn.innerHTML = '<i class="bi bi-arrow-repeat spin"></i> –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';

        if (selectedAction === "delete") {
            sendDeleteRequest(selectedNumbers, applyBtn);
        } else if (selectedAction === "update") {
            sendUpdateRequest(selectedNumbers, applyBtn);
        }
    });

    updateApplyButtonState();

    // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë" ===
    document.getElementById("refreshAllBtn")?.addEventListener("click", function () {
        const refreshBtn = this;
        refreshBtn.disabled = true;
        refreshBtn.innerHTML = '<i class="bi bi-arrow-repeat spin"></i>';

        fetch("/departures/track-update", {
            method: "POST",
            headers: {
                [csrfHeader]: csrfToken // CSRF-—Ç–æ–∫–µ–Ω
            }
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text); });
                }
                debugLog("‚úÖ AJAX-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º WebSocket...");
            })
            .catch(error => {
                notifyUser("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: " + error.message, "danger");
                refreshBtn.disabled = false;
                refreshBtn.innerHTML = '<i class="bi bi-arrow-repeat"></i>';
            });
    });

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤: —Å—Ç–∞—Ç—É—Å –∏ –º–∞–≥–∞–∑–∏–Ω
    const statusFilterDropdown  = document.getElementById("status");
    const storeFilterDropdown = document.getElementById("storeId");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ –Ω–µ—Ç - –≤—ã—Ö–æ–¥–∏–º)
    if (!statusFilterDropdown) return;

    // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–µ—Ç (–ø–æ—Ç–æ–º—É —á—Ç–æ 1 –º–∞–≥–∞–∑–∏–Ω), –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º
    if (!storeFilterDropdown) {
        console.warn("‚ÑπÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º —Å–∫—Ä—ã—Ç, –Ω–æ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É —Ä–∞–±–æ—Ç–∞–µ—Ç.");
    } else {
        // –ï—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω 1, —Å–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
        if (storeFilterDropdown.options.length <= 2) {
            storeFilterDropdown.closest(".filter-group").classList.add("d-none");
        }
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ URL (—á—Ç–æ–±—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–Ω–∏ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å)
    const currentUrl = new URL(window.location.href);
    const currentStatus = currentUrl.searchParams.get("status");
    const currentStore = currentUrl.searchParams.get("storeId");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –≤ URL –±—ã–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (currentStatus) statusFilterDropdown.value = currentStatus;
    if (currentStore && storeFilterDropdown) storeFilterDropdown.value = currentStore;

    /**
     * –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤.
     * - –°—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö.
     * - –û–±–Ω–æ–≤–ª—è–µ—Ç URL —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
     * - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.
     */
    function applyFilters() {
        const selectedStatus = statusFilterDropdown.value;
        const selectedStore = storeFilterDropdown ? storeFilterDropdown.value : null;
        const currentUrl = new URL(window.location.href);

        if (selectedStatus) {
            currentUrl.searchParams.set("status", selectedStatus);
        } else {
            currentUrl.searchParams.delete("status");
        }

        if (selectedStore) {
            currentUrl.searchParams.set("storeId", selectedStore);
        } else {
            currentUrl.searchParams.delete("storeId");
        }

        debugLog("‚úÖ –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω—ë–Ω: —Å—Ç–∞—Ç—É—Å =", selectedStatus, "–º–∞–≥–∞–∑–∏–Ω =", selectedStore || "–Ω–µ—Ç –≤—ã–±–æ—Ä–∞");

        window.location.href = currentUrl.toString();
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö
    statusFilterDropdown.addEventListener("change", applyFilters);
    if (storeFilterDropdown) {
        storeFilterDropdown.addEventListener("change", applyFilters);
    }

    document.body.addEventListener("change", function (event) {
        if (event.target.classList.contains("selectCheckbox")) {
            updateDeleteButtonState();
        }
    });

    // === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ ===
    function sendDeleteRequest(selectedNumbers, applyBtn) {
        applyBtn.disabled = true;
        applyBtn.innerHTML = "–£–¥–∞–ª–µ–Ω–∏–µ...";

        const formData = new URLSearchParams();
        selectedNumbers.forEach(number => formData.append("selectedNumbers", number));

        fetch("/departures/delete-selected", {
            method: "POST",
            headers: {
                [csrfHeader]: csrfToken // CSRF-—Ç–æ–∫–µ–Ω
            },
            body: formData
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text); });
                }
                notifyUser("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", "success");

                const checkedCheckboxes = Array.from(document.querySelectorAll(".selectCheckbox:checked"));
                const rowsToRemove = checkedCheckboxes
                    .map(cb => cb.closest("tr"))
                    .filter(row => row);

                // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
                rowsToRemove.forEach(row => {
                    row.style.transition = "opacity 0.5s";
                    row.style.opacity = "0";
                });

                // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
                setTimeout(() => {
                    rowsToRemove.forEach(row => row.remove());
                    clearAllCheckboxes();
                }, 500);
            })
            .catch(error => {
                notifyUser("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + error.message, "danger");
            })
            .finally(() => {
                applyBtn.disabled = false;
                applyBtn.innerHTML = "–ü—Ä–∏–º–µ–Ω–∏—Ç—å";
            });
    }

    function sendUpdateRequest(selectedNumbers, applyBtn) {
        applyBtn.disabled = true;
        applyBtn.innerHTML = '<i class="bi bi-arrow-repeat spin"></i> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';

        const formData = new URLSearchParams();
        selectedNumbers.forEach(number => formData.append("selectedNumbers", number));

        fetch("/departures/track-update", {
            method: "POST",
            headers: {
                [csrfHeader]: csrfToken // CSRF-—Ç–æ–∫–µ–Ω
            },
            body: formData
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text); });
                }
                debugLog("‚úÖ AJAX-–∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket...");

                clearAllCheckboxes();

            })
            .catch(error => {
                notifyUser("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: " + error.message, "danger");
            })
            .finally(() => {
                applyBtn.disabled = false;
                applyBtn.innerHTML = "–ü—Ä–∏–º–µ–Ω–∏—Ç—å";
            });
    }

    function clearAllCheckboxes() {
        document.querySelectorAll(".selectCheckbox, #selectAllCheckbox").forEach(checkbox => {
            checkbox.checked = false;
        });

        setTimeout(updateApplyButtonState, 0); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤
    }

});